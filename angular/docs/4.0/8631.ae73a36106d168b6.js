"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8631],{8631:(c,t,i)=>{i.r(t),i.d(t,{BreakpointsModule:()=>m});var o=i(7404),d=i(3163),l=i(5175),r=i(4765),e=i(1223);const u=[{path:"",component:(()=>{class n{constructor(){}}return n.\u0275fac=function(s){return new(s||n)},n.\u0275cmp=e.Xpm({type:n,selectors:[["app-breakpoints"]],decls:83,vars:0,consts:[["id","getting-started"],[1,"docs-lead","fs-4","fw-light"],[1,"table"],[1,"callout","callout-warning"],["href","https://www.w3.org/TR/mediaqueries-4/#range-context"],["href","https://www.w3.org/TR/mediaqueries-4/#mq-min-max"]],template:function(s,g){1&s&&(e.TgZ(0,"h1",0),e._uU(1,"Breakpoints"),e.qZA(),e.TgZ(2,"p",1),e._uU(3,"Breakpoints are the triggers in CoreUI for Angular for how your layout responsive changes across device or viewport sizes."),e.qZA(),e.TgZ(4,"markdown"),e.IAx(),e._uU(5,"\n\n## Core concepts\n\n- **Breakpoints are the building blocks of responsive design.** Use them to control when your layout can be adapted at a particular viewport or device size.\n\n- **Use media queries to architect your CSS by breakpoint.** Media queries are a feature of CSS that allow you to conditionally apply styles based on a set of browser and operating system parameters. We most commonly use `min-width` in our media queries.\n\n- **Mobile first, responsive design is the goal.** CoreUI's CSS aims to apply the bare minimum of styles to make a layout work at the smallest breakpoint, and then layers on styles to adjust that design for larger devices. This optimizes your CSS, improves rendering time, and provides a great experience for your visitors.\n\n## Available breakpoints\n\nCoreUI for Angular includes six default breakpoints, sometimes referred to as _grid tiers_, for building responsively. These breakpoints can be customized if you're using our source Sass files.\n"),e.fQ9(),e.qZA(),e.TgZ(6,"table",2)(7,"thead")(8,"tr")(9,"th"),e._uU(10,"Breakpoint"),e.qZA(),e.TgZ(11,"th"),e._uU(12,"Class infix"),e.qZA(),e.TgZ(13,"th"),e._uU(14,"Dimensions"),e.qZA()()(),e.TgZ(15,"tbody")(16,"tr")(17,"td"),e._uU(18,"X-Small"),e.qZA(),e.TgZ(19,"td")(20,"em"),e._uU(21,"None"),e.qZA()(),e.TgZ(22,"td"),e._uU(23,"<576px"),e.qZA()(),e.TgZ(24,"tr")(25,"td"),e._uU(26,"Small"),e.qZA(),e.TgZ(27,"td")(28,"code"),e._uU(29,"sm"),e.qZA()(),e.TgZ(30,"td"),e._uU(31,"\u2265576px"),e.qZA()(),e.TgZ(32,"tr")(33,"td"),e._uU(34,"Medium"),e.qZA(),e.TgZ(35,"td")(36,"code"),e._uU(37,"md"),e.qZA()(),e.TgZ(38,"td"),e._uU(39,"\u2265768px"),e.qZA()(),e.TgZ(40,"tr")(41,"td"),e._uU(42,"Large"),e.qZA(),e.TgZ(43,"td")(44,"code"),e._uU(45,"lg"),e.qZA()(),e.TgZ(46,"td"),e._uU(47,"\u2265992px"),e.qZA()(),e.TgZ(48,"tr")(49,"td"),e._uU(50,"Extra large"),e.qZA(),e.TgZ(51,"td")(52,"code"),e._uU(53,"xl"),e.qZA()(),e.TgZ(54,"td"),e._uU(55,"\u22651200px"),e.qZA()(),e.TgZ(56,"tr")(57,"td"),e._uU(58,"Extra extra large"),e.qZA(),e.TgZ(59,"td")(60,"code"),e._uU(61,"xxl"),e.qZA()(),e.TgZ(62,"td"),e._uU(63,"\u22651400px"),e.qZA()()()(),e.TgZ(64,"markdown"),e.IAx(),e._uU(65,"\nEach breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions\u2014they don't specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.\n\nThese breakpoints are customizable via Sass\u2014you'll find them in a Sass map in our `_variables.scss` stylesheet.\n\n```scss\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px,\n  xxl: 1400px\n);\n```\n\nFor more information and examples on how to modify our Sass maps and variables, please refer to [the Sass section of the Grid documentation](https://coreui.io/docs/4.0/layout/grid#sass).\n\n## Media queries\n\nSince CoreUI for Angular is developed to be mobile first, we use a handful of [media queries](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.\n\n### Min-width\n\nCoreUI for Angular primarily uses the following media query ranges\u2014or breakpoints\u2014in our source Sass files for our layout, grid system, and components.\n\n```scss\n// Source mixins\n\n// No media query necessary for xs breakpoint as it's effectively `@media (min-width: 0) { ... }`\n@include media-breakpoint-up(sm) { ... }\n@include media-breakpoint-up(md) { ... }\n@include media-breakpoint-up(lg) { ... }\n@include media-breakpoint-up(xl) { ... }\n@include media-breakpoint-up(xxl) { ... }\n\n// Usage\n\n// Example: Hide starting at `min-width: 0`, and then show at the `sm` breakpoint\n.custom-class {\n  display: none;\n}\n@include media-breakpoint-up(sm) {\n  .custom-class {\n    display: block;\n  }\n}\n```\n\nThese Sass mixins translate in our compiled CSS using the values declared in our Sass variables. For example:\n\n```scss\n// X-Small devices (portrait phones, less than 576px)\n// No media query for `xs` since this is the default in CoreUI\n\n// Small devices (landscape phones, 576px and up)\n@media (min-width: 576px) { ... }\n\n// Medium devices (tablets, 768px and up)\n@media (min-width: 768px) { ... }\n\n// Large devices (desktops, 992px and up)\n@media (min-width: 992px) { ... }\n\n// X-Large devices (large desktops, 1200px and up)\n@media (min-width: 1200px) { ... }\n\n// XX-Large devices (larger desktops, 1400px and up)\n@media (min-width: 1400px) { ... }\n```\n\n### Max-width\n\nWe occasionally use media queries that go in the other direction (the given screen size *or smaller*):\n\n```scss\n// No media query necessary for xs breakpoint as it's effectively `@media (max-width: 0) { ... }`\n@include media-breakpoint-down(sm) { ... }\n@include media-breakpoint-down(md) { ... }\n@include media-breakpoint-down(lg) { ... }\n@include media-breakpoint-down(xl) { ... }\n@include media-breakpoint-down(xxl) { ... }\n\n// Example: Style from medium breakpoint and down\n@include media-breakpoint-down(md) {\n.custom-class {\n    display: block;\n  }\n}\n```\n\nThese mixins take those declared breakpoints, subtract `.02px` from them, and use them as our `max-width` values. For example:\n\n```scss\n// X-Small devices (portrait phones, less than 576px)\n@media (max-width: 575.98px) { ... }\n\n// Small devices (landscape phones, less than 768px)\n@media (max-width: 767.98px) { ... }\n\n// Medium devices (tablets, less than 992px)\n@media (max-width: 991.98px) { ... }\n\n// Large devices (desktops, less than 1200px)\n@media (max-width: 1199.98px) { ... }\n\n// X-Large devices (large desktops, less than 1400px)\n@media (max-width: 1399.98px) { ... }\n\n// XX-Large devices (larger desktops)\n// No media query since the xxl breakpoint has no upper bound on its width\n```\n\n"),e.fQ9(),e.qZA(),e.TgZ(66,"div",3)(67,"strong"),e._uU(68,"Why subtract .02px?"),e.qZA(),e._uU(69," Browsers don\u2019t currently support "),e.TgZ(70,"a",4),e._uU(71,"range context queries"),e.qZA(),e._uU(72,", so we work around the limitations of "),e.TgZ(73,"a",5)(74,"code"),e._uU(75,"min-"),e.qZA(),e._uU(76," and "),e.TgZ(77,"code"),e._uU(78,"max-"),e.qZA(),e._uU(79," prefixes"),e.qZA(),e._uU(80," and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision.\n"),e.qZA(),e.TgZ(81,"markdown"),e.IAx(),e._uU(82,"\n### Single breakpoint\n\nThere are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.\n\n```scss\n@include media-breakpoint-only(xs) { ... }\n@include media-breakpoint-only(sm) { ... }\n@include media-breakpoint-only(md) { ... }\n@include media-breakpoint-only(lg) { ... }\n@include media-breakpoint-only(xl) { ... }\n@include media-breakpoint-only(xxl) { ... }\n```\n\nFor example the `@include media-breakpoint-only(md) { ... }` will result in :\n\n```scss\n@media (min-width: 768px) and (max-width: 991.98px) { ... }\n```\n\n### Between breakpoints\n\nSimilarly, media queries may span multiple breakpoint widths:\n\n```scss\n@include media-breakpoint-between(md, xl) { ... }\n```\n\nWhich results in:\n\n```scss\n// Example\n// Apply styles starting from medium devices and up to extra large devices\n@media (min-width: 768px) and (max-width: 1199.98px) { ... }\n```\n"),e.fQ9(),e.qZA())},directives:[o.lF],styles:["[_nghost-%COMP%]{display:block}"],changeDetection:0}),n})()}];let p=(()=>{class n{}return n.\u0275fac=function(s){return new(s||n)},n.\u0275mod=e.oAB({type:n}),n.\u0275inj=e.cJS({imports:[[r.Bz.forChild(u)],r.Bz]}),n})(),m=(()=>{class n{}return n.\u0275fac=function(s){return new(s||n)},n.\u0275mod=e.oAB({type:n}),n.\u0275inj=e.cJS({imports:[[p,o.JP.forChild(),d.U,l.m]]}),n})()}}]);