{
    "componentChunkName": "component---src-docs-templates-docs-tsx",
    "path": "/components/accordion/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"899905c9-b454-5107-8272-ff1dc7bf29f5","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar AccordionExample = function AccordionExample() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeKey = _useState2[0],\n      setActiveKey = _useState2[1];\n\n  return mdx(CAccordion, {\n    mdxType: \"CAccordion\"\n  }, mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 1,\n    onClick: function onClick() {\n      return activeKey === 1 ? setActiveKey(0) : setActiveKey(1);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #1\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 1,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))), mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 2,\n    onClick: function onClick() {\n      return activeKey === 2 ? setActiveKey(0) : setActiveKey(2);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #2\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 2,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))), mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 3,\n    onClick: function onClick() {\n      return activeKey === 3 ? setActiveKey(0) : setActiveKey(3);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #3\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 3,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))));\n};\n\nvar AccordionFlushExample = function AccordionFlushExample() {\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeKey = _useState4[0],\n      setActiveKey = _useState4[1];\n\n  return mdx(CAccordion, {\n    flush: true,\n    mdxType: \"CAccordion\"\n  }, mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 1,\n    onClick: function onClick() {\n      return activeKey === 1 ? setActiveKey(0) : setActiveKey(1);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #1\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 1,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))), mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 2,\n    onClick: function onClick() {\n      return activeKey === 2 ? setActiveKey(0) : setActiveKey(2);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #2\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 2,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))), mdx(CAccordionItem, {\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, mdx(CAccordionButton, {\n    collapsed: activeKey !== 3,\n    onClick: function onClick() {\n      return activeKey === 3 ? setActiveKey(0) : setActiveKey(3);\n    },\n    mdxType: \"CAccordionButton\"\n  }, \"Accordion Item #3\")), mdx(CAccordionCollapse, {\n    visible: activeKey === 3,\n    mdxType: \"CAccordionCollapse\"\n  }, mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the \", mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\"))));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Accordion Component\",\n  \"name\": \"Accordion\",\n  \"description\": \"Build vertically collapsing accordions in combination with our React Collapse component.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/accordion\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  AccordionExample: AccordionExample,\n  AccordionFlushExample: AccordionFlushExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Examples\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Click the accordions below to expand/collapse the accordion content.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(AccordionExample, {\n    mdxType: \"AccordionExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [activeKey, setActiveKey] = useState(0)\\nreturn (\\n  <CAccordion>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 1} onClick={() => activeKey === 1 ? setActiveKey(0) : setActiveKey(1)}>\\n          Accordion Item #1\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 1}>\\n        <CAccordionBody>\\n          <strong>This is the first item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 2} onClick={() => activeKey === 2 ? setActiveKey(0) : setActiveKey(2)}>\\n          Accordion Item #2\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 2}>\\n        <CAccordionBody>\\n          <strong>This is the second item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 3} onClick={() => activeKey === 3 ? setActiveKey(0) : setActiveKey(3)}>\\n          Accordion Item #3\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 3}>\\n        <CAccordionBody>\\n          <strong>This is the third item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n  </CAccordion>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"flush\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Flush\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#flush\",\n    \"aria-label\": \"flush permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flush\"), \" to remove the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \", some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(AccordionFlushExample, {\n    mdxType: \"AccordionFlushExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [activeKey, setActiveKey] = useState(0)\\nreturn (\\n  <CAccordion flush>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 1} onClick={() => activeKey === 1 ? setActiveKey(0) : setActiveKey(1)}>\\n          Accordion Item #1\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 1}>\\n        <CAccordionBody>\\n          <strong>This is the first item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 2} onClick={() => activeKey === 2 ? setActiveKey(0) : setActiveKey(2)}>\\n          Accordion Item #2\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 2}>\\n        <CAccordionBody>\\n          <strong>This is the second item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n    <CAccordionItem>\\n      <CAccordionHeader>\\n        <CAccordionButton collapsed={activeKey !== 3} onClick={() => activeKey === 3 ? setActiveKey(0) : setActiveKey(3)}>\\n          Accordion Item #3\\n        </CAccordionButton>\\n      </CAccordionHeader>\\n      <CAccordionCollapse visible={activeKey === 3}>\\n        <CAccordionBody>\\n          <strong>This is the third item's accordion body.</strong> It is hidden by default,\\n          until the collapse plugin adds the appropriate classes that we use to style each\\n          element. These classes control the overall appearance, as well as the showing and\\n          hiding via CSS transitions. You can modify any of this with custom CSS or overriding\\n          our default variables. It's also worth noting that just about any HTML can go within\\n          the <code>.accordion-body</code>, though the transition does limit overflow.\\n        </CAccordionBody>\\n      </CAccordionCollapse>\\n    </CAccordionItem>\\n  </CAccordion>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"caccordion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordion\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordion\",\n    \"aria-label\": \"caccordion permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"flush\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionbody\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionBody\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionbody\",\n    \"aria-label\": \"caccordionbody permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionbutton\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionButton\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionbutton\",\n    \"aria-label\": \"caccordionbutton permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"collapsed\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set button state to collapsed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordioncollapse\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionCollapse\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordioncollapse\",\n    \"aria-label\": \"caccordioncollapse permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the visibility of component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionheader\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionHeader\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionheader\",\n    \"aria-label\": \"caccordionheader permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionitem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionItem\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionitem\",\n    \"aria-label\": \"caccordionitem permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Accordion Component","description":"Build vertically collapsing accordions in combination with our React Collapse component.","route":"/components/accordion"},"tableOfContents":{"items":[{"url":"#examples","title":"Examples","items":[{"url":"#flush","title":"Flush"}]},{"url":"#api","title":"API","items":[{"url":"#caccordion","title":"CAccordion"},{"url":"#caccordionbody","title":"CAccordionBody"},{"url":"#caccordionbutton","title":"CAccordionButton"},{"url":"#caccordioncollapse","title":"CAccordionCollapse"},{"url":"#caccordionheader","title":"CAccordionHeader"},{"url":"#caccordionitem","title":"CAccordionItem"}]}]}}},"pageContext":{"id":"899905c9-b454-5107-8272-ff1dc7bf29f5"}},
    "staticQueryHashes": ["4202924991"]}