{
    "componentChunkName": "component---src-docs-templates-docs-tsx",
    "path": "/components/loading-button/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"b26312df-0ed7-52c6-a3eb-12e9b72bb52d","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar BasicExample = function BasicExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      stateO = _useState4[0],\n      setStateO = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      stateG = _useState6[0],\n      setStateG = _useState6[1];\n\n  return mdx(React.Fragment, null, mdx(CLoadingButton, {\n    loading: state,\n    onClick: function onClick() {\n      return setState(!state);\n    },\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    variant: \"outline\",\n    loading: stateO,\n    onClick: function onClick() {\n      return setStateO(!stateO);\n    },\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    variant: \"ghost\",\n    loading: stateG,\n    onClick: function onClick() {\n      return setStateG(!stateG);\n    },\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Loading Button Component\",\n  \"name\": \"Loading Button\",\n  \"description\": \"Buttons with built-in loading indicators. Indicate the loading state of the button bridging the gap between action and feedback.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/loading-button\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  BasicExample: BasicExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Example\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(BasicExample, {\n    mdxType: \"BasicExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [state, setState] = useState(false)\\nconst [stateO, setStateO] = useState(false)\\nconst [stateG, setStateG] = useState(false)\\nreturn (\\n  <>\\n    <CLoadingButton loading={state} onClick={() => setState(!state)}>\\n      Submit\\n    </CLoadingButton>\\n    <CLoadingButton variant=\\\"outline\\\" loading={stateO} onClick={() => setStateO(!stateO)}>\\n      Submit\\n    </CLoadingButton>\\n    <CLoadingButton variant=\\\"ghost\\\" loading={stateG} onClick={() => setStateG(!stateG)}>\\n      Submit\\n    </CLoadingButton>\\n  </>\\n)\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CLoadingButton, {\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    variant: \"outline\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    variant: \"ghost\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CLoadingButton timeout={2000}>Submit</CLoadingButton>\\n<CLoadingButton variant=\\\"outline\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n<CLoadingButton variant=\\\"ghost\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n\")), mdx(\"h2\", {\n    \"id\": \"spinners\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Spinners\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#spinners\",\n    \"aria-label\": \"spinners permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"border-default\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Border (Default)\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#border-default\",\n    \"aria-label\": \"border default permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CLoadingButton, {\n    color: \"info\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    color: \"success\",\n    variant: \"outline\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    color: \"warning\",\n    variant: \"ghost\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CLoadingButton color=\\\"info\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n<CLoadingButton color=\\\"success\\\" variant=\\\"outline\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n<CLoadingButton color=\\\"warning\\\" variant=\\\"ghost\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n\")), mdx(\"h3\", {\n    \"id\": \"grow\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Grow\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#grow\",\n    \"aria-label\": \"grow permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CLoadingButton, {\n    color: \"info\",\n    spinnerType: \"grow\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    color: \"success\",\n    spinnerType: \"grow\",\n    variant: \"outline\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\"), mdx(CLoadingButton, {\n    color: \"warning\",\n    spinnerType: \"grow\",\n    variant: \"ghost\",\n    timeout: 2000,\n    mdxType: \"CLoadingButton\"\n  }, \"Submit\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CLoadingButton color=\\\"info\\\" spinnerType=\\\"grow\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n<CLoadingButton color=\\\"success\\\" spinnerType=\\\"grow\\\" variant=\\\"outline\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n<CLoadingButton color=\\\"warning\\\" spinnerType=\\\"grow\\\" variant=\\\"ghost\\\" timeout={2000}>\\n  Submit\\n</CLoadingButton>\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cloadingbutton\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CLoadingButton\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cloadingbutton\",\n    \"aria-label\": \"cloadingbutton permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"disabledOnLoading\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Makes button disabled when loading.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"loading\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Loading state (set to true to start animation).\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"spinnerType\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets type of spinner.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"{'border' | 'grow'}\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"border\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"timeout\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Automatically starts loading animation and stops after a determined amount of milliseconds.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Loading Button Component","description":"Buttons with built-in loading indicators. Indicate the loading state of the button bridging the gap between action and feedback.","route":"/components/loading-button"},"tableOfContents":{"items":[{"url":"#example","title":"Example"},{"url":"#spinners","title":"Spinners","items":[{"url":"#border-default","title":"Border (Default)"},{"url":"#grow","title":"Grow"}]},{"url":"#api","title":"API","items":[{"url":"#cloadingbutton","title":"CLoadingButton"}]}]}}},"pageContext":{"id":"b26312df-0ed7-52c6-a3eb-12e9b72bb52d"}},
    "staticQueryHashes": ["4202924991"]}