(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{"/esL":function(e,o,t){"use strict";t.r(o),t.d(o,"_frontmatter",(function(){return r})),t.d(o,"default",(function(){return d}));var l=t("Fcif"),n=t("+I+c"),a=(t("mXGw"),t("/FXl")),C=t("BIGe"),b=t("ZFoC"),c=t("bzer"),s=(t("aD51"),["components"]),r={};void 0!==r&&r&&r===Object(r)&&Object.isExtensible(r)&&!r.hasOwnProperty("__filemeta")&&Object.defineProperty(r,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/4.0/layout/grid.mdx"}});var i={_frontmatter:r},m=C.a;function d(e){var o,t,d,p,u,O,j,x,y,w,h,f,g,T=e.components,N=Object(n.a)(e,s);return Object(a.b)(m,Object(l.a)({},i,N,{components:T,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"example"},"Example"),Object(a.b)("p",null,"CoreUI's grid system uses a series of containers, rows, and columns to layout and align content. It's built with ",Object(a.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox"},"flexbox")," and is fully responsive. Below is an example and an in-depth explanation for how the grid system comes together."),Object(a.b)(b.c,{__position:0,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol sm="auto">One of three columns</CCol>\n      <CCol sm="auto">One of three columns</CCol>\n      <CCol sm="auto">One of three columns</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(o={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},o.DefaultLayout=C.a,o._frontmatter=r,o),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{sm:"auto",mdxType:"CCol"},"One of three columns"),Object(a.b)(c.J,{sm:"auto",mdxType:"CCol"},"One of three columns"),Object(a.b)(c.J,{sm:"auto",mdxType:"CCol"},"One of three columns"))))),Object(a.b)("p",null,"The above example creates three equal-width columns across all devices and viewports using our predefined grid classes. Those columns are centered in the page with the parent ",Object(a.b)("inlineCode",{parentName:"p"},"<CContainer>"),"."),Object(a.b)("h2",{id:"how-it-works"},"How it works"),Object(a.b)("p",null,"Breaking it down, here's how the grid system comes together:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Our grid supports ",Object(a.b)("a",{parentName:"strong",href:"./breakpoints"},"six responsive breakpoints"),"."),"  Breakpoints are based on ",Object(a.b)("inlineCode",{parentName:"p"},"min-width")," media queries, meaning they affect that breakpoint and all those above it (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"sm={4}")," applies to ",Object(a.b)("inlineCode",{parentName:"p"},"sm"),", ",Object(a.b)("inlineCode",{parentName:"p"},"md"),", ",Object(a.b)("inlineCode",{parentName:"p"},"lg"),", ",Object(a.b)("inlineCode",{parentName:"p"},"xl"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"xxl"),"). This means you can control container and column sizing and behavior by each breakpoint.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Containers center and horizontally pad your content.")," Use ",Object(a.b)("inlineCode",{parentName:"p"},"<CContainer>")," for a responsive pixel width, ",Object(a.b)("inlineCode",{parentName:"p"},"<CContainer fluid>")," for ",Object(a.b)("inlineCode",{parentName:"p"},"width: 100%")," across all viewports and devices, or a responsive container (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"<CContainer md>"),") for a combination of fluid and pixel widths.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Rows are wrappers for columns.")," Each column has horizontal ",Object(a.b)("inlineCode",{parentName:"p"},"padding")," (called a gutter) for controlling the space between them. This ",Object(a.b)("inlineCode",{parentName:"p"},"padding")," is then counteracted on the rows with negative margins to ensure the content in your columns is visually aligned down the left side. Rows also support modifier classes to ",Object(a.b)("a",{parentName:"p",href:"#row-columns"},"uniformly apply column sizing")," and ",Object(a.b)("a",{parentName:"p",href:"../gutters"},"gutter classes")," to change the spacing of your content.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Columns are incredibly flexible.")," There are 12 template columns available per row, allowing you to create different combinations of elements that span any number of columns. Column classes indicate the number of template columns to span (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"CCol xs={4}")," spans four). ",Object(a.b)("inlineCode",{parentName:"p"},"width"),"s are set in percentages so you always have the same relative sizing.")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("p",{parentName:"li"},Object(a.b)("strong",{parentName:"p"},"Gutters are also responsive and customizable.")," ",Object(a.b)("a",{parentName:"p",href:"../gutters"},"Gutter classes are available")," across all breakpoints, with all the same sizes as our ",Object(a.b)("a",{parentName:"p",href:"https://coreui.io/docs/utilities/spacing/"},"margin and padding spacing"),". Change horizontal gutters with ",Object(a.b)("inlineCode",{parentName:"p"},"xs|sm|md|lg|xl|xxl={{ gutterX: * }}")," classes, vertical gutters with ",Object(a.b)("inlineCode",{parentName:"p"},"xs|sm|md|lg|xl|xxl={{ gutterY: * }}"),", or all gutters with ",Object(a.b)("inlineCode",{parentName:"p"},"xs|sm|md|lg|xl|xxl={{ gutter: * }}")," classes. ",Object(a.b)("inlineCode",{parentName:"p"},"xs|sm|md|lg|xl|xxl={{ gutter: 0 }}")," is also available to remove gutters."))),Object(a.b)("p",null,"Be aware of the limitations and ",Object(a.b)("a",{parentName:"p",href:"https://github.com/philipwalton/flexbugs"},"bugs around flexbox"),", like the ",Object(a.b)("a",{parentName:"p",href:"https://github.com/philipwalton/flexbugs#flexbug-9"},"inability to use some HTML elements as flex containers"),"."),Object(a.b)("h2",{id:"grid-options"},"Grid options"),Object(a.b)("p",null,"CoreUI's grid system can adapt across all six default breakpoints, and any breakpoints you customize. The six default grid tiers are as follow:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Extra small (xs)"),Object(a.b)("li",{parentName:"ul"},"Small (sm)"),Object(a.b)("li",{parentName:"ul"},"Medium (md)"),Object(a.b)("li",{parentName:"ul"},"Large (lg)"),Object(a.b)("li",{parentName:"ul"},"Extra large (xl)"),Object(a.b)("li",{parentName:"ul"},"Extra extra large (xxl)")),Object(a.b)("p",null,"As noted above, each of these breakpoints have their own container, unique class prefix, and modifiers. Here's how the grid changes across these breakpoints:"),Object(a.b)("table",{className:"table mb-4"},Object(a.b)("thead",null,Object(a.b)("tr",null,Object(a.b)("th",{scope:"col"}),Object(a.b)("th",{scope:"col"},"xs",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"<576px")),Object(a.b)("th",{scope:"col"},"sm",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"≥576px")),Object(a.b)("th",{scope:"col"},"md",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"≥768px")),Object(a.b)("th",{scope:"col"},"lg",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"≥992px")),Object(a.b)("th",{scope:"col"},"xl",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"≥1200px")),Object(a.b)("th",{scope:"col"},"xxl",Object(a.b)("br",null),Object(a.b)("span",{className:"fw-normal"},"≥1400px")))),Object(a.b)("tbody",null,Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Container ",Object(a.b)("code",{className:"fw-normal"},"max-width")),Object(a.b)("td",null,"None (auto)"),Object(a.b)("td",null,"540px"),Object(a.b)("td",null,"720px"),Object(a.b)("td",null,"960px"),Object(a.b)("td",null,"1140px"),Object(a.b)("td",null,"1320px")),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Class prefix"),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol xs=>")),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol sm=>")),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol md=>")),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol lg=>")),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol xl=>")),Object(a.b)("td",null,Object(a.b)("code",null,"<CCol xxl=>"))),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"# of columns"),Object(a.b)("td",{colSpan:"6"},"12")),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Gutter width"),Object(a.b)("td",{colSpan:"6"},"1.5rem (.75rem on left and right)")),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Custom gutters"),Object(a.b)("td",{colSpan:"6"},Object(a.b)("a",{href:"./layout/gutters"},"Yes"))),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Nestable"),Object(a.b)("td",{colSpan:"6"},Object(a.b)("a",{href:"#nesting"},"Yes"))),Object(a.b)("tr",null,Object(a.b)("th",{className:"text-nowrap",scope:"row"},"Column ordering"),Object(a.b)("td",{colSpan:"6"},Object(a.b)("a",{href:"./layout/columns"},"Yes"))))),Object(a.b)("h2",{id:"auto-layout-columns"},"Auto-layout columns"),Object(a.b)("p",null,"Utilize breakpoint-specific column classes for easy column sizing without an explicit numbered class like ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol sm={6}>"),"."),Object(a.b)("h3",{id:"equal-width"},"Equal-width"),Object(a.b)("p",null,"For example, here are two grid layouts that apply to every device and viewport, from ",Object(a.b)("inlineCode",{parentName:"p"},"xs")," to ",Object(a.b)("inlineCode",{parentName:"p"},"xxl"),". Add any number of unit-less classes for each breakpoint you need and every column will be the same width."),Object(a.b)(b.c,{__position:2,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol>1 of 2</CCol>\n      <CCol>2 of 2</CCol>\n    </CRow>\n    <CRow>\n      <CCol>1 of 3</CCol>\n      <CCol>2 of 3</CCol>\n      <CCol>3 of 3</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(t={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},t.DefaultLayout=C.a,t._frontmatter=r,t),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"1 of 2"),Object(a.b)(c.J,{mdxType:"CCol"},"2 of 2")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"1 of 3"),Object(a.b)(c.J,{mdxType:"CCol"},"2 of 3"),Object(a.b)(c.J,{mdxType:"CCol"},"3 of 3"))))),Object(a.b)("h3",{id:"setting-one-column-width"},"Setting one column width"),Object(a.b)("p",null,"Auto-layout for flexbox grid columns also means you can set the width of one column and have the sibling columns automatically resize around it. You may use predefined grid classes (as shown below), grid mixins, or inline widths. Note that the other columns will resize no matter the width of the center column."),Object(a.b)(b.c,{__position:3,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol>1 of 3</CCol>\n      <CCol xs={6}>2 of 3 (wider)</CCol>\n      <CCol>3 of 3</CCol>\n    </CRow>\n    <CRow>\n      <CCol>1 of 3</CCol>\n      <CCol xs={6}>2 of 3 (wider)</CCol>\n      <CCol>3 of 3</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(d={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},d.DefaultLayout=C.a,d._frontmatter=r,d),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"1 of 3"),Object(a.b)(c.J,{xs:6,mdxType:"CCol"},"2 of 3 (wider)"),Object(a.b)(c.J,{mdxType:"CCol"},"3 of 3")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"1 of 3"),Object(a.b)(c.J,{xs:6,mdxType:"CCol"},"2 of 3 (wider)"),Object(a.b)(c.J,{mdxType:"CCol"},"3 of 3"))))),Object(a.b)("h3",{id:"variable-width-content"},"Variable width content"),Object(a.b)("p",null,"Use ",Object(a.b)("inlineCode",{parentName:"p"},'<CCol {breakpoint}="auto"')," props to size columns based on the natural width of their content."),Object(a.b)(b.c,{__position:4,__code:'<div className="docs-example-row">\n  <CContainer>\n    <div className="row justify-content-md-center">\n      <CCol xs lg={2}>\n        1 of 3\n      </CCol>\n      <CCol md="auto">Variable width content</CCol>\n      <CCol xs lg={2}>\n        3 of 3\n      </CCol>\n    </div>\n    <CRow>\n      <CCol>1 of 3</CCol>\n      <CCol md="auto">Variable width content</CCol>\n      <CCol xs lg={2}>\n        3 of 3\n      </CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(p={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},p.DefaultLayout=C.a,p._frontmatter=r,p),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)("div",{className:"row justify-content-md-center"},Object(a.b)(c.J,{xs:!0,lg:2,mdxType:"CCol"},"1 of 3"),Object(a.b)(c.J,{md:"auto",mdxType:"CCol"},"Variable width content"),Object(a.b)(c.J,{xs:!0,lg:2,mdxType:"CCol"},"3 of 3")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"1 of 3"),Object(a.b)(c.J,{md:"auto",mdxType:"CCol"},"Variable width content"),Object(a.b)(c.J,{xs:!0,lg:2,mdxType:"CCol"},"3 of 3"))))),Object(a.b)("h2",{id:"responsive-classes"},"Responsive classes"),Object(a.b)("p",null,"CoreUI's grid includes six tiers of predefined classes for building complex responsive layouts. Customize the size of your columns on extra small, small, medium, large, or extra large devices however you see fit."),Object(a.b)("h3",{id:"all-breakpoints"},"All breakpoints"),Object(a.b)("p",null,"For grids that are the same from the smallest of devices to the largest, use the ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol>")," and ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol xs={*}>")," classes. Specify a numbered class when you need a particularly sized column; otherwise, feel free to stick to ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol>"),"."),Object(a.b)(b.c,{__position:5,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol>col</CCol>\n      <CCol>col</CCol>\n      <CCol>col</CCol>\n      <CCol>col</CCol>\n    </CRow>\n    <CRow>\n      <CCol xs={8}>col-8</CCol>\n      <CCol xs={4}>col-4</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(u={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},u.DefaultLayout=C.a,u._frontmatter=r,u),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"col"),Object(a.b)(c.J,{mdxType:"CCol"},"col"),Object(a.b)(c.J,{mdxType:"CCol"},"col"),Object(a.b)(c.J,{mdxType:"CCol"},"col")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{xs:8,mdxType:"CCol"},"col-8"),Object(a.b)(c.J,{xs:4,mdxType:"CCol"},"col-4"))))),Object(a.b)("h3",{id:"stacked-to-horizontal"},"Stacked to horizontal"),Object(a.b)("p",null,"Using a single set of ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol sm={*}>")," classes, you can create a basic grid system that starts out stacked and becomes horizontal at the small breakpoint (",Object(a.b)("inlineCode",{parentName:"p"},"sm"),")."),Object(a.b)(b.c,{__position:6,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol sm={8}>col-sm-8</CCol>\n      <CCol sm={4}>col-sm-4</CCol>\n    </CRow>\n    <CRow>\n      <CCol sm>col-sm</CCol>\n      <CCol sm>col-sm</CCol>\n      <CCol sm>col-sm</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(O={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},O.DefaultLayout=C.a,O._frontmatter=r,O),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{sm:8,mdxType:"CCol"},"col-sm-8"),Object(a.b)(c.J,{sm:4,mdxType:"CCol"},"col-sm-4")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{sm:!0,mdxType:"CCol"},"col-sm"),Object(a.b)(c.J,{sm:!0,mdxType:"CCol"},"col-sm"),Object(a.b)(c.J,{sm:!0,mdxType:"CCol"},"col-sm"))))),Object(a.b)("h3",{id:"mix-and-match"},"Mix and match"),Object(a.b)("p",null,"Don't want your columns to simply stack in some grid tiers? Use a combination of different classes for each tier as needed. See the example below for a better idea of how it all works."),Object(a.b)(b.c,{__position:7,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow>\n      <CCol md={8}>.col-md-8</CCol>\n      <CCol xs={6} md={4}>\n        .col-6 .col-md-4\n      </CCol>\n    </CRow>\n    <CRow>\n      <CCol xs={6} md={4}>\n        .col-6 .col-md-4\n      </CCol>\n      <CCol xs={6} md={4}>\n        .col-6 .col-md-4\n      </CCol>\n      <CCol xs={6} md={4}>\n        .col-6 .col-md-4\n      </CCol>\n    </CRow>\n    <CRow>\n      <CCol xs={6}>.col-6</CCol>\n      <CCol xs={6}>.col-6</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(j={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},j.DefaultLayout=C.a,j._frontmatter=r,j),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{md:8,mdxType:"CCol"},".col-md-8"),Object(a.b)(c.J,{xs:6,md:4,mdxType:"CCol"},".col-6 .col-md-4")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{xs:6,md:4,mdxType:"CCol"},".col-6 .col-md-4"),Object(a.b)(c.J,{xs:6,md:4,mdxType:"CCol"},".col-6 .col-md-4"),Object(a.b)(c.J,{xs:6,md:4,mdxType:"CCol"},".col-6 .col-md-4")),Object(a.b)(c.Ub,{mdxType:"CRow"},Object(a.b)(c.J,{xs:6,mdxType:"CCol"},".col-6"),Object(a.b)(c.J,{xs:6,mdxType:"CCol"},".col-6"))))),Object(a.b)("h3",{id:"row-columns"},"Row columns"),Object(a.b)("p",null,"Use the responsive ",Object(a.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ cols: * }}")," classes to quickly set the number of columns that best render your content and layout. Whereas normal ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol xs={*}>")," classes apply to the individual columns (e.g., ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol xs={4}>"),"), the row columns classes are set on the parent ",Object(a.b)("inlineCode",{parentName:"p"},"<CRow>")," as a shortcut. With ",Object(a.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ cols: 'auto' }}")," you can give the columns their natural width."),Object(a.b)("p",null,"Use these row columns classes to quickly create basic grid layouts or to control your card layouts."),Object(a.b)(b.c,{__position:8,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow xs={{ cols: 2 }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(x={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},x.DefaultLayout=C.a,x._frontmatter=r,x),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:2},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)(b.c,{__position:9,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow xs={{ cols: 3 }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(y={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},y.DefaultLayout=C.a,y._frontmatter=r,y),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:3},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)(b.c,{__position:10,__code:"<div className=\"docs-example-row\">\n  <CContainer>\n    <CRow xs={{ cols: 'auto' }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>",__scope:(w={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},w.DefaultLayout=C.a,w._frontmatter=r,w),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:"auto"},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)(b.c,{__position:11,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow xs={{ cols: 4 }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(h={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},h.DefaultLayout=C.a,h._frontmatter=r,h),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:4},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)(b.c,{__position:12,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow xs={{ cols: 4 }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol xs={6}>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(f={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},f.DefaultLayout=C.a,f._frontmatter=r,f),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:4},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{xs:6,mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)(b.c,{__position:13,__code:'<div className="docs-example-row">\n  <CContainer>\n    <CRow xs={{ cols: 1 }} sm={{ cols: 2 }} md={{ cols: 4 }}>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n      <CCol>Column</CCol>\n    </CRow>\n  </CContainer>\n</div>',__scope:(g={props:N,DefaultLayout:C.a,Playground:b.c,Props:b.d,CCol:c.J,CContainer:c.L,CRow:c.Ub},g.DefaultLayout=C.a,g._frontmatter=r,g),mdxType:"Playground"},Object(a.b)("div",{className:"docs-example-row"},Object(a.b)(c.L,{mdxType:"CContainer"},Object(a.b)(c.Ub,{xs:{cols:1},sm:{cols:2},md:{cols:4},mdxType:"CRow"},Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"),Object(a.b)(c.J,{mdxType:"CCol"},"Column"))))),Object(a.b)("h2",{id:"api"},"API"),Object(a.b)("h3",{id:"ccontainer"},"CContainer"),Object(a.b)(b.d,{of:c.L,mdxType:"Props"}),Object(a.b)("h3",{id:"crow"},"CRow"),Object(a.b)(b.d,{of:c.Ub,mdxType:"Props"}),Object(a.b)("h3",{id:"ccol"},"CCol"),Object(a.b)(b.d,{of:c.J,mdxType:"Props"}))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/4.0/layout/grid.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-4-0-layout-grid-mdx-50abb9ee62b4571f0121.js.map