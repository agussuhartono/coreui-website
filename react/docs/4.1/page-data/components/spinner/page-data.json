{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/components/spinner/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"c1eaa056-8bd9-50a5-bec1-300dc15d8323","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Spinner Component\",\n  \"name\": \"Spinner\",\n  \"description\": \"Indicate the loading state of a component or page with CoreUI spinners, built entirely with HTML, CSS, and no JavaScript.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/spinner\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"about\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"About\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#about\",\n    \"aria-label\": \"about permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"CoreUI \\\"spinners\\\" can be used to show the loading state in your projects. They're built only with HTML and CSS, meaning you don't need any JavaScript to create them. You will, however, need some custom JavaScript to toggle their visibility. Their appearance, alignment, and sizing can be easily customized with our amazing utility classes.\"), mdx(\"p\", null, \"For accessibility purposes, each loader here includes \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role=\\\"status\\\"\"), \" and a nested \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span className=\\\"visually-hidden\\\">Loading...</span>\"), \".\"), mdx(\"h2\", {\n    \"id\": \"border-spinner\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Border spinner\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#border-spinner\",\n    \"aria-label\": \"border spinner permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use the border spinners for a lightweight loading indicator.\"), mdx(\"h2\", {\n    \"id\": \"basic-usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Basic usage\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-usage\",\n    \"aria-label\": \"basic usage permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CSpinner, {\n    mdxType: \"CSpinner\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CSpinner/>\\n\")), mdx(\"h3\", {\n    \"id\": \"colors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Colors\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#colors\",\n    \"aria-label\": \"colors permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"The border spinner uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"currentColor\"), \" for its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"border-color\"), \". You can use any of our text color utilities on the standard spinner.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CSpinner, {\n    color: \"primary\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"secondary\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"success\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"danger\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"warning\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"info\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"light\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"dark\",\n    mdxType: \"CSpinner\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CSpinner color=\\\"primary\\\"/>\\n  <CSpinner color=\\\"secondary\\\"/>\\n  <CSpinner color=\\\"success\\\"/>\\n  <CSpinner color=\\\"danger\\\"/>\\n  <CSpinner color=\\\"warning\\\"/>\\n  <CSpinner color=\\\"info\\\"/>\\n  <CSpinner color=\\\"light\\\"/>\\n  <CSpinner color=\\\"dark\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"growing-spinner\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Growing spinner\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#growing-spinner\",\n    \"aria-label\": \"growing spinner permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"If you don't fancy a border spinner, switch to the grow spinner. While it doesn't technically spin, it does repeatedly grow!\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CSpinner, {\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CSpinner variant=\\\"grow\\\"/>\\n\")), mdx(\"p\", null, \"Once again, this spinner is built with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"currentColor\"), \", so you can easily change its appearance. Here it is in blue, along with the supported variants.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CSpinner, {\n    color: \"primary\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"secondary\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"success\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"danger\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"warning\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"info\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"light\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    color: \"dark\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CSpinner color=\\\"primary\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"secondary\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"success\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"danger\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"warning\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"info\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"light\\\" variant=\\\"grow\\\"/>\\n  <CSpinner color=\\\"dark\\\" variant=\\\"grow\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"size\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Size\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#size\",\n    \"aria-label\": \"size permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size=\\\"sm\\\"\"), \"property` to make a smaller spinner that can quickly be used within other components.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CSpinner, {\n    size: \"sm\",\n    mdxType: \"CSpinner\"\n  }), mdx(CSpinner, {\n    size: \"sm\",\n    variant: \"grow\",\n    mdxType: \"CSpinner\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CSpinner size=\\\"sm\\\"/>\\n  <CSpinner size=\\\"sm\\\" variant=\\\"grow\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"buttons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Buttons\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#buttons\",\n    \"aria-label\": \"buttons permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use spinners within buttons to indicate an action is currently processing or taking place. You may also swap the text out of the spinner element and utilize button text as needed.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CButton, {\n    disabled: true,\n    mdxType: \"CButton\"\n  }, mdx(CSpinner, {\n    component: \"span\",\n    size: \"sm\",\n    \"aria-hidden\": \"true\",\n    mdxType: \"CSpinner\"\n  })), mdx(CButton, {\n    disabled: true,\n    mdxType: \"CButton\"\n  }, mdx(CSpinner, {\n    component: \"span\",\n    size: \"sm\",\n    \"aria-hidden\": \"true\",\n    mdxType: \"CSpinner\"\n  }), \"Loading...\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CButton disabled>\\n    <CSpinner component=\\\"span\\\" size=\\\"sm\\\" aria-hidden=\\\"true\\\"/>\\n  </CButton>\\n  <CButton disabled>\\n    <CSpinner component=\\\"span\\\" size=\\\"sm\\\" aria-hidden=\\\"true\\\"/>\\n    Loading...\\n  </CButton>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CButton, {\n    disabled: true,\n    mdxType: \"CButton\"\n  }, mdx(CSpinner, {\n    component: \"span\",\n    size: \"sm\",\n    variant: \"grow\",\n    \"aria-hidden\": \"true\",\n    mdxType: \"CSpinner\"\n  })), mdx(CButton, {\n    disabled: true,\n    mdxType: \"CButton\"\n  }, mdx(CSpinner, {\n    component: \"span\",\n    size: \"sm\",\n    variant: \"grow\",\n    \"aria-hidden\": \"true\",\n    mdxType: \"CSpinner\"\n  }), \"Loading...\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <CButton disabled>\\n    <CSpinner component=\\\"span\\\" size=\\\"sm\\\" variant=\\\"grow\\\" aria-hidden=\\\"true\\\"/>\\n  </CButton>\\n  <CButton disabled>\\n    <CSpinner component=\\\"span\\\" size=\\\"sm\\\" variant=\\\"grow\\\" aria-hidden=\\\"true\\\"/>\\n    Loading...\\n  </CButton>\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cspinner\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CSpinner\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cspinner\",\n    \"aria-label\": \"cspinner permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CSpinner } from '@coreui/react'\\n// or\\nimport CSpinner from '@coreui/react/src/components/spinner/CSpinner'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"color\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets the color context of the component to one of CoreUI\\u2019s themed colors.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'primary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'secondary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'success'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'danger'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'warning'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'info'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'dark'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'light'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Size the component small.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sm'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set the button variant to an outlined button or a ghost button.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'border'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'grow'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"border\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visuallyHiddenLabel\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set visually hidden label for accessibility purposes.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Loading...\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Spinner Component","description":"Indicate the loading state of a component or page with CoreUI spinners, built entirely with HTML, CSS, and no JavaScript.","route":"/components/spinner"},"tableOfContents":{"items":[{"url":"#about","title":"About"},{"url":"#border-spinner","title":"Border spinner"},{"url":"#basic-usage","title":"Basic usage","items":[{"url":"#colors","title":"Colors"}]},{"url":"#growing-spinner","title":"Growing spinner"},{"url":"#size","title":"Size"},{"url":"#buttons","title":"Buttons"},{"url":"#api","title":"API","items":[{"url":"#cspinner","title":"CSpinner"}]}]}}},"pageContext":{"id":"c1eaa056-8bd9-50a5-bec1-300dc15d8323"}},
    "staticQueryHashes": ["4202924991"]}