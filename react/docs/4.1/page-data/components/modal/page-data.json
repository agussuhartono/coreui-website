{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/components/modal/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"2d6f3b7a-94cb-56dc-a09e-fabc9204b893","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar LiveDemoExample = function LiveDemoExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Launch demo modal\"), mdx(CModal, {\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"Woohoo, you're reading this text in a modal!\"), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar StaticBackdropExample = function StaticBackdropExample() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Launch static backdrop modal\"), mdx(CModal, {\n    backdrop: \"static\",\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"I will not close if you click outside me. Don't even try to press escape key.\"), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar ScrollingLongContentExample = function ScrollingLongContentExample() {\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visible = _useState6[0],\n      setVisible = _useState6[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Launch demo modal\"), mdx(CModal, {\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\")), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar ScrollingLongContentExample2 = function ScrollingLongContentExample2() {\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      visible = _useState8[0],\n      setVisible = _useState8[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Launch demo modal\"), mdx(CModal, {\n    scrollable: true,\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\")), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar VerticallyCenteredExample = function VerticallyCenteredExample() {\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      visible = _useState10[0],\n      setVisible = _useState10[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Vertically centered modal\"), mdx(CModal, {\n    alignment: \"center\",\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar VerticallyCenteredScrollableExample = function VerticallyCenteredScrollableExample() {\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      visible = _useState12[0],\n      setVisible = _useState12[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Vertically centered scrollable modal\"), mdx(CModal, {\n    alignment: \"center\",\n    scrollable: true,\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\"), mdx(\"p\", null, \"Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus auctor fringilla.\"), mdx(\"p\", null, \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\"), mdx(\"p\", null, \"Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor.\")), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar TooltipsAndPopoversExample = function TooltipsAndPopoversExample() {\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      visible = _useState14[0],\n      setVisible = _useState14[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Launch demo modal\"), mdx(CModal, {\n    alignment: \"center\",\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, mdx(\"h5\", null, \"Popover in a modal\"), mdx(\"p\", null, \"This\", mdx(CPopover, {\n    title: \"Popover title\",\n    content: \"Popover body content is set in this property.\",\n    mdxType: \"CPopover\"\n  }, mdx(CButton, {\n    mdxType: \"CButton\"\n  }, \"button\")), \" triggers a popover on click.\"), mdx(\"hr\", null), mdx(\"h5\", null, \"Tooltips in a modal\"), mdx(\"p\", null, mdx(CTooltip, {\n    content: \"Tooltip\",\n    mdxType: \"CTooltip\"\n  }, mdx(CLink, {\n    mdxType: \"CLink\"\n  }, \"This link\")), ' ', \"and\", mdx(CTooltip, {\n    content: \"Tooltip\",\n    mdxType: \"CTooltip\"\n  }, mdx(CLink, {\n    mdxType: \"CLink\"\n  }, \"that link\")), \" have tooltips on hover.\")), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\"))));\n};\n\nvar OptionalSizesExample = function OptionalSizesExample() {\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      visibleXL = _useState16[0],\n      setVisibleXL = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      visibleLg = _useState18[0],\n      setVisibleLg = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      visibleSm = _useState20[0],\n      setVisibleSm = _useState20[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleXL(!visibleXL);\n    },\n    mdxType: \"CButton\"\n  }, \"Extra large modal\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleLg(!visibleLg);\n    },\n    mdxType: \"CButton\"\n  }, \"Large modal\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleSm(!visibleSm);\n    },\n    mdxType: \"CButton\"\n  }, \"Small modal\"), mdx(CModal, {\n    size: \"xl\",\n    visible: visibleXL,\n    onClose: function onClose() {\n      return setVisibleXL(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Extra large modal\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    size: \"lg\",\n    visible: visibleLg,\n    onClose: function onClose() {\n      return setVisibleLg(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Large modal\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    size: \"sm\",\n    visible: visibleSm,\n    onClose: function onClose() {\n      return setVisibleSm(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Small modal\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")));\n};\n\nvar FullscreenExample = function FullscreenExample() {\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      visible = _useState22[0],\n      setVisible = _useState22[1];\n\n  var _useState23 = useState(false),\n      _useState24 = _slicedToArray(_useState23, 2),\n      visibleSm = _useState24[0],\n      setVisibleSm = _useState24[1];\n\n  var _useState25 = useState(false),\n      _useState26 = _slicedToArray(_useState25, 2),\n      visibleMd = _useState26[0],\n      setVisibMdSm = _useState26[1];\n\n  var _useState27 = useState(false),\n      _useState28 = _slicedToArray(_useState27, 2),\n      visibleLg = _useState28[0],\n      setVisibleLg = _useState28[1];\n\n  var _useState29 = useState(false),\n      _useState30 = _slicedToArray(_useState29, 2),\n      visibleXL = _useState30[0],\n      setVisibleXL = _useState30[1];\n\n  var _useState31 = useState(false),\n      _useState32 = _slicedToArray(_useState31, 2),\n      visibleXXL = _useState32[0],\n      setVisibleXXL = _useState32[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleSm(!visibleSm);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen below sm\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleMd(!visibleMd);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen below md\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleLg(!visibleLg);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen below lg\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleXL(!visibleXL);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen below xl\"), mdx(CButton, {\n    onClick: function onClick() {\n      return setVisibleXXL(!visibleXXL);\n    },\n    mdxType: \"CButton\"\n  }, \"Full screen below xxl\"), mdx(CModal, {\n    fullscreen: true,\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    fullscreen: \"sm\",\n    visible: visibleSm,\n    onClose: function onClose() {\n      return setVisibleSm(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen below sm\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    fullscreen: \"md\",\n    visible: visibleMd,\n    onClose: function onClose() {\n      return setVisibleMd(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen below md\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    fullscreen: \"lg\",\n    visible: visibleLg,\n    onClose: function onClose() {\n      return setVisibleLg(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen below lg\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    fullscreen: \"xl\",\n    visible: visibleXL,\n    onClose: function onClose() {\n      return setVisibleXL(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen below xl\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")), mdx(CModal, {\n    fullscreen: \"xxl\",\n    visible: visibleXXL,\n    onClose: function onClose() {\n      return setVisibleXXL(false);\n    },\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Full screen below xxl\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"...\")));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Modal Component\",\n  \"name\": \"Modal\",\n  \"description\": \"React Modal component offers a lightweight, multi-purpose popup to add dialogs to yours. Learn how to customize React CoreUI Modals easily. Multiple examples and tutorial.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/modal\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  LiveDemoExample: LiveDemoExample,\n  StaticBackdropExample: StaticBackdropExample,\n  ScrollingLongContentExample: ScrollingLongContentExample,\n  ScrollingLongContentExample2: ScrollingLongContentExample2,\n  VerticallyCenteredExample: VerticallyCenteredExample,\n  VerticallyCenteredScrollableExample: VerticallyCenteredScrollableExample,\n  TooltipsAndPopoversExample: TooltipsAndPopoversExample,\n  OptionalSizesExample: OptionalSizesExample,\n  FullscreenExample: FullscreenExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Examples\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"modal-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Modal components\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#modal-components\",\n    \"aria-label\": \"modal components permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Below is a static modal example (meaning its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display\"), \" have been overridden). Included are the modal header, modal body (required for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"padding\"), \"), and modal footer (optional). We ask that you include modal headers with dismiss actions whenever possible, or provide another explicit dismiss action.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CModal, {\n    className: \"show d-block position-static\",\n    backdrop: false,\n    keyboard: false,\n    portal: false,\n    visible: true,\n    mdxType: \"CModal\"\n  }, mdx(CModalHeader, {\n    mdxType: \"CModalHeader\"\n  }, mdx(CModalTitle, {\n    mdxType: \"CModalTitle\"\n  }, \"Modal title\")), mdx(CModalBody, {\n    mdxType: \"CModalBody\"\n  }, \"Modal body text goes here.\"), mdx(CModalFooter, {\n    mdxType: \"CModalFooter\"\n  }, mdx(CButton, {\n    color: \"secondary\",\n    mdxType: \"CButton\"\n  }, \"Close\"), mdx(CButton, {\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Save changes\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CModal\\n  className=\\\"show d-block position-static\\\"\\n  backdrop={false}\\n  keyboard={false}\\n  portal={false}\\n  visible\\n>\\n  <CModalHeader>\\n    <CModalTitle>Modal title</CModalTitle>\\n  </CModalHeader>\\n  <CModalBody>Modal body text goes here.</CModalBody>\\n  <CModalFooter>\\n    <CButton color=\\\"secondary\\\">Close</CButton>\\n    <CButton color=\\\"primary\\\">Save changes</CButton>\\n  </CModalFooter>\\n</CModal>\\n\")), mdx(\"h3\", {\n    \"id\": \"live-demo\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Live demo\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#live-demo\",\n    \"aria-label\": \"live demo permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Toggle a working modal demo by clicking the button below. It will slide down and fade in from the top of the page.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(LiveDemoExample, {\n    mdxType: \"LiveDemoExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Launch demo modal</CButton>\\n    <CModal visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader onClose={() => setVisible(false)}>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>Woohoo, you're reading this text in a modal!</CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"static-backdrop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Static backdrop\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#static-backdrop\",\n    \"aria-label\": \"static backdrop permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"If you set a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backdrop\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"static\"), \", your modal will behave as though the backdrop is static, meaning it will not close when clicking outside it. Click the button below to try it.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(StaticBackdropExample, {\n    mdxType: \"StaticBackdropExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Launch static backdrop modal</CButton>\\n    <CModal visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        I will not close if you click outside me. Don't even try to press escape key.\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"scrolling-long-content\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Scrolling long content\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#scrolling-long-content\",\n    \"aria-label\": \"scrolling long content permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"When modals become too long for the user's viewport or device, they scroll independent of the page itself. Try the demo below to see what we mean.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ScrollingLongContentExample, {\n    mdxType: \"ScrollingLongContentExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Launch demo modal</CButton>\\n    <CModal visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"p\", null, \"You can also create a scrollable modal that allows scroll the modal body by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scrollable\"), \" prop.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ScrollingLongContentExample2, {\n    mdxType: \"ScrollingLongContentExample2\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Launch demo modal</CButton>\\n    <CModal scrollable visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"vertically-centered\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Vertically centered\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#vertically-centered\",\n    \"aria-label\": \"vertically centered permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alignment=\\\"center\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CModal>\"), \" to vertically center the modal.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(VerticallyCenteredExample, {\n    mdxType: \"VerticallyCenteredExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Vertically centered modal</CButton>\\n    <CModal alignment=\\\"center\\\" visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis in,\\n        egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(VerticallyCenteredScrollableExample, {\n    mdxType: \"VerticallyCenteredScrollableExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Vertically centered scrollable modal</CButton>\\n    <CModal alignment=\\\"center\\\" scrollable visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n        <p>\\n          Aenean lacinia bibendum nulla sed consectetur. Praesent commodo cursus magna, vel\\n          scelerisque nisl consectetur et. Donec sed odio dui. Donec ullamcorper nulla non metus\\n          auctor fringilla.\\n        </p>\\n        <p>\\n          Cras mattis consectetur purus sit amet fermentum. Cras justo odio, dapibus ac facilisis\\n          in, egestas eget quam. Morbi leo risus, porta ac consectetur ac, vestibulum at eros.\\n        </p>\\n        <p>\\n          Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Vivamus sagittis lacus\\n          vel augue laoreet rutrum faucibus dolor auctor.\\n        </p>\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"tooltips-and-popovers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tooltips and popovers\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#tooltips-and-popovers\",\n    \"aria-label\": \"tooltips and popovers permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CTooltips>\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CPopovers>\"), \" can be placed within modals as needed. When modals are closed, any tooltips and popovers within are also automatically dismissed.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(TooltipsAndPopoversExample, {\n    mdxType: \"TooltipsAndPopoversExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Launch demo modal</CButton>\\n    <CModal alignment=\\\"center\\\" visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Modal title</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>\\n        <h5>Popover in a modal</h5>\\n        <p>\\n          This\\n          <CPopover title=\\\"Popover title\\\" content=\\\"Popover body content is set in this property.\\\">\\n            <CButton>button</CButton>\\n          </CPopover> triggers a popover on click.\\n        </p>\\n        <hr />\\n        <h5>Tooltips in a modal</h5>\\n        <p>\\n          <CTooltip content=\\\"Tooltip\\\">\\n            <CLink>This link</CLink>\\n          </CTooltip>{' '}\\n          and\\n          <CTooltip content=\\\"Tooltip\\\">\\n            <CLink>that link</CLink>\\n          </CTooltip> have tooltips on hover.\\n        </p>\\n      </CModalBody>\\n      <CModalFooter>\\n        <CButton color=\\\"secondary\\\" onClick={() => setVisible(false)}>\\n          Close\\n        </CButton>\\n        <CButton color=\\\"primary\\\">Save changes</CButton>\\n      </CModalFooter>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"optional-sizes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Optional sizes\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#optional-sizes\",\n    \"aria-label\": \"optional sizes permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Modals have three optional sizes, available via modifier classes to be placed on a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CModal>\"), \". These sizes kick in at certain breakpoints to avoid horizontal scrollbars on narrower viewports.\"), mdx(\"table\", {\n    className: \"table\"\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Size\"), mdx(\"th\", null, \"Property size\"), mdx(\"th\", null, \"Modal max-width\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, \"Small\"), mdx(\"td\", null, mdx(\"code\", null, \"'sm'\")), mdx(\"td\", null, mdx(\"code\", null, \"300px\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Default\"), mdx(\"td\", {\n    className: \"text-medium-emphasis\"\n  }, \"None\"), mdx(\"td\", null, mdx(\"code\", null, \"500px\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Large\"), mdx(\"td\", null, mdx(\"code\", null, \"'lg'\")), mdx(\"td\", null, mdx(\"code\", null, \"800px\"))), mdx(\"tr\", null, mdx(\"td\", null, \"Extra large\"), mdx(\"td\", null, mdx(\"code\", null, \"'xl'\")), mdx(\"td\", null, mdx(\"code\", null, \"1140px\"))))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(OptionalSizesExample, {\n    mdxType: \"OptionalSizesExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visibleXL, setVisibleXL] = useState(false)\\nconst [visibleLg, setVisibleLg] = useState(false)\\nconst [visibleSm, setVisibleSm] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisibleXL(!visibleXL)}>Extra large modal</CButton>\\n    <CButton onClick={() => setVisibleLg(!visibleLg)}>Large modal</CButton>\\n    <CButton onClick={() => setVisibleSm(!visibleSm)}>Small modal</CButton>\\n    <CModal size=\\\"xl\\\" visible={visibleXL} onClose={() => setVisibleXL(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Extra large modal</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal size=\\\"lg\\\" visible={visibleLg} onClose={() => setVisibleLg(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Large modal</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal size=\\\"sm\\\" visible={visibleSm} onClose={() => setVisibleSm(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Small modal</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"fullscreen-modal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Fullscreen Modal\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#fullscreen-modal\",\n    \"aria-label\": \"fullscreen modal permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Another override is the option to pop up a modal that covers the user viewport, available via property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullscrean\"), \".\"), mdx(\"table\", {\n    className: \"table\"\n  }, mdx(\"thead\", null, mdx(\"tr\", null, mdx(\"th\", null, \"Property fullscrean\"), mdx(\"th\", null, \"Availability\"))), mdx(\"tbody\", null, mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"true\")), mdx(\"td\", null, \"Always\")), mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"'sm'\")), mdx(\"td\", null, \"Below \", mdx(\"code\", null, \"576px\"))), mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"'md'\")), mdx(\"td\", null, \"Below \", mdx(\"code\", null, \"768px\"))), mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"'lg'\")), mdx(\"td\", null, \"Below \", mdx(\"code\", null, \"992px\"))), mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"'xl'\")), mdx(\"td\", null, \"Below \", mdx(\"code\", null, \"1200px\"))), mdx(\"tr\", null, mdx(\"td\", null, mdx(\"code\", null, \"'xxl'\")), mdx(\"td\", null, \"Below \", mdx(\"code\", null, \"1400px\"))))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(FullscreenExample, {\n    mdxType: \"FullscreenExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nconst [visibleSm, setVisibleSm] = useState(false)\\nconst [visibleMd, setVisibMdSm] = useState(false)\\nconst [visibleLg, setVisibleLg] = useState(false)\\nconst [visibleXL, setVisibleXL] = useState(false)\\nconst [visibleXXL, setVisibleXXL] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(!visible)}>Full screen</CButton>\\n    <CButton onClick={() => setVisibleSm(!visibleSm)}>Full screen below sm</CButton>\\n    <CButton onClick={() => setVisibleMd(!visibleMd)}>Full screen below md</CButton>\\n    <CButton onClick={() => setVisibleLg(!visibleLg)}>Full screen below lg</CButton>\\n    <CButton onClick={() => setVisibleXL(!visibleXL)}>Full screen below xl</CButton>\\n    <CButton onClick={() => setVisibleXXL(!visibleXXL)}>Full screen below xxl</CButton>\\n    <CModal fullscreen visible={visible} onClose={() => setVisible(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal fullscreen=\\\"sm\\\" visible={visibleSm} onClose={() => setVisibleSm(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen below sm</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal fullscreen=\\\"md\\\" visible={visibleMd} onClose={() => setVisibleMd(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen below md</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal fullscreen=\\\"lg\\\" visible={visibleLg} onClose={() => setVisibleLg(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen below lg</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal fullscreen=\\\"xl\\\" visible={visibleXL} onClose={() => setVisibleXL(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen below xl</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n    <CModal fullscreen=\\\"xxl\\\" visible={visibleXXL} onClose={() => setVisibleXXL(false)}>\\n      <CModalHeader>\\n        <CModalTitle>Full screen below xxl</CModalTitle>\\n      </CModalHeader>\\n      <CModalBody>...</CModalBody>\\n    </CModal>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cmodal\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CModal\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cmodal\",\n    \"aria-label\": \"cmodal permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CModal } from '@coreui/react'\\n// or\\nimport CModal from '@coreui/react/src/components/modal/CModal'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"alignment\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Align the modal in the center or top of the screen.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'top'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'center'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"backdrop\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Apply a backdrop on body while modal is open.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'static'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"fullscreen\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set modal to covers the entire user viewport.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sm'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'md'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'lg'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xl'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xxl'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"keyboard\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Closes the modal when escape key is pressed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onClose\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be closed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onClosePrevented\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be closed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onShow\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the modal is shown, its backdrop is static and a click outside the modal or an escape key press is performed with the keyboard option set to false.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"portal\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Generates modal using createPortal.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"scrollable\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Create a scrollable modal that allows scrolling the modal body.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"size\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Size the component small, large, or extra large.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sm'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'lg'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xl'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"transition\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Remove animation to create modal that simply appear rather than fade in to view.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the visibility of modal component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cmodalbody\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CModalBody\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cmodalbody\",\n    \"aria-label\": \"cmodalbody permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CModalBody } from '@coreui/react'\\n// or\\nimport CModalBody from '@coreui/react/src/components/modal/CModalBody'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cmodalfooter\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CModalFooter\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cmodalfooter\",\n    \"aria-label\": \"cmodalfooter permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CModalFooter } from '@coreui/react'\\n// or\\nimport CModalFooter from '@coreui/react/src/components/modal/CModalFooter'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cmodalheader\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CModalHeader\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cmodalheader\",\n    \"aria-label\": \"cmodalheader permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CModalHeader } from '@coreui/react'\\n// or\\nimport CModalHeader from '@coreui/react/src/components/modal/CModalHeader'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"closeButton\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Add a close button component to the header.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\"))))), mdx(\"h3\", {\n    \"id\": \"cmodaltitle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CModalTitle\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cmodaltitle\",\n    \"aria-label\": \"cmodaltitle permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CModalTitle } from '@coreui/react'\\n// or\\nimport CModalTitle from '@coreui/react/src/components/modal/CModalTitle'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Modal Component","description":"React Modal component offers a lightweight, multi-purpose popup to add dialogs to yours. Learn how to customize React CoreUI Modals easily. Multiple examples and tutorial.","route":"/components/modal"},"tableOfContents":{"items":[{"url":"#examples","title":"Examples","items":[{"url":"#modal-components","title":"Modal components"},{"url":"#live-demo","title":"Live demo"},{"url":"#static-backdrop","title":"Static backdrop"},{"url":"#scrolling-long-content","title":"Scrolling long content"},{"url":"#vertically-centered","title":"Vertically centered"},{"url":"#tooltips-and-popovers","title":"Tooltips and popovers"}]},{"url":"#optional-sizes","title":"Optional sizes"},{"url":"#fullscreen-modal","title":"Fullscreen Modal"},{"url":"#api","title":"API","items":[{"url":"#cmodal","title":"CModal"},{"url":"#cmodalbody","title":"CModalBody"},{"url":"#cmodalfooter","title":"CModalFooter"},{"url":"#cmodalheader","title":"CModalHeader"},{"url":"#cmodaltitle","title":"CModalTitle"}]}]}}},"pageContext":{"id":"2d6f3b7a-94cb-56dc-a09e-fabc9204b893"}},
    "staticQueryHashes": ["4202924991"]}