{"componentChunkName":"component---src-templates-docs-tsx","path":"/templates/customize/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"acb8a455-ccc6-56c3-83f1-c09064234b40","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Customize react templates\",\n  \"name\": \"Customize react templates\",\n  \"description\": \"Learn how to theme, customize, and extend CoreUI React Templates with Sass, a boatload of global options.\",\n  \"menu\": \"Templates\",\n  \"route\": \"/templates/customize\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overview\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"There are multiple ways to customize CoreUI for React. Your best path can depend on your project, the complexity of your build tools, the version of CoreUI for React you're using, browser support, and more.\"), mdx(\"p\", null, \"Our two preferred methods are:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You can extend our source files.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You can override CoreUI\\u2019s styles.\")), mdx(\"h2\", {\n    \"id\": \"file-structure\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"File structure\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#file-structure\",\n    \"aria-label\": \"file structure permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Utilize our source Sass files to take advantage of variables, maps, mixins, and functions to help you build faster and customize your project.\"), mdx(\"p\", null, \"Whenever possible, avoid modifying CoreUI's core files. For Sass, that means creating your own stylesheet that imports CoreUI for React so you can modify and extend it. Assuming you're using a package manager like npm, you'll have a file structure that looks like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"your-project/\\n\\u251C\\u2500\\u2500 ...\\n\\u251C\\u2500\\u2500 node_modules/\\n\\u2502   \\u251C\\u2500\\u2500 @coreui/coreui \\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 scss\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 ...\\n\\u2502   \\u2514\\u2500\\u2500 @coreui/react\\n\\u2502       \\u2514\\u2500\\u2500 ...\\n\\u251C\\u2500\\u2500 src\\n\\u2502   \\u2514\\u2500\\u2500 scss\\n\\u2502       \\u251C\\u2500\\u2500 _custom.scss\\n\\u2502       \\u251C\\u2500\\u2500 ...\\n\\u2502       \\u251C\\u2500\\u2500 _variables.scss\\n\\u2502       \\u2514\\u2500\\u2500 ...\\n\\u2514\\u2500\\u2500 ...\\n\")), mdx(\"p\", null, \"If you use CoreUI PRO version.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"your-project/\\n\\u251C\\u2500\\u2500 ...\\n\\u251C\\u2500\\u2500 node_modules/\\n\\u2502   \\u251C\\u2500\\u2500 @coreui/coreui-pro \\n\\u2502   \\u2502   \\u251C\\u2500\\u2500 scss\\n\\u2502   \\u2502   \\u2514\\u2500\\u2500 ...\\n\\u2502   \\u2514\\u2500\\u2500 @coreui/react-pro\\n\\u2502       \\u2514\\u2500\\u2500 ...\\n\\u251C\\u2500\\u2500 src\\n\\u2502   \\u2514\\u2500\\u2500 scss\\n\\u2502       \\u251C\\u2500\\u2500 _custom.scss\\n\\u2502       \\u251C\\u2500\\u2500 ...\\n\\u2502       \\u251C\\u2500\\u2500 _variables.scss\\n\\u2502       \\u2514\\u2500\\u2500 ...\\n\\u2514\\u2500\\u2500 ...\\n\")), mdx(\"h2\", {\n    \"id\": \"variable-defaults\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Variable defaults\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#variable-defaults\",\n    \"aria-label\": \"variable defaults permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Every Sass variable in CoreUI for React includes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!default\"), \" flag allowing you to override the variable's default value in your own Sass without modifying CoreUI's source code. Copy and paste variables as needed, modify their values, and remove the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!default\"), \" flag. If a variable has already been assigned, then it won't be re-assigned by the default values in CoreUI.\"), mdx(\"p\", null, \"You will find the complete list of CoreUI's variables in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules/@coreui/coreui/scss/_variables.scss\"), \" or in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"node_modules/@coreui/coreui-pro/scss/_variables.scss\"), \". Some variables are set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"null\"), \", these variables don't output the property unless they are overridden in your configuration. You can also find a specific component variables list in \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Customizing\"), \" section ex. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/react/docs/components/alert#customizing%22\"\n  }, \"Alerts - Customizing\")), mdx(\"p\", null, \"Here's an example that changes the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \" when importing and compiling CoreUI for React via npm:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"// _variables.scss\\n\\n// Default variable overrides\\n$body-bg: #000;\\n$body-color: #111;\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-styles-and-overrides\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom styles and overrides\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-styles-and-overrides\",\n    \"aria-label\": \"custom styles and overrides permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"In your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"custom.scss\"), \", you can put custom code for CoreUI's components or your own styles.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"// _custom.scss\\n\\n// Additional custom code here\\n.custom-component {\\n  border: 2px solid #222;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Customize react templates","description":"Learn how to theme, customize, and extend CoreUI React Templates with Sass, a boatload of global options.","name":"Customize react templates","route":"/templates/customize"},"tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#file-structure","title":"File structure"},{"url":"#variable-defaults","title":"Variable defaults"},{"url":"#custom-styles-and-overrides","title":"Custom styles and overrides"}]}}},"pageContext":{"id":"acb8a455-ccc6-56c3-83f1-c09064234b40"}},"staticQueryHashes":["4202924991"]}