{"componentChunkName":"component---src-templates-docs-tsx","path":"/components/accordion/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"686ea5f0-0471-57fe-b48c-076c63499813","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Accordion Component\",\n  \"name\": \"Accordion\",\n  \"description\": \"Build vertically collapsing accordions in combination with our React Accordion component.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/accordion\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"how-to-use-react-accordion-component\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"How to use React Accordion component.\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#how-to-use-react-accordion-component\",\n    \"aria-label\": \"how to use react accordion component permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Click the accordions below to expand/collapse the accordion content.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAccordion, {\n    activeItemKey: 2,\n    mdxType: \"CAccordion\"\n  }, mdx(CAccordionItem, {\n    itemKey: 1,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #1\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 2,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #2\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 3,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #3\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAccordion activeItemKey={2}>\\n  <CAccordionItem itemKey={1}>\\n    <CAccordionHeader>Accordion Item #1</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the first item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={2}>\\n    <CAccordionHeader>Accordion Item #2</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={3}>\\n    <CAccordionHeader>Accordion Item #3</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n</CAccordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"flush\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Flush\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#flush\",\n    \"aria-label\": \"flush permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"flush\"), \" to remove the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \", some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAccordion, {\n    flush: true,\n    mdxType: \"CAccordion\"\n  }, mdx(CAccordionItem, {\n    itemKey: 1,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #1\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 2,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #2\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 3,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #3\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the third item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAccordion flush>\\n  <CAccordionItem itemKey={1}>\\n    <CAccordionHeader>Accordion Item #1</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the first item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={2}>\\n    <CAccordionHeader>Accordion Item #2</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={3}>\\n    <CAccordionHeader>Accordion Item #3</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the third item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n</CAccordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"always-open\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Always open\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#always-open\",\n    \"aria-label\": \"always open permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"alwaysOpen\"), \" property to make react accordion items stay open when another item is opened.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAccordion, {\n    alwaysOpen: true,\n    activeItemKey: 2,\n    mdxType: \"CAccordion\"\n  }, mdx(CAccordionItem, {\n    itemKey: 1,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #1\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the first item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 2,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #2\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")), mdx(CAccordionItem, {\n    itemKey: 3,\n    mdxType: \"CAccordionItem\"\n  }, mdx(CAccordionHeader, {\n    mdxType: \"CAccordionHeader\"\n  }, \"Accordion Item #3\"), mdx(CAccordionBody, {\n    mdxType: \"CAccordionBody\"\n  }, mdx(\"strong\", null, \"This is the second item's accordion body.\"), \" It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the\", ' ', mdx(\"code\", null, \".accordion-body\"), \", though the transition does limit overflow.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAccordion alwaysOpen activeItemKey={2}>\\n  <CAccordionItem itemKey={1}>\\n    <CAccordionHeader>Accordion Item #1</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the first item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={2}>\\n    <CAccordionHeader>Accordion Item #2</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n  <CAccordionItem itemKey={3}>\\n    <CAccordionHeader>Accordion Item #3</CAccordionHeader>\\n    <CAccordionBody>\\n      <strong>This is the second item's accordion body.</strong> It is hidden by default, until the\\n      collapse plugin adds the appropriate classes that we use to style each element. These classes\\n      control the overall appearance, as well as the showing and hiding via CSS transitions. You can\\n      modify any of this with custom CSS or overriding our default variables. It's also worth noting\\n      that just about any HTML can go within the <code>.accordion-body</code>, though the transition\\n      does limit overflow.\\n    </CAccordionBody>\\n  </CAccordionItem>\\n</CAccordion>\\n\")), mdx(\"h2\", {\n    \"id\": \"customizing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Customizing\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#customizing\",\n    \"aria-label\": \"customizing permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"css-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CSS variables\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#css-variables\",\n    \"aria-label\": \"css variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"React accordions use local CSS variables on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".accordion\"), \" for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sass\"\n  }, \"--cui-accordion-color: #{color-contrast($accordion-bg)};\\n--cui-accordion-bg: #{$accordion-bg};\\n--cui-accordion-transition: #{$accordion-transition};\\n--cui-accordion-border-color: #{$accordion-border-color};\\n--cui-accordion-border-width: #{$accordion-border-width};\\n--cui-accordion-border-radius: #{$accordion-border-radius};\\n--cui-accordion-inner-border-radius: #{$accordion-inner-border-radius};\\n--cui-accordion-btn-padding-x: #{$accordion-button-padding-x};\\n--cui-accordion-btn-padding-y: #{$accordion-button-padding-y};\\n--cui-accordion-btn-color: #{$accordion-color};\\n--cui-accordion-btn-bg: #{$accordion-button-bg};\\n--cui-accordion-btn-icon: #{escape-svg($accordion-button-icon)};\\n--cui-accordion-btn-icon-width: #{$accordion-icon-width};\\n--cui-accordion-btn-icon-transform: #{$accordion-icon-transform};\\n--cui-accordion-btn-icon-transition: #{$accordion-icon-transition};\\n--cui-accordion-btn-active-icon: #{escape-svg($accordion-button-active-icon)};\\n--cui-accordion-btn-focus-border-color: #{$accordion-button-focus-border-color};\\n--cui-accordion-btn-focus-box-shadow: #{$accordion-button-focus-box-shadow};\\n--cui-accordion-body-padding-x: #{$accordion-body-padding-x};\\n--cui-accordion-body-padding-y: #{$accordion-body-padding-y};\\n--cui-accordion-active-color: #{$accordion-button-active-color};\\n--cui-accordion-active-bg: #{$accordion-button-active-bg};\\n\")), mdx(\"h4\", {\n    \"id\": \"how-to-use-css-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"How to use CSS variables\", mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#how-to-use-css-variables\",\n    \"aria-label\": \"how to use css variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const vars = { \\n  '--my-css-var': 10,\\n  '--my-another-css-var': \\\"red\\\" \\n}\\nreturn <CAccordion style={vars}>...</CAccordion>\\n\")), mdx(\"h3\", {\n    \"id\": \"sass-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"SASS variables\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sass-variables\",\n    \"aria-label\": \"sass variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sass\"\n  }, \"$accordion-padding-y:                     1rem;\\n$accordion-padding-x:                     1.25rem;\\n$accordion-color:                         var(--cui-body-color);\\n$accordion-bg:                            $body-bg;\\n$accordion-border-width:                  $border-width;\\n$accordion-border-color:                  var(--cui-border-color);\\n$accordion-border-radius:                 $border-radius;\\n$accordion-inner-border-radius:           subtract($accordion-border-radius, $accordion-border-width);\\n\\n$accordion-body-padding-y:                $accordion-padding-y;\\n$accordion-body-padding-x:                $accordion-padding-x;\\n\\n$accordion-button-padding-y:              $accordion-padding-y;\\n$accordion-button-padding-x:              $accordion-padding-x;\\n$accordion-button-color:                  $accordion-color;\\n$accordion-button-bg:                     var(--cui-accordion-bg);\\n$accordion-transition:                    $btn-transition, border-radius .15s ease;\\n$accordion-button-active-bg:              tint-color($component-active-bg, 90%);\\n$accordion-button-active-color:           shade-color($primary, 10%);\\n\\n$accordion-button-focus-border-color:     $input-focus-border-color;\\n$accordion-button-focus-box-shadow:       $btn-focus-box-shadow;\\n\\n$accordion-icon-width:                    1.25rem;\\n$accordion-icon-color:                    $accordion-button-color;\\n$accordion-icon-active-color:             $accordion-button-active-color;\\n$accordion-icon-transition:               transform .2s ease-in-out;\\n$accordion-icon-transform:                rotate(-180deg);\\n\\n$accordion-button-icon:         url(\\\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-color}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>\\\");\\n$accordion-button-active-icon:  url(\\\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$accordion-icon-active-color}'><path fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/></svg>\\\");\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"caccordion\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordion\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordion\",\n    \"aria-label\": \"caccordion permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAccordion } from '@coreui/react'\\n// or\\nimport CAccordion from '@coreui/react-pro/src/components/accordion/CAccordion'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"activeItemKey\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"The active item key.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"alwaysOpen\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Make accordion items stay open when another item is opened\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"flush\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Removes the default background-color, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionbody\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionBody\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionbody\",\n    \"aria-label\": \"caccordionbody permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAccordionBody } from '@coreui/react'\\n// or\\nimport CAccordionBody from '@coreui/react-pro/src/components/accordion/CAccordionBody'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionheader\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionHeader\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionheader\",\n    \"aria-label\": \"caccordionheader permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAccordionHeader } from '@coreui/react'\\n// or\\nimport CAccordionHeader from '@coreui/react-pro/src/components/accordion/CAccordionHeader'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"caccordionitem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAccordionItem\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#caccordionitem\",\n    \"aria-label\": \"caccordionitem permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAccordionItem } from '@coreui/react'\\n// or\\nimport CAccordionItem from '@coreui/react-pro/src/components/accordion/CAccordionItem'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"itemKey\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Item key.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Accordion Component","description":"Build vertically collapsing accordions in combination with our React Accordion component.","name":"Accordion","route":"/components/accordion"},"tableOfContents":{"items":[{"url":"#how-to-use-react-accordion-component","title":"How to use React Accordion component.","items":[{"url":"#flush","title":"Flush"},{"url":"#always-open","title":"Always open"}]},{"url":"#customizing","title":"Customizing","items":[{"url":"#css-variables","title":"CSS variables"},{"url":"#sass-variables","title":"SASS variables"}]},{"url":"#api","title":"API","items":[{"url":"#caccordion","title":"CAccordion"},{"url":"#caccordionbody","title":"CAccordionBody"},{"url":"#caccordionheader","title":"CAccordionHeader"},{"url":"#caccordionitem","title":"CAccordionItem"}]}]}}},"pageContext":{"id":"686ea5f0-0471-57fe-b48c-076c63499813"}},"staticQueryHashes":["4202924991"]}