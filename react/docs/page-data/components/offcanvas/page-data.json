{"componentChunkName":"component---src-templates-docs-tsx","path":"/components/offcanvas/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"c3569727-3c64-58cb-944a-351ad5d5db07","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar LiveDemoExample = function LiveDemoExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Toggle offcanvas\"), mdx(COffcanvas, {\n    placement: \"start\",\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, \"Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.\")));\n};\n\nvar PlacementTopExample = function PlacementTopExample() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Toggle top offcanvas\"), mdx(COffcanvas, {\n    placement: \"top\",\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, \"Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.\")));\n};\n\nvar PlacementRightExample = function PlacementRightExample() {\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visible = _useState6[0],\n      setVisible = _useState6[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Toggle right offcanvas\"), mdx(COffcanvas, {\n    placement: \"end\",\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, \"Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.\")));\n};\n\nvar PlacementBottomExample = function PlacementBottomExample() {\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      visible = _useState8[0],\n      setVisible = _useState8[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Toggle bottom offcanvas\"), mdx(COffcanvas, {\n    placement: \"bottom\",\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, \"Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.\")));\n};\n\nvar BackdropExample = function BackdropExample() {\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      visibleScrolling = _useState10[0],\n      setVisibleScrolling = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      visibleWithBackdrop = _useState12[0],\n      setVisibleWithBackdrop = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      visibleWithBothOptions = _useState14[0],\n      setVisibleWithBothOptions = _useState14[1];\n\n  return mdx(React.Fragment, null, mdx(CButton, {\n    color: \"primary\",\n    onClick: function onClick() {\n      return setVisibleScrolling(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Enable body scrolling\"), mdx(CButton, {\n    color: \"primary\",\n    onClick: function onClick() {\n      return setVisibleWithBackdrop(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Enable backdrop (default)\"), mdx(CButton, {\n    color: \"primary\",\n    onClick: function onClick() {\n      return setVisibleWithBothOptions(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Enable both scrolling & backdrop\"), mdx(COffcanvas, {\n    backdrop: false,\n    placement: \"start\",\n    scroll: true,\n    visible: visibleScrolling,\n    onHide: function onHide() {\n      return setVisibleScrolling(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisibleScrolling(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, mdx(\"p\", null, \"Try scrolling the rest of the page to see this option in action.\"))), mdx(COffcanvas, {\n    placement: \"start\",\n    visible: visibleWithBackdrop,\n    onHide: function onHide() {\n      return setVisibleWithBackdrop(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisibleWithBackdrop(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, mdx(\"p\", null, \".....\"))), mdx(COffcanvas, {\n    placement: \"start\",\n    scroll: true,\n    visible: visibleWithBothOptions,\n    onHide: function onHide() {\n      return setVisibleWithBothOptions(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisibleWithBothOptions(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, mdx(\"p\", null, \"Try scrolling the rest of the page to see this option in action.\"))));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Offcanvas Component\",\n  \"name\": \"Offcanvas\",\n  \"description\": \"React alert component allows build hidden sidebars into your project for navigation, shopping carts.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/offcanvas\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  LiveDemoExample: LiveDemoExample,\n  PlacementTopExample: PlacementTopExample,\n  PlacementRightExample: PlacementRightExample,\n  PlacementBottomExample: PlacementBottomExample,\n  BackdropExample: BackdropExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Examples\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"offcanvas-components\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Offcanvas components\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#offcanvas-components\",\n    \"aria-label\": \"offcanvas components permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Below is an offcanvas example that is shown by default (via \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"visible={true}\"), \"). Offcanvas includes support for a header with a close button and an optional body class for some initial \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"padding\"), \". We suggest that you include offcanvas headers with dismiss actions whenever possible, or provide an explicit dismiss action.\"), mdx(Example, {\n    className: \"docs-example-offcanvas bg-light p-0\",\n    mdxType: \"Example\"\n  }, mdx(COffcanvas, {\n    backdrop: false,\n    placement: \"start\",\n    portal: false,\n    visible: true,\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, \"Content for the offcanvas goes here. You can place just about any Bootstrap component or custom elements here.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<COffcanvas backdrop={false} placement=\\\"start\\\" portal={false} visible={true}>\\n  <COffcanvasHeader>\\n    <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n    <CCloseButton className=\\\"text-reset\\\" />\\n  </COffcanvasHeader>\\n  <COffcanvasBody>\\n    Content for the offcanvas goes here. You can place just about any Bootstrap component or custom\\n    elements here.\\n  </COffcanvasBody>\\n</COffcanvas>\\n\")), mdx(\"h3\", {\n    \"id\": \"live-demo\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Live demo\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#live-demo\",\n    \"aria-label\": \"live demo permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use the buttons below to show and hide an offcanvas component.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"visible={false}\"), \" hides content (default)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"visible\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"visible={true}\"), \" shows content\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(LiveDemoExample, {\n    mdxType: \"LiveDemoExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(true)}>Toggle offcanvas</CButton>\\n    <COffcanvas placement=\\\"start\\\" visible={visible} onHide={() => setVisible(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        Content for the offcanvas goes here. You can place just about any Bootstrap component or\\n        custom elements here.\\n      </COffcanvasBody>\\n    </COffcanvas>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"placement\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Placement\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#placement\",\n    \"aria-label\": \"placement permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"There's no default placement for offcanvas components, so you must add one of the modifier classes below;\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placement=\\\"start\\\"\"), \" places offcanvas on the left of the viewport (shown above)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placement=\\\"end\\\"\"), \" places offcanvas on the right of the viewport\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placement=\\\"top\\\"\"), \" places offcanvas on the top of the viewport\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"placement=\\\"bottom\\\"\"), \" places offcanvas on the bottom of the viewport\")), mdx(\"p\", null, \"Try the top, right, and bottom examples out below.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(PlacementTopExample, {\n    mdxType: \"PlacementTopExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(true)}>Toggle top offcanvas</CButton>\\n    <COffcanvas placement=\\\"top\\\" visible={visible} onHide={() => setVisible(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        Content for the offcanvas goes here. You can place just about any Bootstrap component or\\n        custom elements here.\\n      </COffcanvasBody>\\n    </COffcanvas>\\n  </>\\n)\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(PlacementRightExample, {\n    mdxType: \"PlacementRightExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(true)}>Toggle right offcanvas</CButton>\\n    <COffcanvas placement=\\\"right\\\" visible={visible} onHide={() => setVisible(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        Content for the offcanvas goes here. You can place just about any Bootstrap component or\\n        custom elements here.\\n      </COffcanvasBody>\\n    </COffcanvas>\\n  </>\\n)\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(PlacementBottomExample, {\n    mdxType: \"PlacementBottomExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CButton onClick={() => setVisible(true)}>Toggle bottom offcanvas</CButton>\\n    <COffcanvas placement=\\\"bottom\\\" visible={visible} onHide={() => setVisible(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        Content for the offcanvas goes here. You can place just about any Bootstrap component or\\n        custom elements here.\\n      </COffcanvasBody>\\n    </COffcanvas>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"backdrop\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Backdrop\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#backdrop\",\n    \"aria-label\": \"backdrop permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Scrolling the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \" element is disabled when an offcanvas and its backdrop are visible. Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"scroll\"), \" property to toggle \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \" scrolling and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"backdrop\"), \" to toggle the backdrop.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(BackdropExample, {\n    mdxType: \"BackdropExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visibleScrolling, setVisibleScrolling] = useState(false)\\nconst [visibleWithBackdrop, setVisibleWithBackdrop] = useState(false)\\nconst [visibleWithBothOptions, setVisibleWithBothOptions] = useState(false)\\nreturn (\\n  <>\\n    <CButton color=\\\"primary\\\" onClick={() => setVisibleScrolling(true)}>Enable body scrolling</CButton>\\n    <CButton color=\\\"primary\\\" onClick={() => setVisibleWithBackdrop(true)}>Enable backdrop (default)</CButton>\\n    <CButton color=\\\"primary\\\" onClick={() => setVisibleWithBothOptions(true)}>Enable both scrolling &amp; backdrop</CButton>\\n    <COffcanvas backdrop={false} placement=\\\"start\\\" scroll visible={visibleScrolling} onHide={() => setVisibleScrolling(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisibleScrolling(false)}/>\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        <p>Try scrolling the rest of the page to see this option in action.</p>\\n      </COffcanvasBody>\\n    </COffcanvas>\\n    <COffcanvas placement=\\\"start\\\" visible={visibleWithBackdrop} onHide={() => setVisibleWithBackdrop(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisibleWithBackdrop(false)}/>\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        <p>.....</p>\\n      </COffcanvasBody>\\n    </COffcanvas>\\n    <COffcanvas placement=\\\"start\\\" scroll visible={visibleWithBothOptions} onHide={() => setVisibleWithBothOptions(false)}>\\n      <COffcanvasHeader>\\n        <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n        <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisibleWithBothOptions(false)}/>\\n      </COffcanvasHeader>\\n      <COffcanvasBody>\\n        <p>Try scrolling the rest of the page to see this option in action.</p>\\n      </COffcanvasBody>\\n    </COffcanvas>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#accessibility\",\n    \"aria-label\": \"accessibility permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Since the offcanvas panel is conceptually a modal dialog, be sure to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-labelledby=\\\"...\\\"\"), \"\\u2014referencing the offcanvas title\\u2014to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<COffcanvas>\"), \". Note that you don\\u2019t need to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"role=\\\"dialog\\\"\"), \" since we already add it automatically.\"), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"coffcanvas\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"COffcanvas\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#coffcanvas\",\n    \"aria-label\": \"coffcanvas permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { COffcanvas } from '@coreui/react'\\n// or\\nimport COffcanvas from '@coreui/react/src/components/offcanvas/COffcanvas'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"backdrop\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Apply a backdrop on body while offcanvas is open.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"keyboard\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Closes the offcanvas when escape key is pressed\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onHide\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be hidden.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onShow\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be shown.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"placement\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Components placement, there\\u2019s no default placement.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'start'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'end'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'top'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'bottom'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"portal\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Generates modal using createPortal.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"scroll\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Allow body scrolling while offcanvas is open\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"false\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the visibility of offcanvas component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"false\"))))), mdx(\"h3\", {\n    \"id\": \"coffcanvasbody\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"COffcanvasBody\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#coffcanvasbody\",\n    \"aria-label\": \"coffcanvasbody permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { COffcanvasBody } from '@coreui/react'\\n// or\\nimport COffcanvasBody from '@coreui/react/src/components/offcanvas/COffcanvasBody'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"coffcanvasheader\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"COffcanvasHeader\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#coffcanvasheader\",\n    \"aria-label\": \"coffcanvasheader permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { COffcanvasHeader } from '@coreui/react'\\n// or\\nimport COffcanvasHeader from '@coreui/react/src/components/offcanvas/COffcanvasHeader'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"coffcanvastitle\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"COffcanvasTitle\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#coffcanvastitle\",\n    \"aria-label\": \"coffcanvastitle permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { COffcanvasTitle } from '@coreui/react'\\n// or\\nimport COffcanvasTitle from '@coreui/react/src/components/offcanvas/COffcanvasTitle'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Offcanvas Component","description":"React alert component allows build hidden sidebars into your project for navigation, shopping carts.","name":"Offcanvas","route":"/components/offcanvas"},"tableOfContents":{"items":[{"url":"#examples","title":"Examples","items":[{"url":"#offcanvas-components","title":"Offcanvas components"},{"url":"#live-demo","title":"Live demo"}]},{"url":"#placement","title":"Placement"},{"url":"#backdrop","title":"Backdrop"},{"url":"#accessibility","title":"Accessibility"},{"url":"#api","title":"API","items":[{"url":"#coffcanvas","title":"COffcanvas"},{"url":"#coffcanvasbody","title":"COffcanvasBody"},{"url":"#coffcanvasheader","title":"COffcanvasHeader"},{"url":"#coffcanvastitle","title":"COffcanvasTitle"}]}]}}},"pageContext":{"id":"c3569727-3c64-58cb-944a-351ad5d5db07"}},"staticQueryHashes":["4202924991"]}