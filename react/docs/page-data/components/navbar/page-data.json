{"componentChunkName":"component---src-templates-docs-tsx","path":"/components/navbar/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"3878aa29-7acb-5e1f-a547-fc3e7b7866fb","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar BasicUsageExample = function BasicUsageExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar NavExample = function NavExample() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      visible = _useState4[0],\n      setVisible = _useState4[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Features\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Pricing\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\")))))));\n};\n\nvar NavExample2 = function NavExample2() {\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      visible = _useState6[0],\n      setVisible = _useState6[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    component: \"nav\",\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\"), mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Features\"), mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Pricing\"), mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))))));\n};\n\nvar NavDropdownExample = function NavDropdownExample() {\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      visible = _useState8[0],\n      setVisible = _useState8[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Features\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Pricing\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown link\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))))))));\n};\n\nvar ColorSchemesExample = function ColorSchemesExample() {\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      visible = _useState10[0],\n      setVisible = _useState10[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"dark\",\n    className: \"bg-dark\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"light\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))), mdx(\"br\", null), mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"dark\",\n    className: \"bg-primary\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"light\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))), mdx(\"br\", null), mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    style: {\n      backgroundColor: '#e3f2fd'\n    },\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar ResponsiveBehaviorsExample = function ResponsiveBehaviorsExample() {\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      visible = _useState12[0],\n      setVisible = _useState12[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Hidden brand\"), mdx(CNavbarNav, {\n    className: \"me-auto mb-2 mb-lg-0\",\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar ResponsiveBehaviorsExample2 = function ResponsiveBehaviorsExample2() {\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      visible = _useState14[0],\n      setVisible = _useState14[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    className: \"me-auto mb-2 mb-lg-0\",\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar ResponsiveBehaviorsExample3 = function ResponsiveBehaviorsExample3() {\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      visible = _useState16[0],\n      setVisible = _useState16[1];\n\n  return mdx(React.Fragment, null, mdx(CNavbar, {\n    expand: \"lg\",\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarToggler, {\n    \"aria-label\": \"Toggle navigation\",\n    \"aria-expanded\": visible,\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CCollapse, {\n    className: \"navbar-collapse\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(CNavbarNav, {\n    className: \"me-auto mb-2 mb-lg-0\",\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar ExternalContentExample = function ExternalContentExample() {\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      visible = _useState18[0],\n      setVisible = _useState18[1];\n\n  return mdx(React.Fragment, null, mdx(CCollapse, {\n    id: \"navbarToggleExternalContent\",\n    visible: visible,\n    mdxType: \"CCollapse\"\n  }, mdx(\"div\", {\n    className: \"bg-dark p-4\"\n  }, mdx(\"h5\", {\n    className: \"text-white h4\"\n  }, \"Collapsed content\"), mdx(\"span\", {\n    className: \"text-medium-emphasis-inverse\"\n  }, \"Toggleable via the navbar brand.\"))), mdx(CNavbar, {\n    colorScheme: \"dark\",\n    className: \"bg-dark\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarToggler, {\n    \"aria-controls\": \"navbarToggleExternalContent\",\n    \"aria-label\": \"Toggle navigation\",\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }))));\n};\n\nvar OffcanvasExample = function OffcanvasExample() {\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      visible = _useState20[0],\n      setVisible = _useState20[1];\n\n  return mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarToggler, {\n    \"aria-controls\": \"offcanvasNavbar\",\n    \"aria-label\": \"Toggle navigation\",\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(COffcanvas, {\n    id: \"offcanvasNavbar\",\n    placement: \"end\",\n    portal: false,\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar OffcanvasExample2 = function OffcanvasExample2() {\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      visible = _useState22[0],\n      setVisible = _useState22[1];\n\n  return mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    expand: \"xxl\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarToggler, {\n    \"aria-controls\": \"offcanvasNavbar2\",\n    \"aria-label\": \"Toggle navigation\",\n    onClick: function onClick() {\n      return setVisible(!visible);\n    },\n    mdxType: \"CNavbarToggler\"\n  }), mdx(COffcanvas, {\n    id: \"offcanvasNavbar2\",\n    placement: \"end\",\n    portal: false,\n    visible: visible,\n    onHide: function onHide() {\n      return setVisible(false);\n    },\n    mdxType: \"COffcanvas\"\n  }, mdx(COffcanvasHeader, {\n    mdxType: \"COffcanvasHeader\"\n  }, mdx(COffcanvasTitle, {\n    mdxType: \"COffcanvasTitle\"\n  }, \"Offcanvas\"), mdx(CCloseButton, {\n    className: \"text-reset\",\n    onClick: function onClick() {\n      return setVisible(false);\n    },\n    mdxType: \"CCloseButton\"\n  })), mdx(COffcanvasBody, {\n    mdxType: \"COffcanvasBody\"\n  }, mdx(CNavbarNav, {\n    mdxType: \"CNavbarNav\"\n  }, mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    active: true,\n    mdxType: \"CNavLink\"\n  }, \"Home\")), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    mdxType: \"CNavLink\"\n  }, \"Link\")), mdx(CDropdown, {\n    variant: \"nav-item\",\n    popper: false,\n    mdxType: \"CDropdown\"\n  }, mdx(CDropdownToggle, {\n    color: \"secondary\",\n    mdxType: \"CDropdownToggle\"\n  }, \"Dropdown button\"), mdx(CDropdownMenu, {\n    mdxType: \"CDropdownMenu\"\n  }, mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Action\"), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Another action\"), mdx(CDropdownDivider, {\n    mdxType: \"CDropdownDivider\"\n  }), mdx(CDropdownItem, {\n    href: \"#\",\n    mdxType: \"CDropdownItem\"\n  }, \"Something else here\"))), mdx(CNavItem, {\n    mdxType: \"CNavItem\"\n  }, mdx(CNavLink, {\n    href: \"#\",\n    disabled: true,\n    mdxType: \"CNavLink\"\n  }, \"Disabled\"))), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Navbar Component\",\n  \"name\": \"Navbar\",\n  \"description\": \"Documentation and examples for the React navbar powerful, responsive navigation header component. Includes support for branding, links, dropdowns, and more.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/navbar\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar CCloseButton = makeShortcode(\"CCloseButton\");\nvar layoutProps = {\n  BasicUsageExample: BasicUsageExample,\n  NavExample: NavExample,\n  NavExample2: NavExample2,\n  NavDropdownExample: NavDropdownExample,\n  ColorSchemesExample: ColorSchemesExample,\n  ResponsiveBehaviorsExample: ResponsiveBehaviorsExample,\n  ResponsiveBehaviorsExample2: ResponsiveBehaviorsExample2,\n  ResponsiveBehaviorsExample3: ResponsiveBehaviorsExample3,\n  ExternalContentExample: ExternalContentExample,\n  OffcanvasExample: OffcanvasExample,\n  OffcanvasExample2: OffcanvasExample2,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"supported-content\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Supported content\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#supported-content\",\n    \"aria-label\": \"supported content permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \" come with built-in support for a handful of sub-components. Choose from the following as needed:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CNavbarBrand>\"), \" for your company, product, or project name.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CNavbarNav>\"), \" for a full-height and lightweight navigation (including support for dropdowns).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CNavbarToggler>\"), \" for use with our collapse plugin and other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#responsive-behaviors\"\n  }, \"navigation toggling\"), \" behaviors.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Flex and spacing utilities for any form controls and actions.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CNavbarText>\"), \" for adding vertically centered strings of text.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CCollapse>\"), \" for grouping and hiding navbar contents by a parent breakpoint.\")), mdx(\"p\", null, \"Here's an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"lg\"), \" (large) breakpoint.\"), mdx(\"h2\", {\n    \"id\": \"basic-usage\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Basic usage\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#basic-usage\",\n    \"aria-label\": \"basic usage permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(BasicUsageExample, {\n    mdxType: \"BasicUsageExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler onClick={() => setVisible(!visible)} />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"brand\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Brand\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#brand\",\n    \"aria-label\": \"brand permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarBrand>\"), \" can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"))), mdx(\"br\", null), mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    className: \"mb-0 h1\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{/* As a link */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n<br/>\\n{/* As a heading */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand className=\\\"mb-0 h1\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"p\", null, \"Adding images to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarBrand>\"), \" will likely always require custom styles or utilities to properly size. Here are some examples to demonstrate.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, mdx(\"img\", {\n    src: CoreUISignetImg,\n    alt: \"\",\n    width: \"22\",\n    height: \"24\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{ /* Just an image */ }\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">\\n      <img src=\\\"/images/brand/coreui-signet.svg\\\" alt=\\\"\\\" width=\\\"22\\\" height=\\\"24\\\" />\\n    </CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, mdx(\"img\", {\n    src: CoreUISignetImg,\n    alt: \"\",\n    width: \"22\",\n    height: \"24\",\n    className: \"d-inline-block align-top\"\n  }), ' ', \"CoreUI\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"{/* Image and text */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">\\n      <img\\n        src=\\\"/images/brand/coreui-signet.svg\\\"\\n        alt=\\\"\\\"\\n        width=\\\"22\\\"\\n        height=\\\"24\\\"\\n        className=\\\"d-inline-block align-top\\\"\\n      />{' '}\\n      CoreUI\\n    </CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"h3\", {\n    \"id\": \"nav\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Nav\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#nav\",\n    \"aria-label\": \"nav permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \" navigation is based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarNav>\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Navigation in navbars will also grow to occupy as much horizontal space as possible\"), \" to keep your navbar contents securely aligned.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(NavExample, {\n    mdxType: \"NavExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Features</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"p\", null, \"And because we use classes for our navs, you can avoid the list-based approach entirely if you like.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, function () {}), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav component=\\\"nav\\\">\\n            <CNavLink href=\\\"#\\\" active>\\n              Home\\n            </CNavLink>\\n            <CNavLink href=\\\"#\\\">Features</CNavLink>\\n            <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n            <CNavLink href=\\\"#\\\" disabled>\\n              Disabled\\n            </CNavLink>\\n          </CNavbarNav>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"p\", null, \"You can also use dropdowns in your navbar. Please note that \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CDropdown>\"), \" component requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant=\\\"nav-item\\\"\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(NavDropdownExample, {\n    mdxType: \"NavDropdownExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Features</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle>Dropdown link</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n          </CNavbarNav>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"forms\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Forms\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#forms\",\n    \"aria-label\": \"forms permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Place various form controls and components within a navbar:\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CForm className=\\\"d-flex\\\">\\n      <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n      <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n        Search\\n      </CButton>\\n    </CForm>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"p\", null, \"Immediate child elements of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \" use flex layout and will default to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justify-content: space-between\"), \". Use additional \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://coreui.io/docs/utilities/flex/\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"flex utilities\"), \" as needed to adjust this behavior.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"), mdx(CForm, {\n    className: \"d-flex\",\n    mdxType: \"CForm\"\n  }, mdx(CFormInput, {\n    type: \"search\",\n    className: \"me-2\",\n    placeholder: \"Search\",\n    mdxType: \"CFormInput\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"success\",\n    variant: \"outline\",\n    mdxType: \"CButton\"\n  }, \"Search\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n    <CForm className=\\\"d-flex\\\">\\n      <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n      <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n        Search\\n      </CButton>\\n    </CForm>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"p\", null, \"Input groups work, too. If your navbar is an entire form, or mostly a form, you can use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CForm>\"), \" element as the container and save some HTML.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CForm, {\n    className: \"container-fluid\",\n    mdxType: \"CForm\"\n  }, mdx(CInputGroup, {\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"basic-addon1\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    placeholder: \"Username\",\n    \"aria-label\": \"Username\",\n    \"aria-describedby\": \"basic-addon1\",\n    mdxType: \"CFormInput\"\n  }))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CForm className=\\\"container-fluid\\\">\\n    <CInputGroup>\\n      <CInputGroupText id=\\\"basic-addon1\\\">@</CInputGroupText>\\n      <CFormInput placeholder=\\\"Username\\\" aria-label=\\\"Username\\\" aria-describedby=\\\"basic-addon1\\\" />\\n    </CInputGroup>\\n  </CForm>\\n</CNavbar>\\n\")), mdx(\"p\", null, \"Various buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CForm, {\n    className: \"container-fluid justify-content-start\",\n    mdxType: \"CForm\"\n  }, mdx(CButton, {\n    type: \"button\",\n    color: \"success\",\n    variant: \"outline\",\n    className: \"me-2\",\n    mdxType: \"CButton\"\n  }, \"Main button\"), mdx(CButton, {\n    type: \"button\",\n    color: \"secondary\",\n    variant: \"outline\",\n    size: \"sm\",\n    mdxType: \"CButton\"\n  }, \"Smaller button\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CForm className=\\\"container-fluid justify-content-start\\\">\\n    <CButton type=\\\"button\\\" color=\\\"success\\\" variant=\\\"outline\\\" className=\\\"me-2\\\">\\n      Main button\\n    </CButton>\\n    <CButton type=\\\"button\\\" color=\\\"secondary\\\" variant=\\\"outline\\\" size=\\\"sm\\\">\\n      Smaller button\\n    </CButton>\\n  </CForm>\\n</CNavbar>\\n\")), mdx(\"h3\", {\n    \"id\": \"text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Text\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#text\",\n    \"aria-label\": \"text permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Navbars may contain bits of text with the help of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarText>\"), \". This class adjusts vertical alignment and horizontal spacing for strings of text.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarText, {\n    mdxType: \"CNavbarText\"\n  }, \"Navbar text with an inline element\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarText>Navbar text with an inline element</CNavbarText>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"h2\", {\n    \"id\": \"color-schemes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Color schemes\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#color-schemes\",\n    \"aria-label\": \"color schemes permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Theming the navbar has never been easier thanks to the combination of theming classes and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background-color\"), \" utilities. Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme=\\\"light\\\"\"), \" for use with light background colors, or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"colorScheme=\\\"dark\\\"\"), \" for dark background colors. Then, customize with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".bg-*\"), \" utilities.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ColorSchemesExample, {\n    mdxType: \"ColorSchemesExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"dark\\\" className=\\\"bg-dark\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"light\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n    <br />\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"dark\\\" className=\\\"bg-primary\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"light\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n    <br />\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" style={{ backgroundColor: '#e3f2fd' }}>\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"primary\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"containers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Containers\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#containers\",\n    \"aria-label\": \"containers permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Although it's not required, you can wrap a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \" in a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CContainer>\"), \" to center it on a page\\u2013though note that an inner container is still required. Or you can add a container inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \" to only center the contents of a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#placement\"\n  }, \"fixed or static top navbar\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CContainer, {\n    mdxType: \"CContainer\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CContainer>\\n  <CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n    <CContainer fluid>\\n      <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n    </CContainer>\\n  </CNavbar>\\n</CContainer>\\n\")), mdx(\"p\", null, \"Use any of the responsive containers to change how wide the content in your navbar is presented.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    breakpoint: \"md\",\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Navbar\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer breakpoint=\\\"md\\\">\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"h2\", {\n    \"id\": \"placement\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Placement\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#placement\",\n    \"aria-label\": \"placement permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placement\"), \" properly to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: fixed\"), \", meaning they're pulled from the normal flow of the DOM and may require custom CSS (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"padding-top\"), \" on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<body>\"), \") to prevent overlap with other elements.\"), mdx(\"p\", null, \"Also note that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \".sticky-top\"), \" uses \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"position: sticky\"), \", which \", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://caniuse.com/css-sticky\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"isn't fully supported in every browser\")), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Default\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Default</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    placement: \"fixed-top\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Fixed top\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"fixed-top\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Fixed top</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    placement: \"fixed-bottom\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Fixed bottom\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"fixed-bottom\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Fixed bottom</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CNavbar, {\n    colorScheme: \"light\",\n    className: \"bg-light\",\n    placement: \"sticky-top\",\n    mdxType: \"CNavbar\"\n  }, mdx(CContainer, {\n    fluid: true,\n    mdxType: \"CContainer\"\n  }, mdx(CNavbarBrand, {\n    href: \"#\",\n    mdxType: \"CNavbarBrand\"\n  }, \"Sticky top\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"sticky-top\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Sticky top</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n\")), mdx(\"h2\", {\n    \"id\": \"responsive-behaviors\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Responsive behaviors\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#responsive-behaviors\",\n    \"aria-label\": \"responsive behaviors permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Navbars can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarToggler>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CCollapse>\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expand=\\\"{sm|md|lg|xl|xxl}\\\"\"), \" property to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.\"), mdx(\"p\", null, \"For navbars that never collapse, add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expand\"), \" boolean property on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \". For navbars that always collapse, don't add any property.\"), mdx(\"h3\", {\n    \"id\": \"toggler\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Toggler\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#toggler\",\n    \"aria-label\": \"toggler permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Navbar togglers are left-aligned by default, but should they follow a sibling element like a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarBrand>\"), \", they'll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.\"), mdx(\"p\", null, \"With no \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbarBrand>\"), \" shown at the smallest breakpoint:\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ResponsiveBehaviorsExample, {\n    mdxType: \"ResponsiveBehaviorsExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarBrand href=\\\"#\\\">Hidden brand</CNavbarBrand>\\n          <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"p\", null, \"With a brand name shown on the left and toggler on the right:\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ResponsiveBehaviorsExample2, {\n    mdxType: \"ResponsiveBehaviorsExample2\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"p\", null, \"With a toggler on the left and brand name on the right:\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ResponsiveBehaviorsExample3, {\n    mdxType: \"ResponsiveBehaviorsExample3\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n      <CContainer fluid>\\n        <CNavbarToggler\\n          aria-label=\\\"Toggle navigation\\\"\\n          aria-expanded={visible}\\n          onClick={() => setVisible(!visible)}\\n        />\\n        <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n        <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n          <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </CCollapse>\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"external-content\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"External content\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#external-content\",\n    \"aria-label\": \"external content permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Sometimes you want to use the collapse plugin to trigger a container element for content that structurally sits outside of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CNavbar>\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(ExternalContentExample, {\n    mdxType: \"ExternalContentExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CCollapse id=\\\"navbarToggleExternalContent\\\" visible={visible}>\\n      <div className=\\\"bg-dark p-4\\\">\\n        <h5 className=\\\"text-white h4\\\">Collapsed content</h5>\\n        <span className=\\\"text-medium-emphasis-inverse\\\">Toggleable via the navbar brand.</span>\\n      </div>\\n    </CCollapse>\\n    <CNavbar colorScheme=\\\"dark\\\" className=\\\"bg-dark\\\">\\n      <CContainer fluid>\\n        <CNavbarToggler\\n          aria-controls=\\\"navbarToggleExternalContent\\\"\\n          aria-label=\\\"Toggle navigation\\\"\\n          onClick={() => setVisible(!visible)}\\n        />\\n      </CContainer>\\n    </CNavbar>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"offcanvas\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Offcanvas\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#offcanvas\",\n    \"aria-label\": \"offcanvas permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Transform your expanding and collapsing navbar into an offcanvas drawer with the offcanvas plugin. We extend both the offcanvas default styles and use our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expand=\\\"*\\\"\"), \" prop to create a dynamic and flexible navigation sidebar.\"), mdx(\"p\", null, \"In the example below, to create an offcanvas navbar that is always collapsed across all breakpoints, omit the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expand=\\\"*\\\"\"), \" prop entirely.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(OffcanvasExample, {\n    mdxType: \"OffcanvasExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n    <CContainer fluid>\\n      <CNavbarToggler\\n        aria-controls=\\\"offcanvasNavbar\\\"\\n        aria-label=\\\"Toggle navigation\\\"\\n        onClick={() => setVisible(!visible)}\\n      />\\n      <COffcanvas id=\\\"offcanvasNavbar\\\" placement=\\\"end\\\" portal={false} visible={visible} onHide={() => setVisible(false)}>\\n        <COffcanvasHeader>\\n          <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n          <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n        </COffcanvasHeader>\\n        <COffcanvasBody>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </COffcanvasBody>\\n      </COffcanvas>\\n    </CContainer>\\n  </CNavbar>\\n)\\n\")), mdx(\"p\", null, \"To create an offcanvas navbar that expands into a normal navbar at a specific breakpoint like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"xxl\"), \", use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expand=\\\"xxl\\\"\"), \" property.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(OffcanvasExample2, {\n    mdxType: \"OffcanvasExample2\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" expand=\\\"xxl\\\">\\n    <CContainer fluid>\\n      <CNavbarToggler\\n        aria-controls=\\\"offcanvasNavbar2\\\"\\n        aria-label=\\\"Toggle navigation\\\"\\n        onClick={() => setVisible(!visible)}\\n      />\\n      <COffcanvas id=\\\"offcanvasNavbar2\\\" placement=\\\"end\\\" portal={false} visible={visible} onHide={() => setVisible(false)}>\\n        <COffcanvasHeader>\\n          <COffcanvasTitle>Offcanvas</COffcanvasTitle>\\n          <CCloseButton className=\\\"text-reset\\\" onClick={() => setVisible(false)} />\\n        </COffcanvasHeader>\\n        <COffcanvasBody>\\n          <CNavbarNav>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n            </CNavItem>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\">Link</CNavLink>\\n            </CNavItem>\\n            <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n              <CDropdownToggle color=\\\"secondary\\\">Dropdown button</CDropdownToggle>\\n              <CDropdownMenu>\\n                <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                <CDropdownDivider />\\n                <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n              </CDropdownMenu>\\n            </CDropdown>\\n            <CNavItem>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavItem>\\n          </CNavbarNav>\\n          <CForm className=\\\"d-flex\\\">\\n            <CFormInput type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n            <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n              Search\\n            </CButton>\\n          </CForm>\\n        </COffcanvasBody>\\n      </COffcanvas>\\n    </CContainer>\\n  </CNavbar>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"customizing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Customizing\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#customizing\",\n    \"aria-label\": \"customizing permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"css-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CSS variables\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#css-variables\",\n    \"aria-label\": \"css variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"React navbars use local CSS variables on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".navbar\"), \" for enhanced real-time customization. Values for the CSS variables are set via Sass, so Sass customization is still supported, too.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sass\"\n  }, \"--cui-navbar-padding-x: #{if($navbar-padding-x == null, 0, $navbar-padding-x)};\\n--cui-navbar-padding-y: #{$navbar-padding-y};\\n--cui-navbar-color: #{$navbar-light-color};\\n--cui-navbar-hover-color: #{$navbar-light-hover-color};\\n--cui-navbar-disabled-color: #{$navbar-light-disabled-color};\\n--cui-navbar-active-color: #{$navbar-light-active-color};\\n--cui-navbar-brand-padding-y: #{$navbar-brand-padding-y};\\n--cui-navbar-brand-margin-end: #{$navbar-brand-margin-end};\\n--cui-navbar-brand-font-size: #{$navbar-brand-font-size};\\n--cui-navbar-brand-color: #{$navbar-light-brand-color};\\n--cui-navbar-brand-hover-color: #{$navbar-light-brand-hover-color};\\n--cui-navbar-nav-link-padding-x: #{$navbar-nav-link-padding-x};\\n--cui-navbar-toggler-padding-y: #{$navbar-toggler-padding-y};\\n--cui-navbar-toggler-padding-x: #{$navbar-toggler-padding-x};\\n--cui-navbar-toggler-font-size: #{$navbar-toggler-font-size};\\n--cui-navbar-toggler-icon-bg: #{escape-svg($navbar-light-toggler-icon-bg)};\\n--cui-navbar-toggler-border-color: #{$navbar-light-toggler-border-color};\\n--cui-navbar-toggler-border-radius: #{$navbar-toggler-border-radius};\\n--cui-navbar-toggler-focus-width: #{$navbar-toggler-focus-width};\\n--cui-navbar-toggler-transition: #{$navbar-toggler-transition};\\n\")), mdx(\"p\", null, \"Some additional CSS variables are also present on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".navbar-nav\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sass\"\n  }, \"--cui-nav-link-padding-x: 0;\\n--cui-nav-link-padding-y: #{$nav-link-padding-y};\\n--cui-nav-link-color: var(--cui-navbar-color);\\n--cui-nav-link-hover-color: var(--cui-navbar-hover-color);\\n--cui-nav-link-disabled-color: var(--cui-navbar-disabled-color);\\n\")), mdx(\"h4\", {\n    \"id\": \"how-to-use-css-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"How to use CSS variables\", mdx(\"a\", {\n    parentName: \"h4\",\n    \"href\": \"#how-to-use-css-variables\",\n    \"aria-label\": \"how to use css variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const vars = { \\n  '--my-css-var': 10,\\n  '--my-another-css-var': \\\"red\\\" \\n}\\nreturn <CNavbar style={vars}>...</CNavbar>\\n\")), mdx(\"h3\", {\n    \"id\": \"sass-variables\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"SASS variables\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#sass-variables\",\n    \"aria-label\": \"sass variables permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sass\"\n  }, \"$navbar-padding-y:                  $spacer * .5;\\n$navbar-padding-x:                  null;\\n\\n$navbar-nav-link-padding-x:         .5rem;\\n\\n$navbar-brand-font-size:            $font-size-lg;\\n// Compute the navbar-brand padding-y so the navbar-brand will have the same height as navbar-text and nav-link\\n$nav-link-height:                   $font-size-base * $line-height-base + $nav-link-padding-y * 2;\\n$navbar-brand-height:               $navbar-brand-font-size * $line-height-base;\\n$navbar-brand-padding-y:            ($nav-link-height - $navbar-brand-height) * .5;\\n$navbar-brand-margin-end:           1rem;\\n\\n$navbar-toggler-padding-y:          .25rem;\\n$navbar-toggler-padding-x:          .75rem;\\n$navbar-toggler-font-size:          $font-size-lg;\\n$navbar-toggler-border-radius:      $btn-border-radius;\\n$navbar-toggler-focus-width:        $btn-focus-width;\\n$navbar-toggler-transition:         box-shadow .15s ease-in-out;\\n\\n$navbar-dark-color:                 $medium-emphasis-inverse;\\n$navbar-dark-hover-color:           $high-emphasis-inverse;\\n$navbar-dark-active-color:          $high-emphasis-inverse;\\n$navbar-dark-disabled-color:        $disabled-inverse;\\n$navbar-dark-toggler-icon-bg:       url(\\\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-dark-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>\\\");\\n$navbar-dark-toggler-border-color:  rgba($white, .1);\\n\\n$navbar-light-color:                $medium-emphasis;\\n$navbar-light-hover-color:          $high-emphasis;\\n$navbar-light-active-color:         $high-emphasis;\\n$navbar-light-disabled-color:       $disabled;\\n$navbar-light-toggler-icon-bg:      url(\\\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 30 30'><path stroke='#{$navbar-light-color}' stroke-linecap='round' stroke-miterlimit='10' stroke-width='2' d='M4 7h22M4 15h22M4 23h22'/></svg>\\\");\\n$navbar-light-toggler-border-color: rgba($black, .1);\\n\\n$navbar-light-brand-color:                $navbar-light-active-color;\\n$navbar-light-brand-hover-color:          $navbar-light-active-color;\\n$navbar-dark-brand-color:                 $navbar-dark-active-color;\\n$navbar-dark-brand-hover-color:           $navbar-dark-active-color;\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cnavbar\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CNavbar\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cnavbar\",\n    \"aria-label\": \"cnavbar permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CNavbar } from '@coreui/react'\\n// or\\nimport CNavbar from '@coreui/react-pro/src/components/navbar/CNavbar'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"color\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets the color context of the component to one of CoreUI\\u2019s themed colors.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'primary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'secondary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'success'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'danger'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'warning'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'info'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'dark'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'light'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"colorScheme\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets if the color of text should be colored for a light or dark dark background.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'dark'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'light'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"container\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Defines optional container wrapping children elements.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sm'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'md'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'lg'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xl'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xxl'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'fluid'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"expand\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Defines the responsive breakpoint to determine when content collapses.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sm'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'md'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'lg'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xl'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'xxl'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"placement\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Place component in non-static positions.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'fixed-top'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'fixed-bottom'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'sticky-top'\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cnavbarbrand\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CNavbarBrand\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cnavbarbrand\",\n    \"aria-label\": \"cnavbarbrand permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CNavbarBrand } from '@coreui/react'\\n// or\\nimport CNavbarBrand from '@coreui/react-pro/src/components/navbar/CNavbarBrand'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"href\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"The href attribute specifies the URL of the page the link goes to.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cnavbarnav\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CNavbarNav\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cnavbarnav\",\n    \"aria-label\": \"cnavbarnav permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CNavbarNav } from '@coreui/react'\\n// or\\nimport CNavbarNav from '@coreui/react-pro/src/components/navbar/CNavbarNav'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cnavbartext\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CNavbarText\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cnavbartext\",\n    \"aria-label\": \"cnavbartext permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CNavbarText } from '@coreui/react'\\n// or\\nimport CNavbarText from '@coreui/react-pro/src/components/navbar/CNavbarText'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cnavbartoggler\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CNavbarToggler\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cnavbartoggler\",\n    \"aria-label\": \"cnavbartoggler permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CNavbarToggler } from '@coreui/react'\\n// or\\nimport CNavbarToggler from '@coreui/react-pro/src/components/navbar/CNavbarToggler'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Navbar Component","description":"Documentation and examples for the React navbar powerful, responsive navigation header component. Includes support for branding, links, dropdowns, and more.","name":"Navbar","route":"/components/navbar"},"tableOfContents":{"items":[{"url":"#supported-content","title":"Supported content"},{"url":"#basic-usage","title":"Basic usage","items":[{"url":"#brand","title":"Brand"},{"url":"#nav","title":"Nav"},{"url":"#forms","title":"Forms"},{"url":"#text","title":"Text"}]},{"url":"#color-schemes","title":"Color schemes"},{"url":"#containers","title":"Containers"},{"url":"#placement","title":"Placement"},{"url":"#responsive-behaviors","title":"Responsive behaviors","items":[{"url":"#toggler","title":"Toggler"},{"url":"#external-content","title":"External content"},{"url":"#offcanvas","title":"Offcanvas"}]},{"url":"#customizing","title":"Customizing","items":[{"url":"#css-variables","title":"CSS variables"},{"url":"#sass-variables","title":"SASS variables"}]},{"url":"#api","title":"API","items":[{"url":"#cnavbar","title":"CNavbar"},{"url":"#cnavbarbrand","title":"CNavbarBrand"},{"url":"#cnavbarnav","title":"CNavbarNav"},{"url":"#cnavbartext","title":"CNavbarText"},{"url":"#cnavbartoggler","title":"CNavbarToggler"}]}]}}},"pageContext":{"id":"3878aa29-7acb-5e1f-a547-fc3e7b7866fb"}},"staticQueryHashes":["4202924991"]}