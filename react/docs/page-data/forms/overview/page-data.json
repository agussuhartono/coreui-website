{"componentChunkName":"component---src-templates-docs-tsx","path":"/forms/overview/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"29a24622-0268-556b-b0fe-0a03750c4af5","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Form Components\",\n  \"name\": \"Overview\",\n  \"description\": \"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.\",\n  \"menu\": \"Forms\",\n  \"route\": \"/forms/overview\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overview\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"CoreUI\\u2019s form controls expand on our Rebooted form styles with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.\"), mdx(\"p\", null, \"Be sure to use an appropriate \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type\"), \" attribute on all inputs (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"email\"), \" for email address or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"number\"), \" for numerical information) to take advantage of newer input controls like email verification, number selection, and more.\"), mdx(\"p\", null, \"Here\\u2019s a quick example to demonstrate CoreUI\\u2019s form styles. Keep reading for documentation on required classes, form layout, and more.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    mdxType: \"CForm\"\n  }, mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"exampleInputEmail1\",\n    mdxType: \"CFormLabel\"\n  }, \"Email address\"), mdx(CFormInput, {\n    type: \"email\",\n    id: \"exampleInputEmail1\",\n    \"aria-describedby\": \"emailHelp\",\n    mdxType: \"CFormInput\"\n  }), mdx(CFormText, {\n    id: \"emailHelp\",\n    mdxType: \"CFormText\"\n  }, \"We'll never share your email with anyone else.\")), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"exampleInputPassword1\",\n    mdxType: \"CFormLabel\"\n  }, \"Email Password\"), mdx(CFormInput, {\n    type: \"password\",\n    id: \"exampleInputPassword1\",\n    mdxType: \"CFormInput\"\n  })), mdx(CFormCheck, {\n    className: \"mb-3\",\n    label: \"Check me out\",\n    onChange: function onChange(e) {\n      console.log(e.target);\n    },\n    mdxType: \"CFormCheck\"\n  }), mdx(CButton, {\n    type: \"submit\",\n    color: \"primary\",\n    mdxType: \"CButton\"\n  }, \"Submit\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"exampleInputEmail1\\\">Email address</CFormLabel>\\n    <CFormInput type=\\\"email\\\" id=\\\"exampleInputEmail1\\\" aria-describedby=\\\"emailHelp\\\" />\\n    <CFormText id=\\\"emailHelp\\\">We'll never share your email with anyone else.</CFormText>\\n  </div>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"exampleInputPassword1\\\">Email Password</CFormLabel>\\n    <CFormInput type=\\\"password\\\" id=\\\"exampleInputPassword1\\\" />\\n  </div>\\n  <CFormCheck\\n    className=\\\"mb-3\\\"\\n    label=\\\"Check me out\\\"\\n    onChange={(e) => {\\n      console.log(e.target)\\n    }}\\n  />\\n  <CButton type=\\\"submit\\\" color=\\\"primary\\\">\\n    Submit\\n  </CButton>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"form-text\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Form text\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#form-text\",\n    \"aria-label\": \"form text permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Block-level or inline-level form text can be created using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CFormText>\"), \".\"), mdx(\"p\", null, \"Associating form text with form controls\\nForm text should be explicitly associated with the form control it relates to using the aria-describedby attribute. This will ensure that assistive technologies\\u2014such as screen readers\\u2014will announce this form text when the user focuses or enters the control.\"), mdx(\"p\", null, \"Form text below inputs can be styled with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CFormText>\"), \". If a block-level element will be used, a top margin is added for easy spacing from the inputs above.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    mdxType: \"CForm\"\n  }, mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"inputPassword5\",\n    mdxType: \"CFormLabel\"\n  }, \"Password\"), mdx(CFormInput, {\n    type: \"password\",\n    id: \"inputPassword5\",\n    \"aria-describedby\": \"passwordHelpBlock\",\n    mdxType: \"CFormInput\"\n  }), mdx(CFormText, {\n    id: \"passwordHelpBlock\",\n    mdxType: \"CFormText\"\n  }, \"Your password must be 8-20 characters long, contain letters and numbers, and must not contain spaces, special characters, or emoji.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"inputPassword5\\\">Password</CFormLabel>\\n    <CFormInput type=\\\"password\\\" id=\\\"inputPassword5\\\" aria-describedby=\\\"passwordHelpBlock\\\" />\\n    <CFormText id=\\\"passwordHelpBlock\\\">\\n      Your password must be 8-20 characters long, contain letters and numbers, and must not\\n      contain spaces, special characters, or emoji.\\n    </CFormText>\\n  </div>\\n</CForm>\\n\")), mdx(\"p\", null, \"Inline text can use any typical inline HTML element (be it a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<span>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<small>\"), \", or something else) with nothing more than the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".form-text\"), \" class.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CRow, {\n    className: \"g-3 align-items-center\",\n    mdxType: \"CRow\"\n  }, mdx(CCol, {\n    xs: \"auto\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"inputPassword6\",\n    className: \"col-form-label\",\n    mdxType: \"CFormLabel\"\n  }, \"Password\")), mdx(CCol, {\n    xs: \"auto\",\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"password\",\n    id: \"inputPassword6\",\n    \"aria-describedby\": \"passwordHelpInline\",\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    xs: \"auto\",\n    mdxType: \"CCol\"\n  }, mdx(CFormText, {\n    component: \"span\",\n    id: \"passwordHelpInline\",\n    mdxType: \"CFormText\"\n  }, \"Must be 8-20 characters long.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CRow className=\\\"g-3 align-items-center\\\">\\n  <CCol xs=\\\"auto\\\">\\n    <CFormLabel htmlFor=\\\"inputPassword6\\\" className=\\\"col-form-label\\\">\\n      Password\\n    </CFormLabel>\\n  </CCol>\\n  <CCol xs=\\\"auto\\\">\\n    <CFormInput type=\\\"password\\\" id=\\\"inputPassword6\\\" aria-describedby=\\\"passwordHelpInline\\\" />\\n  </CCol>\\n  <CCol xs=\\\"auto\\\">\\n    <CFormText component=\\\"span\\\" id=\\\"passwordHelpInline\\\">\\n      Must be 8-20 characters long.\\n    </CFormText>\\n  </CCol>\\n</CRow>\\n\")), mdx(\"h2\", {\n    \"id\": \"disabled-forms\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Disabled forms\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#disabled-forms\",\n    \"aria-label\": \"disabled forms permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" boolean attribute on an input to prevent user interactions and make it appear lighter.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel id=\\\"disabledInput\\\" type=\\\"text\\\" placeholder=\\\"Disabled input here...\\\" disabled />\\n\")), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" attribute to a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset>\"), \" to disable all the controls within. Browsers treat all native form controls (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input>\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<select>\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<button>\"), \" elements) inside a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<fieldset disabled>\"), \" as disabled, preventing both keyboard and mouse interactions on them.\"), mdx(\"p\", null, \"However, if your form also includes custom button-like elements such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CButton>...</CButton>\"), \", these will only be given a style of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pointer-events: none\"), \", meaning they are still focusable and operable using the keyboard. In this case, you must manually modify these controls by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tabindex=\\\"-1\\\"\"), \" to prevent them from receiving focus and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-disabled=\\\"disabled\\\"\"), \" to signal their state to assistive technologies.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    mdxType: \"CForm\"\n  }, mdx(\"fieldset\", {\n    disabled: true\n  }, mdx(\"legend\", null, \"Disabled fieldset example\"), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"disabledTextInput\",\n    mdxType: \"CFormLabel\"\n  }, \"Disabled input\"), mdx(CFormInput, {\n    id: \"disabledTextInput\",\n    placeholder: \"Disabled input\",\n    mdxType: \"CFormInput\"\n  })), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"disabledSelect\",\n    mdxType: \"CFormLabel\"\n  }, \"Disabled select menu\"), mdx(CFormSelect, {\n    id: \"disabledSelect\",\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", null, \"Disabled select\"))), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormCheck, {\n    id: \"disabledFieldsetCheck\",\n    label: \"Can't check this\",\n    disabled: true,\n    mdxType: \"CFormCheck\"\n  })), mdx(CButton, {\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm>\\n  <fieldset disabled>\\n    <legend>Disabled fieldset example</legend>\\n    <div className=\\\"mb-3\\\">\\n      <CFormLabel htmlFor=\\\"disabledTextInput\\\">Disabled input</CFormLabel>\\n      <CFormInput id=\\\"disabledTextInput\\\" placeholder=\\\"Disabled input\\\" />\\n    </div>\\n    <div className=\\\"mb-3\\\">\\n      <CFormLabel htmlFor=\\\"disabledSelect\\\">Disabled select menu</CFormLabel>\\n      <CFormSelect id=\\\"disabledSelect\\\">\\n        <option>Disabled select</option>\\n      </CFormSelect>\\n    </div>\\n    <div className=\\\"mb-3\\\">\\n      <CFormCheck id=\\\"disabledFieldsetCheck\\\" label=\\\"Can't check this\\\" disabled />\\n    </div>\\n    <CButton type=\\\"submit\\\">Submit</CButton>\\n  </fieldset>\\n</CForm>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Form Components","description":"Examples and usage guidelines for form control styles, layout options, and custom components for creating a wide variety of forms.","name":"Overview","route":"/forms/overview"},"tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#form-text","title":"Form text"},{"url":"#disabled-forms","title":"Disabled forms"}]}}},"pageContext":{"id":"29a24622-0268-556b-b0fe-0a03750c4af5"}},"staticQueryHashes":["4202924991"]}