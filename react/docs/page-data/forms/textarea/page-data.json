{"componentChunkName":"component---src-templates-docs-tsx","path":"/forms/textarea/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"f882743b-5c07-5f9b-9ccf-cad4422571eb","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Form Text Component\",\n  \"name\": \"Form control\",\n  \"description\": \"React textarea components. Give textual form `<textarea>`s an upgrade with custom styles, sizing, focus states, validation, and more.\",\n  \"menu\": \"Forms\",\n  \"route\": \"/forms/textarea\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Example\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormTextarea, {\n    id: \"exampleFormControlTextarea1\",\n    label: \"Example textarea\",\n    rows: \"3\",\n    text: \"Must be 8-20 words long.\",\n    mdxType: \"CFormTextarea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm>\\n  <CFormTextarea\\n    id=\\\"exampleFormControlTextarea1\\\"\\n    label=\\\"Example textarea\\\"\\n    rows=\\\"3\\\"\\n    text=\\\"Must be 8-20 words long.\\\"\\n  ></CFormTextarea>\\n</CForm>\\n\")), mdx(\"p\", null, \"If you need to add custom classNames to form's components, or need to add some custom elements you can add each form component separately. Please check the example below.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel htmlFor=\\\"exampleFormControlTextarea1\\\">Example textarea</CFormLabel>\\n<CFormTextarea id=\\\"exampleFormControlTextarea1\\\" rows=\\\"3\\\"></CFormTextarea>\\n<CFormText component=\\\"span\\\" id=\\\"passwordHelpInline\\\">Must be 8-20 words long.</CFormText>\\n\")), mdx(\"h2\", {\n    \"id\": \"disabled\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Disabled\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#disabled\",\n    \"aria-label\": \"disabled permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" boolean attribute on an textarea to give it a grayed out appearance and remove pointer events.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormTextarea, {\n    className: \"mb-3\",\n    placeholder: \"Disabled textarea\",\n    \"aria-label\": \"Disabled textarea example\",\n    disabled: true,\n    mdxType: \"CFormTextarea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormTextarea\\n  className=\\\"mb-3\\\"\\n  placeholder=\\\"Disabled textarea\\\"\\n  aria-label=\\\"Disabled textarea example\\\"\\n  disabled\\n></CFormTextarea>\\n\")), mdx(\"h2\", {\n    \"id\": \"readonly\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Readonly\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#readonly\",\n    \"aria-label\": \"readonly permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"readOnly\"), \" boolean attribute on an textarea to prevent modification of the textarea's value. Read-only textareas appear lighter (just like disabled textareas), but retain the standard cursor.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormTextarea, {\n    placeholder: \"Readonly textarea\",\n    \"aria-label\": \"Readonly textarea example\",\n    disabled: true,\n    readOnly: true,\n    mdxType: \"CFormTextarea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormTextarea\\n  placeholder=\\\"Readonly textarea\\\"\\n  aria-label=\\\"Readonly textarea example\\\"\\n  disabled\\n  readOnly\\n></CFormTextarea>\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cformtextarea\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CFormTextarea\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cformtextarea\",\n    \"aria-label\": \"cformtextarea permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CFormTextarea } from '@coreui/react'\\n// or\\nimport CFormTextarea from '@coreui/react/src/components/form/CFormTextarea'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the disabled state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"feedback\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Provide valuable, actionable feedback.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"feedbackInvalid\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Provide valuable, actionable feedback.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"feedbackValid\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \":invalid\"), \" and \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \":valid\"), \".\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"floatingLabel\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \":invalid\"), \" and \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \":valid\"), \".\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"invalid\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set component validation state to invalid.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"label\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Add a caption for a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Method called immediately after the \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"value\"), \" prop changes.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ChangeEventHandler<HTMLTextAreaElement>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"plainText\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"readonly\"), \".\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"readOnly\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the readonly state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"text\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Add helper text to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"tooltipFeedback\"), \" \", mdx(\"br\", {\n    parentName: \"td\"\n  }), mdx(\"div\", {\n    parentName: \"td\",\n    \"className\": \"badge bg-primary\"\n  }, \"4.2.0+\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Display validation feedback in a styled tooltip.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"valid\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set component validation state to valid.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"The \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"value\"), \" attribute of component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string[]\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cformfeedback\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CFormFeedback\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cformfeedback\",\n    \"aria-label\": \"cformfeedback permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CFormFeedback } from '@coreui/react'\\n// or\\nimport CFormFeedback from '@coreui/react/src/components/form/CFormFeedback'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"invalid\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Method called immediately after the \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"value\"), \" prop changes.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"tooltip\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"If your form layout allows it, you can display validation feedback in a styled tooltip.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"valid\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set component validation state to valid.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cformlabel\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CFormLabel\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cformlabel\",\n    \"aria-label\": \"cformlabel permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CFormLabel } from '@coreui/react'\\n// or\\nimport CFormLabel from '@coreui/react/src/components/form/CFormLabel'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"customClassName\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want to be applied to the component, and override standard className value.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cformtext\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CFormText\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cformtext\",\n    \"aria-label\": \"cformtext permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CFormText } from '@coreui/react'\\n// or\\nimport CFormText from '@coreui/react/src/components/form/CFormText'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Form Text Component","description":"React textarea components. Give textual form `<textarea>`s an upgrade with custom styles, sizing, focus states, validation, and more.","name":"Form control","route":"/forms/textarea"},"tableOfContents":{"items":[{"url":"#example","title":"Example"},{"url":"#disabled","title":"Disabled"},{"url":"#readonly","title":"Readonly"},{"url":"#api","title":"API","items":[{"url":"#cformtextarea","title":"CFormTextarea"},{"url":"#cformfeedback","title":"CFormFeedback"},{"url":"#cformlabel","title":"CFormLabel"},{"url":"#cformtext","title":"CFormText"}]}]}}},"pageContext":{"id":"f882743b-5c07-5f9b-9ccf-cad4422571eb"}},"staticQueryHashes":["4202924991"]}