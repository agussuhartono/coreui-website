{"componentChunkName":"component---src-templates-docs-tsx","path":"/forms/validation/","result":{"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"c8b97e2b-ac01-57e3-9bbd-7b5a9c6ad41f","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar CustomStylesExample = function CustomStylesExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      validated = _useState2[0],\n      setValidated = _useState2[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    defaultValue: \"Mark\",\n    feedbackValid: \"Looks good!\",\n    id: \"validationCustom01\",\n    label: \"First name\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    defaultValue: \"Otto\",\n    feedbackValid: \"Looks good!\",\n    id: \"validationCustom02\",\n    label: \"First name\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustomUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"inputGroupPrependFeedback\",\n    feedbackValid: \"Please choose a username.\",\n    id: \"validationCustomUsername\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"validationCustom03Feedback\",\n    feedbackInvalid: \"Please provide a valid city.\",\n    id: \"validationCustom03\",\n    label: \"City\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormSelect, {\n    \"aria-describedby\": \"validationCustom04Feedback\",\n    feedbackInvalid: \"Please select a valid state.\",\n    id: \"validationCustom04\",\n    label: \"State\",\n    required: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    selected: \"\",\n    disabled: \"\",\n    value: \"\"\n  }, \"Choose...\"), mdx(\"option\", null, \"...\"))), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"validationCustom05Feedback\",\n    feedbackInvalid: \"Please provide a valid zip.\",\n    id: \"validationCustom05\",\n    label: \"Zip\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"You must agree before submitting.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")));\n};\n\nvar TooltipsExample = function TooltipsExample() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validated = _useState4[0],\n      setValidated = _useState4[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    defaultValue: \"Mark\",\n    feedbackValid: \"Looks good!\",\n    id: \"validationTooltip01\",\n    label: \"First name\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    defaultValue: \"Otto\",\n    feedbackValid: \"Looks good!\",\n    id: \"validationTooltip02\",\n    label: \"First name\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltipUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"inputGroupPrependFeedback\",\n    feedbackInvalid: \"Please choose a username.\",\n    id: \"validationTooltipUsername\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormInput\"\n  }))), mdx(CCol, {\n    md: 6,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"validationTooltip03Feedback\",\n    feedbackInvalid: \"Please provide a valid city.\",\n    id: \"validationTooltip03\",\n    label: \"City\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 3,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormSelect, {\n    \"aria-describedby\": \"validationTooltip04Feedback\",\n    feedbackInvalid: \"Please select a valid state.\",\n    id: \"validationTooltip04\",\n    label: \"State\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    selected: \"\",\n    disabled: \"\",\n    value: \"\"\n  }, \"Choose...\"), mdx(\"option\", null, \"...\"))), mdx(CCol, {\n    md: 3,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    \"aria-describedby\": \"validationTooltip05Feedback\",\n    feedbackInvalid: \"Please provide a valid zip.\",\n    id: \"validationTooltip05\",\n    label: \"Zip\",\n    required: true,\n    tooltipFeedback: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    xs: 12,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Form Validation\",\n  \"name\": \"Validation\",\n  \"description\": \"Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.\",\n  \"menu\": \"Forms\",\n  \"route\": \"/forms/validation\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  CustomStylesExample: CustomStylesExample,\n  TooltipsExample: TooltipsExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Example\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"For custom CoreUI form validation messages, you'll need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noValidate\"), \" boolean property to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CForm>\"), \". This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you'll see the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":invalid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":valid\"), \" styles applied to your form controls.\"), mdx(\"p\", null, \"Custom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CustomStylesExample, {\n    mdxType: \"CustomStylesExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [validated, setValidated] = useState(false)\\nconst handleSubmit = (event) => {\\n  const form = event.currentTarget\\n  if (form.checkValidity() === false) {\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n  setValidated(true)\\n}\\nreturn (\\n  <CForm\\n    className=\\\"row g-3 needs-validation\\\"\\n    noValidate\\n    validated={validated}\\n    onSubmit={handleSubmit}\\n  >\\n    <CCol md={4}>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        defaultValue=\\\"Mark\\\"\\n        feedbackValid=\\\"Looks good!\\\"\\n        id=\\\"validationCustom01\\\"\\n        label=\\\"First name\\\"\\n        required\\n      />\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        defaultValue=\\\"Otto\\\"\\n        feedbackValid=\\\"Looks good!\\\"\\n        id=\\\"validationCustom02\\\"\\n        label=\\\"First name\\\"\\n        required\\n      />\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationCustomUsername\\\">Username</CFormLabel>\\n      <CInputGroup className=\\\"has-validation\\\">\\n        <CInputGroupText>@</CInputGroupText>\\n        <CFormInput\\n          type=\\\"text\\\"\\n          aria-describedby=\\\"inputGroupPrependFeedback\\\"\\n          feedbackValid=\\\"Please choose a username.\\\"\\n          id=\\\"validationCustomUsername\\\"\\n          required\\n        />\\n      </CInputGroup>\\n    </CCol>\\n    <CCol md={6}>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        aria-describedby=\\\"validationCustom03Feedback\\\"\\n        feedbackInvalid=\\\"Please provide a valid city.\\\"\\n        id=\\\"validationCustom03\\\"\\n        label=\\\"City\\\"\\n        required\\n      />\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormSelect\\n        aria-describedby=\\\"validationCustom04Feedback\\\"\\n        feedbackInvalid=\\\"Please select a valid state.\\\"\\n        id=\\\"validationCustom04\\\"\\n        label=\\\"State\\\"\\n        required\\n      >\\n        <option disabled>Choose...</option>\\n        <option>...</option>\\n      </CFormSelect>\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        aria-describedby=\\\"validationCustom05Feedback\\\"\\n        feedbackInvalid=\\\"Please provide a valid zip.\\\"\\n        id=\\\"validationCustom05\\\"\\n        label=\\\"Zip\\\"\\n        required\\n      />\\n    </CCol>\\n    <CCol xs={12}>\\n      <CFormCheck\\n        type=\\\"checkbox\\\"\\n        id=\\\"invalidCheck\\\"\\n        label=\\\"Agree to terms and conditions\\\"\\n        required\\n      />\\n      <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\\n    </CCol>\\n    <CCol xs={12}>\\n      <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n        Submit form\\n      </CButton>\\n    </CCol>\\n  </CForm>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"browser-defaults\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Browser defaults\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#browser-defaults\",\n    \"aria-label\": \"browser defaults permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Not interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you'll see a slightly different style of feedback.\"), mdx(\"p\", null, \"While these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    className: \"row g-3\",\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault01\",\n    label: \"First name\",\n    defaultValue: \"Mark\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault02\",\n    label: \"Last name\",\n    defaultValue: \"Otto\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefaultUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend02\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefaultUsername\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend02\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault03\",\n    label: \"City\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormSelect, {\n    id: \"validationDefault04\",\n    label: \"State\",\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true\n  }, \"Choose...\"), mdx(\"option\", null, \"...\"))), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault05\",\n    label: \"Zip\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  })), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm className=\\\"row g-3\\\">\\n  <CCol md={4}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationDefault01\\\"\\n      label=\\\"First name\\\"\\n      defaultValue=\\\"Mark\\\"\\n      required\\n    />\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationDefault02\\\"\\n      label=\\\"Last name\\\"\\n      defaultValue=\\\"Otto\\\"\\n      required\\n    />\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormLabel htmlFor=\\\"validationDefaultUsername\\\">Username</CFormLabel>\\n    <CInputGroup>\\n      <CInputGroupText id=\\\"inputGroupPrepend02\\\">@</CInputGroupText>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        id=\\\"validationDefaultUsername\\\"\\n        defaultValue=\\\"\\\"\\n        aria-describedby=\\\"inputGroupPrepend02\\\"\\n        required\\n      />\\n    </CInputGroup>\\n  </CCol>\\n  <CCol md={6}>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationDefault03\\\" label=\\\"City\\\" required />\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormSelect id=\\\"validationDefault04\\\" label=\\\"State\\\">\\n      <option disabled>Choose...</option>\\n      <option>...</option>\\n    </CFormSelect>\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationDefault05\\\" label=\\\"Zip\\\" required />\\n  </CCol>\\n  <CCol xs={12}>\\n    <CFormCheck type=\\\"checkbox\\\" id=\\\"invalidCheck\\\" label=\\\"Agree to terms and conditions\\\" required />\\n  </CCol>\\n  <CCol xs={12}>\\n    <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n      Submit form\\n    </CButton>\\n  </CCol>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-validation\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom validation\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-validation\",\n    \"aria-label\": \"custom validation permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"In case you require custom or server-side validation, you can indicate invalid and valid form fields with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"invalid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"valid\"), \" boolean properties.\"), mdx(\"p\", null, \"For invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-describedby\"), \" (noting that this attribute allows more than one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to be referenced, in case the field already points to additional form text).\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    className: \"row g-3\",\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer01\",\n    label: \"Email\",\n    feedback: \"Looks good!\",\n    defaultValue: \"name@surname.com\",\n    valid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer02\",\n    label: \"Repeat email\",\n    feedback: \"Looks good!\",\n    defaultValue: \"name@surname.com\",\n    valid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServerUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend03\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServerUsername\",\n    feedback: \"Please choose a username.\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend03\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer03\",\n    label: \"City\",\n    feedback: \"Please provide a valid city.\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormSelect, {\n    id: \"validationServer04\",\n    label: \"State\",\n    feedback: \"Please provide a valid city.\",\n    invalid: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true\n  }, \"Choose...\"), mdx(\"option\", null, \"...\"))), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer05\",\n    label: \"zip\",\n    feedback: \"Please provide a valid zip.\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"You must agree before submitting.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm className=\\\"row g-3\\\">\\n  <CCol md={4}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationServer01\\\"\\n      label=\\\"Email\\\"\\n      feedback=\\\"Looks good!\\\"\\n      defaultValue=\\\"name@surname.com\\\"\\n      valid\\n      required\\n    />\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationServer02\\\"\\n      label=\\\"Repeat email\\\"\\n      feedback=\\\"Looks good!\\\"\\n      defaultValue=\\\"name@surname.com\\\"\\n      valid\\n      required\\n    />\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormLabel htmlFor=\\\"validationServerUsername\\\">Username</CFormLabel>\\n    <CInputGroup className=\\\"has-validation\\\">\\n      <CInputGroupText id=\\\"inputGroupPrepend03\\\">@</CInputGroupText>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        id=\\\"validationServerUsername\\\"\\n        feedback=\\\"Please choose a username.\\\"\\n        defaultValue=\\\"\\\"\\n        aria-describedby=\\\"inputGroupPrepend03\\\"\\n        invalid\\n        required\\n      />\\n    </CInputGroup>\\n  </CCol>\\n  <CCol md={6}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationServer03\\\"\\n      label=\\\"City\\\"\\n      feedback=\\\"Please provide a valid city.\\\"\\n      invalid\\n      required\\n    />\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormSelect\\n      id=\\\"validationServer04\\\"\\n      label=\\\"State\\\"\\n      feedback=\\\"Please provide a valid city.\\\"\\n      invalid\\n    >\\n      <option disabled>Choose...</option>\\n      <option>...</option>\\n    </CFormSelect>\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormInput\\n      type=\\\"text\\\"\\n      id=\\\"validationServer05\\\"\\n      label=\\\"zip\\\"\\n      feedback=\\\"Please provide a valid zip.\\\"\\n      invalid\\n      required\\n    />\\n  </CCol>\\n  <CCol xs={12}>\\n    <CFormCheck\\n      type=\\\"checkbox\\\"\\n      id=\\\"invalidCheck\\\"\\n      label=\\\"Agree to terms and conditions\\\"\\n      invalid\\n      required\\n    />\\n    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\\n  </CCol>\\n  <CCol xs={12}>\\n    <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n      Submit form\\n    </CButton>\\n  </CCol>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"supported-elements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Supported elements\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#supported-elements\",\n    \"aria-label\": \"supported elements permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Validation styles are available for the following form controls and components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormCheck>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormInput>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormSelect>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormTextarea>\"), \"s\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    validated: true,\n    mdxType: \"CForm\"\n  }, mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormTextarea, {\n    feedbackInvalid: \"Please enter a message in the textarea.\",\n    id: \"validationTextarea\",\n    label: \"Textarea\",\n    placeholder: \"Required example textarea\",\n    required: true,\n    mdxType: \"CFormTextarea\"\n  })), mdx(CFormCheck, {\n    className: \"mb-3\",\n    id: \"validationFormCheck1\",\n    label: \"Check this checkbox\",\n    feedbackInvalid: \"Example invalid feedback text\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormCheck, {\n    type: \"radio\",\n    name: \"radio-stacked\",\n    id: \"validationFormCheck2\",\n    label: \"Check this checkbox\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormCheck, {\n    className: \"mb-3\",\n    type: \"radio\",\n    name: \"radio-stacked\",\n    id: \"validationFormCheck3\",\n    label: \"Or toggle this other radio\",\n    feedbackInvalid: \"More example invalid feedback text\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormSelect, {\n    feedbackInvalid: \"Example invalid select feedback\",\n    \"aria-label\": \"select example\",\n    required: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    selected: \"\",\n    value: \"\"\n  }, \"Open this select menu\"), mdx(\"option\", {\n    value: \"1\"\n  }, \"One\"), mdx(\"option\", {\n    value: \"2\"\n  }, \"Two\"), mdx(\"option\", {\n    value: \"3\"\n  }, \"Three\"))), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormInput, {\n    type: \"file\",\n    id: \"validationTextarea\",\n    feedbackInvalid: \"Example invalid form file feedback\",\n    \"aria-label\": \"file example\",\n    required: true,\n    mdxType: \"CFormInput\"\n  })), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CButton, {\n    type: \"submit\",\n    color: \"primary\",\n    disabled: true,\n    mdxType: \"CButton\"\n  }, \"Submit form\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm validated={true}>\\n  <div className=\\\"mb-3\\\">\\n    <CFormTextarea\\n      feedbackInvalid=\\\"Please enter a message in the textarea.\\\"\\n      id=\\\"validationTextarea\\\"\\n      label=\\\"Textarea\\\"\\n      placeholder=\\\"Required example textarea\\\"\\n      required\\n    ></CFormTextarea>\\n  </div>\\n  <CFormCheck\\n    className=\\\"mb-3\\\"\\n    id=\\\"validationFormCheck1\\\"\\n    label=\\\"Check this checkbox\\\"\\n    feedbackInvalid=\\\"Example invalid feedback text\\\"\\n    required\\n  />\\n  <CFormCheck\\n    type=\\\"radio\\\"\\n    name=\\\"radio-stacked\\\"\\n    id=\\\"validationFormCheck2\\\"\\n    label=\\\"Check this checkbox\\\"\\n    required\\n  />\\n  <CFormCheck\\n    className=\\\"mb-3\\\"\\n    type=\\\"radio\\\"\\n    name=\\\"radio-stacked\\\"\\n    id=\\\"validationFormCheck3\\\"\\n    label=\\\"Or toggle this other radio\\\"\\n    feedbackInvalid=\\\"More example invalid feedback text\\\"\\n    required\\n  />\\n  <div className=\\\"mb-3\\\">\\n    <CFormSelect\\n      feedbackInvalid=\\\"Example invalid select feedback\\\"\\n      aria-label=\\\"select example\\\"\\n      required\\n    >\\n      <option selected=\\\"\\\" value=\\\"\\\">\\n        Open this select menu\\n      </option>\\n      <option value=\\\"1\\\">One</option>\\n      <option value=\\\"2\\\">Two</option>\\n      <option value=\\\"3\\\">Three</option>\\n    </CFormSelect>\\n  </div>\\n  <div className=\\\"mb-3\\\">\\n    <CFormInput\\n      type=\\\"file\\\"\\n      id=\\\"validationTextarea\\\"\\n      feedbackInvalid=\\\"Example invalid form file feedback\\\"\\n      aria-label=\\\"file example\\\"\\n      required\\n    />\\n  </div>\\n  <div className=\\\"mb-3\\\">\\n    <CButton type=\\\"submit\\\" color=\\\"primary\\\" disabled>\\n      Submit form\\n    </CButton>\\n  </div>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"tooltips\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tooltips\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tooltips\",\n    \"aria-label\": \"tooltips permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"If your form layout allows it, you can swap the text for the tooltip to display validation feedback in a styled tooltip. Be sure to have a parent with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: relative\"), \" on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(TooltipsExample, {\n    mdxType: \"TooltipsExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [validated, setValidated] = useState(false)\\nconst handleSubmit = (event) => {\\n  const form = event.currentTarget\\n  if (form.checkValidity() === false) {\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n  setValidated(true)\\n}\\nreturn (\\n <CForm\\n  className=\\\"row g-3 needs-validation\\\"\\n  noValidate\\n  validated={validated}\\n  onSubmit={handleSubmit}\\n>\\n  <CCol md={4} className=\\\"position-relative\\\">\\n    <CFormInput\\n      type=\\\"text\\\"\\n      defaultValue=\\\"Mark\\\"\\n      feedbackValid=\\\"Looks good!\\\"\\n      id=\\\"validationTooltip01\\\"\\n      label=\\\"First name\\\"\\n      required\\n      tooltipFeedback\\n    />\\n  </CCol>\\n  <CCol md={4} className=\\\"position-relative\\\">\\n    <CFormInput\\n      type=\\\"text\\\"\\n      defaultValue=\\\"Otto\\\"\\n      feedbackValid=\\\"Looks good!\\\"\\n      id=\\\"validationTooltip02\\\"\\n      label=\\\"First name\\\"\\n      required\\n      tooltipFeedback\\n    />\\n  </CCol>\\n  <CCol md={4} className=\\\"position-relative\\\">\\n    <CFormLabel htmlFor=\\\"validationTooltipUsername\\\">Username</CFormLabel>\\n    <CInputGroup className=\\\"has-validation\\\">\\n      <CInputGroupText id=\\\"inputGroupPrepend\\\">@</CInputGroupText>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        aria-describedby=\\\"inputGroupPrependFeedback\\\"\\n        feedbackInvalid=\\\"Please choose a username.\\\"\\n        id=\\\"validationTooltipUsername\\\"\\n        required\\n        tooltipFeedback\\n      />\\n    </CInputGroup>\\n  </CCol>\\n  <CCol md={6} className=\\\"position-relative\\\">\\n    <CFormInput\\n      type=\\\"text\\\"\\n      aria-describedby=\\\"validationTooltip03Feedback\\\"\\n      feedbackInvalid=\\\"Please provide a valid city.\\\"\\n      id=\\\"validationTooltip03\\\"\\n      label=\\\"City\\\"\\n      required\\n      tooltipFeedback\\n    />\\n  </CCol>\\n  <CCol md={3} className=\\\"position-relative\\\">\\n    <CFormSelect\\n      aria-describedby=\\\"validationTooltip04Feedback\\\"\\n      feedbackInvalid=\\\"Please select a valid state.\\\"\\n      id=\\\"validationTooltip04\\\"\\n      label=\\\"State\\\"\\n      required\\n      tooltipFeedback\\n    >\\n      <option selected=\\\"\\\" disabled=\\\"\\\" value=\\\"\\\">\\n        Choose...\\n      </option>\\n      <option>...</option>\\n    </CFormSelect>\\n  </CCol>\\n  <CCol md={3} className=\\\"position-relative\\\">\\n    <CFormInput\\n      type=\\\"text\\\"\\n      aria-describedby=\\\"validationTooltip05Feedback\\\"\\n      feedbackInvalid=\\\"Please provide a valid zip.\\\"\\n      id=\\\"validationTooltip05\\\"\\n      label=\\\"Zip\\\"\\n      required\\n      tooltipFeedback\\n    />\\n  </CCol>\\n  <CCol xs={12} className=\\\"position-relative\\\">\\n    <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n      Submit form\\n    </CButton>\\n  </CCol>\\n</CForm>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Form Validation","description":"Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.","name":"Validation","route":"/forms/validation"},"tableOfContents":{"items":[{"url":"#example","title":"Example"},{"url":"#browser-defaults","title":"Browser defaults"},{"url":"#custom-validation","title":"Custom validation"},{"url":"#supported-elements","title":"Supported elements"},{"url":"#tooltips","title":"Tooltips"}]}}},"pageContext":{"id":"c8b97e2b-ac01-57e3-9bbd-7b5a9c6ad41f"}},"staticQueryHashes":["4202924991"]}