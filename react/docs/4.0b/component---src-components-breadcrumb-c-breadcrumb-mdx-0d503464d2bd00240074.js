(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{LSvl:function(e,r,a){"use strict";a.r(r),a.d(r,"_frontmatter",(function(){return o})),a.d(r,"default",(function(){return p}));var t=a("Fcif"),b=a("+I+c"),c=(a("IFzZ"),a("/FXl")),d=a("BIGe"),m=a("ZFoC"),i=a("EaLO"),n=a("6S0j"),o=(a("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/breadcrumb/CBreadcrumb.mdx"}});var u={_frontmatter:o},s=d.a;function p(e){var r,a,p,l,C=e.components,h=Object(b.a)(e,["components"]);return Object(c.b)(s,Object(t.a)({},u,h,{components:C,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("p",null,"The breadcrumb navigation provides links back to each previous page the user navigated through and shows the current location in a website or an application. You don’t have to add separators, because they automatically added in CSS through ::before and content."),Object(c.b)(m.c,{__position:0,__code:'<CBreadcrumb>\n  <CBreadcrumbItem active>Home</CBreadcrumbItem>\n</CBreadcrumb>\n<CBreadcrumb>\n  <CBreadcrumbItem href="#">Home</CBreadcrumbItem>\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\n</CBreadcrumb>\n<CBreadcrumb>\n  <CBreadcrumbItem href="#">Home</CBreadcrumbItem>\n  <CBreadcrumbItem href="#">Library</CBreadcrumbItem>\n  <CBreadcrumbItem active>Data</CBreadcrumbItem>\n</CBreadcrumb>',__scope:(r={props:h,DefaultLayout:d.a,Playground:m.c,Props:m.d,CBreadcrumb:i.a,CBreadcrumbItem:n.a},r.DefaultLayout=d.a,r._frontmatter=o,r),mdxType:"Playground"},Object(c.b)(i.a,{mdxType:"CBreadcrumb"},Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Home")),Object(c.b)(i.a,{mdxType:"CBreadcrumb"},Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Home"),Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Library")),Object(c.b)(i.a,{mdxType:"CBreadcrumb"},Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Home"),Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Library"),Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Data"))),Object(c.b)("h2",{id:"dividers"},"Dividers"),Object(c.b)("p",null,"Dividers are automatically added in CSS through ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/::before"},Object(c.b)("inlineCode",{parentName:"a"},"::before"))," and ",Object(c.b)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/CSS/content"},Object(c.b)("inlineCode",{parentName:"a"},"content")),". They can be changed by modifying a local CSS custom property ",Object(c.b)("inlineCode",{parentName:"p"},"--coreui-breadcrumb-divider"),", or through the ",Object(c.b)("inlineCode",{parentName:"p"},"$breadcrumb-divider")," Sass variable — and ",Object(c.b)("inlineCode",{parentName:"p"},"$breadcrumb-divider-flipped")," for its RTL counterpart, if needed. We default to our Sass variable, which is set as a fallback to the custom property. This way, you get a global divider that you can override without recompiling CSS at any time."),Object(c.b)(m.c,{__position:1,__code:"<CBreadcrumb style={{ '--cui-breadcrumb-divider': \"'>'\" }}>\n  <CBreadcrumbItem href=\"#\">Home</CBreadcrumbItem>\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\n</CBreadcrumb>",__scope:(a={props:h,DefaultLayout:d.a,Playground:m.c,Props:m.d,CBreadcrumb:i.a,CBreadcrumbItem:n.a},a.DefaultLayout=d.a,a._frontmatter=o,a),mdxType:"Playground"},Object(c.b)(i.a,{style:{"--cui-breadcrumb-divider":"'>'"},mdxType:"CBreadcrumb"},Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Home"),Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Library"))),Object(c.b)("p",null,"When modifying via Sass, the ",Object(c.b)("a",{parentName:"p",href:"https://sass-lang.com/documentation/modules/string#quote"},"quote")," function is required to generate the quotes around a string. For example, using ",Object(c.b)("inlineCode",{parentName:"p"},">")," as the divider, you can use this:"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-scss"},'$breadcrumb-divider: quote(">");\n')),Object(c.b)("p",null,"It's also possible to use an ",Object(c.b)("strong",{parentName:"p"},"embedded SVG icon"),". Apply it via our CSS custom property, or use the Sass variable."),Object(c.b)(m.c,{__position:2,__code:"<CBreadcrumb\n  style={{\n    '--cui-breadcrumb-divider':\n      \"url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);\",\n  }}\n>\n  <CBreadcrumbItem href=\"#\">Home</CBreadcrumbItem>\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\n</CBreadcrumb>",__scope:(p={props:h,DefaultLayout:d.a,Playground:m.c,Props:m.d,CBreadcrumb:i.a,CBreadcrumbItem:n.a},p.DefaultLayout=d.a,p._frontmatter=o,p),mdxType:"Playground"},Object(c.b)(i.a,{style:{"--cui-breadcrumb-divider":"url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);"},mdxType:"CBreadcrumb"},Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Home"),Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Library"))),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-scss"},"$breadcrumb-divider: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' \nwidth='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E\");\n")),Object(c.b)("p",null,"You can also remove the divider setting ",Object(c.b)("inlineCode",{parentName:"p"},"--cui-breadcrumb-divider: '';")," (empty strings in CSS custom properties counts as a value), or setting the Sass variable to ",Object(c.b)("inlineCode",{parentName:"p"},"$breadcrumb-divider: none;"),"."),Object(c.b)(m.c,{__position:3,__code:"<CBreadcrumb style={{ '--cui-breadcrumb-divider': \"'';\" }}>\n  <CBreadcrumbItem href=\"#\">Home</CBreadcrumbItem>\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\n</CBreadcrumb>",__scope:(l={props:h,DefaultLayout:d.a,Playground:m.c,Props:m.d,CBreadcrumb:i.a,CBreadcrumbItem:n.a},l.DefaultLayout=d.a,l._frontmatter=o,l),mdxType:"Playground"},Object(c.b)(i.a,{style:{"--cui-breadcrumb-divider":"'';"},mdxType:"CBreadcrumb"},Object(c.b)(n.a,{href:"#",mdxType:"CBreadcrumbItem"},"Home"),Object(c.b)(n.a,{active:!0,mdxType:"CBreadcrumbItem"},"Library"))),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-scss"},"$breadcrumb-divider: none;\n")),Object(c.b)("h2",{id:"accessibility"},"Accessibility"),Object(c.b)("p",null,"Since breadcrumbs provide navigation, it's useful to add a significant label such as ",Object(c.b)("inlineCode",{parentName:"p"},'aria-label="breadcrumb"')," to explain the type of navigation implemented in the ",Object(c.b)("inlineCode",{parentName:"p"},"<nav>")," element. You should also add an ",Object(c.b)("inlineCode",{parentName:"p"},'aria-current="page"')," to the last item of the set to show that it represents the current page. ",Object(c.b)("strong",{parentName:"p"},"CoreUI for React.js automatically add all of this labels to breadcrumb's components.")," "),Object(c.b)("p",null,"For more information, see the ",Object(c.b)("a",{parentName:"p",href:"https://www.w3.org/TR/wai-aria-practices/#breadcrumb"},"WAI-ARIA Authoring Practices for the breadcrumb pattern"),"."),Object(c.b)("h2",{id:"api"},"API"),Object(c.b)("h3",{id:"cbreadcrumb"},"CBreadcrumb"),Object(c.b)(m.d,{of:i.a,mdxType:"Props"}),Object(c.b)("h3",{id:"cbreadcrumbitem"},"CBreadcrumbItem"),Object(c.b)(m.d,{of:n.a,mdxType:"Props"}))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/breadcrumb/CBreadcrumb.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-breadcrumb-c-breadcrumb-mdx-0d503464d2bd00240074.js.map