(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{czVv:function(a,e,n){"use strict";n.r(e),n.d(e,"_frontmatter",(function(){return S})),n.d(e,"default",(function(){return F}));var t=n("Fcif"),o=n("+I+c"),r=n("mXGw"),C=n("/FXl"),b=n("BIGe"),l=n("ZFoC"),i=n("758a"),p=n("soAG"),d=n("yqDl"),c=n("N9pd"),m=n("GxEI"),s=n("vXFi"),v=n("CnsJ"),N=n("VFdZ"),u=n("61AP"),h=n("kVip"),g=n("J7hk"),y=n("nOSA"),T=n("zdUC"),f=n("+L+j"),x=n("oQeO"),j=n("78lx"),O=n("hepH"),D=n("QLpu"),w=n("3kek"),I=n("wmAK"),k=n("+TkQ"),L=n("gTQP"),S=(n("aD51"),{});void 0!==S&&S&&S===Object(S)&&Object.isExtensible(S)&&!S.hasOwnProperty("__filemeta")&&Object.defineProperty(S,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/navbar/CNavbar.mdx"}});var _={_frontmatter:S},B=b.a;function F(a){var e,n,F,P,G,H,M,A,V,U,z,q,X,J,Q,E,W,R,Z,K,Y,$,aa=a.components,ea=Object(o.a)(a,["components"]);return Object(C.b)(B,Object(t.a)({},_,ea,{components:aa,mdxType:"MDXLayout"}),Object(C.b)("h2",{id:"supported-content"},"Supported content"),Object(C.b)("p",null,Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>")," come with built-in support for a handful of sub-components. Choose from the following as needed:"),Object(C.b)("ul",null,Object(C.b)("li",{parentName:"ul"},Object(C.b)("inlineCode",{parentName:"li"},"<CNavbarBrand>")," for your company, product, or project name."),Object(C.b)("li",{parentName:"ul"},Object(C.b)("inlineCode",{parentName:"li"},"<CNavbarNav>")," for a full-height and lightweight navigation (including support for dropdowns)."),Object(C.b)("li",{parentName:"ul"},Object(C.b)("inlineCode",{parentName:"li"},"<CNavbarToggler>")," for use with our collapse plugin and other ",Object(C.b)("a",{parentName:"li",href:"#responsive-behaviors"},"navigation toggling")," behaviors."),Object(C.b)("li",{parentName:"ul"},"Flex and spacing utilities for any form controls and actions."),Object(C.b)("li",{parentName:"ul"},Object(C.b)("inlineCode",{parentName:"li"},"<CNavbarText>")," for adding vertically centered strings of text."),Object(C.b)("li",{parentName:"ul"},Object(C.b)("inlineCode",{parentName:"li"},"<CCollapse>")," for grouping and hiding navbar contents by a parent breakpoint.")),Object(C.b)("p",null,"Here's an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the ",Object(C.b)("inlineCode",{parentName:"p"},"lg")," (large) breakpoint."),Object(C.b)("h2",{id:"basic-usage"},"Basic usage"),Object(C.b)(l.c,{__position:0,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CDropdown variant="nav-item" popper={false}>\n                <CDropdownToggle color="secondary">\n                  Dropdown button\n                </CDropdownToggle>\n                <CDropdownMenu>\n                  <CDropdownItem href="#">Action</CDropdownItem>\n                  <CDropdownItem href="#">Another action</CDropdownItem>\n                  <CDropdownDivider />\n                  <CDropdownItem href="#">Something else here</CDropdownItem>\n                </CDropdownMenu>\n              </CDropdown>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="success" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(e={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},e.DefaultLayout=b.a,e._frontmatter=S,e),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(c.a,{variant:"nav-item",popper:!1,mdxType:"CDropdown"},Object(C.b)(h.a,{color:"secondary",mdxType:"CDropdownToggle"},"Dropdown button"),Object(C.b)(u.a,{mdxType:"CDropdownMenu"},Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Action"),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Another action"),Object(C.b)(m.a,{mdxType:"CDropdownDivider"}),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Something else here"))),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))))})),Object(C.b)("h3",{id:"brand"},"Brand"),Object(C.b)("p",null,"The ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarBrand>")," can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles."),Object(C.b)(l.c,{__position:1,__code:'{/* As a link */}\n<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Navbar</CNavbarBrand>\n  </CContainer>\n</CNavbar>\n<br />\n{/* As a heading */}\n<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand className="mb-0 h1">Navbar</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(n={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},n.DefaultLayout=b.a,n._frontmatter=S,n),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"))),Object(C.b)("br",null),Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{className:"mb-0 h1",mdxType:"CNavbarBrand"},"Navbar")))),Object(C.b)("p",null,"Adding images to the ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarBrand>")," will likely always require custom styles or utilities to properly size. Here are some examples to demonstrate."),Object(C.b)(l.c,{__position:2,__code:'{/* Just an image */}\n<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand href="#">\n      <img\n        src="/public/images/brand/coreui-signet.svg"\n        alt=""\n        width="22"\n        height="24"\n      />\n    </CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(F={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},F.DefaultLayout=b.a,F._frontmatter=S,F),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},Object(C.b)("img",{src:"/public/images/brand/coreui-signet.svg",alt:"",width:"22",height:"24"}))))),Object(C.b)(l.c,{__position:3,__code:'{/* Image and text */}\n<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand href="#">\n      <img\n        src="/public/images/brand/coreui-signet.svg"\n        alt=""\n        width="22"\n        height="24"\n        class="d-inline-block align-top"\n      />{\' \'}\n      CoreUI\n    </CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(P={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},P.DefaultLayout=b.a,P._frontmatter=S,P),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},Object(C.b)("img",{src:"/public/images/brand/coreui-signet.svg",alt:"",width:"22",height:"24",className:"d-inline-block align-top"})," CoreUI")))),Object(C.b)("h3",{id:"nav"},"Nav"),Object(C.b)("p",null,Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>")," navigation is based on ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarNav>"),". ",Object(C.b)("strong",{parentName:"p"},"Navigation in navbars will also grow to occupy as much horizontal space as possible")," to keep your navbar contents securely aligned."),Object(C.b)(l.c,{__position:4,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Features</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Pricing</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(G={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},G.DefaultLayout=b.a,G._frontmatter=S,G),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Features")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Pricing")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled")))))))})),Object(C.b)("p",null,"And because we use classes for our navs, you can avoid the list-based approach entirely if you like."),Object(C.b)(l.c,{__position:5,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav component="nav">\n              <CNavLink href="#" active>\n                Home\n              </CNavLink>\n              <CNavLink href="#">Features</CNavLink>\n              <CNavLink href="#">Pricing</CNavLink>\n              <CNavLink href="#" disabled>\n                Disabled\n              </CNavLink>\n            </CNavbarNav>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(H={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},H.DefaultLayout=b.a,H._frontmatter=S,H),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{component:"nav",mdxType:"CNavbarNav"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home"),Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Features"),Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Pricing"),Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))))))})),Object(C.b)("p",null,"You can also use dropdowns in your navbar. Please note that ",Object(C.b)("inlineCode",{parentName:"p"},"<CDropdown>")," component requires ",Object(C.b)("inlineCode",{parentName:"p"},'variant="nav-item"'),"."),Object(C.b)(l.c,{__position:6,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Features</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Pricing</CNavLink>\n              </CNavItem>\n              <CDropdown variant="nav-item" popper={false}>\n                <CDropdownToggle>Dropdown link</CDropdownToggle>\n                <CDropdownMenu>\n                  <CDropdownItem href="#">Action</CDropdownItem>\n                  <CDropdownItem href="#">Another action</CDropdownItem>\n                  <CDropdownDivider />\n                  <CDropdownItem href="#">Something else here</CDropdownItem>\n                </CDropdownMenu>\n              </CDropdown>\n            </CNavbarNav>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(M={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},M.DefaultLayout=b.a,M._frontmatter=S,M),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Features")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Pricing")),Object(C.b)(c.a,{variant:"nav-item",popper:!1,mdxType:"CDropdown"},Object(C.b)(h.a,{mdxType:"CDropdownToggle"},"Dropdown link"),Object(C.b)(u.a,{mdxType:"CDropdownMenu"},Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Action"),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Another action"),Object(C.b)(m.a,{mdxType:"CDropdownDivider"}),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Something else here"))))))))})),Object(C.b)("h3",{id:"forms"},"Forms"),Object(C.b)("p",null,"Place various form controls and components within a navbar:"),Object(C.b)(l.c,{__position:7,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CForm className="d-flex">\n      <CFormControl type="search" className="me-2" placeholder="Search" />\n      <CButton type="submit" color="success" variant="outline">\n        Search\n      </CButton>\n    </CForm>\n  </CContainer>\n</CNavbar>',__scope:(A={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},A.DefaultLayout=b.a,A._frontmatter=S,A),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))),Object(C.b)("p",null,"Immediate child elements of ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>")," use flex layout and will default to ",Object(C.b)("inlineCode",{parentName:"p"},"justify-content: space-between"),". Use additional ",Object(C.b)("a",{parentName:"p",href:"https://coreui.io/docs/4.0/utilities/flex/"},"flex utilities")," as needed to adjust this behavior."),Object(C.b)(l.c,{__position:8,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Navbar</CNavbarBrand>\n    <CForm className="d-flex">\n      <CFormControl type="search" className="me-2" placeholder="Search" />\n      <CButton type="submit" color="success" variant="outline">\n        Search\n      </CButton>\n    </CForm>\n  </CContainer>\n</CNavbar>',__scope:(V={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},V.DefaultLayout=b.a,V._frontmatter=S,V),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))),Object(C.b)("p",null,"Input groups work, too. If your navbar is an entire form, or mostly a form, you can use the ",Object(C.b)("inlineCode",{parentName:"p"},"<CForm>")," element as the container and save some HTML."),Object(C.b)(l.c,{__position:9,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CForm className="container-fluid">\n    <CInputGroup>\n      <CInputGroupText id="basic-addon1">@</CInputGroupText>\n      <CFormControl\n        placeholder="Username"\n        aria-label="Username"\n        aria-describedby="basic-addon1"\n      />\n    </CInputGroup>\n  </CForm>\n</CNavbar>',__scope:(U={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},U.DefaultLayout=b.a,U._frontmatter=S,U),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(g.a,{className:"container-fluid",mdxType:"CForm"},Object(C.b)(T.a,{mdxType:"CInputGroup"},Object(C.b)(f.a,{id:"basic-addon1",mdxType:"CInputGroupText"},"@"),Object(C.b)(y.a,{placeholder:"Username","aria-label":"Username","aria-describedby":"basic-addon1",mdxType:"CFormControl"}))))),Object(C.b)("p",null,"Various buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements."),Object(C.b)(l.c,{__position:10,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CForm className="container-fluid justify-content-start">\n    <CButton type="button" color="success" variant="outline" className="me-2">\n      Main button\n    </CButton>\n    <CButton type="button" color="secondary" variant="outline" size="sm">\n      Smaller button\n    </CButton>\n  </CForm>\n</CNavbar>',__scope:(z={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},z.DefaultLayout=b.a,z._frontmatter=S,z),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(g.a,{className:"container-fluid justify-content-start",mdxType:"CForm"},Object(C.b)(i.a,{type:"button",color:"success",variant:"outline",className:"me-2",mdxType:"CButton"},"Main button"),Object(C.b)(i.a,{type:"button",color:"secondary",variant:"outline",size:"sm",mdxType:"CButton"},"Smaller button")))),Object(C.b)("h3",{id:"text"},"Text"),Object(C.b)("p",null,"Navbars may contain bits of text with the help of ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarText>"),". This class adjusts vertical alignment and horizontal spacing for strings of text."),Object(C.b)(l.c,{__position:11,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarText>Navbar text with an inline element</CNavbarText>\n  </CContainer>\n</CNavbar>',__scope:(q={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},q.DefaultLayout=b.a,q._frontmatter=S,q),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(k.a,{mdxType:"CNavbarText"},"Navbar text with an inline element")))),Object(C.b)("h2",{id:"color-schemes"},"Color schemes"),Object(C.b)("p",null,"Theming the navbar has never been easier thanks to the combination of theming classes and ",Object(C.b)("inlineCode",{parentName:"p"},"background-color")," utilities. Set ",Object(C.b)("inlineCode",{parentName:"p"},'colorScheme="light"')," for use with light background colors, or ",Object(C.b)("inlineCode",{parentName:"p"},'colorScheme="dark"')," for dark background colors. Then, customize with ",Object(C.b)("inlineCode",{parentName:"p"},".bg-*")," utilities."),Object(C.b)(l.c,{__position:12,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="dark" className="bg-dark">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CDropdown variant="nav-item" popper={false}>\n                <CDropdownToggle color="secondary">\n                  Dropdown button\n                </CDropdownToggle>\n                <CDropdownMenu>\n                  <CDropdownItem href="#">Action</CDropdownItem>\n                  <CDropdownItem href="#">Another action</CDropdownItem>\n                  <CDropdownDivider />\n                  <CDropdownItem href="#">Something else here</CDropdownItem>\n                </CDropdownMenu>\n              </CDropdown>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="light" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n      <br />\n      <CNavbar expand="lg" colorScheme="dark" className="bg-primary">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CDropdown variant="nav-item" popper={false}>\n                <CDropdownToggle color="secondary">\n                  Dropdown button\n                </CDropdownToggle>\n                <CDropdownMenu>\n                  <CDropdownItem href="#">Action</CDropdownItem>\n                  <CDropdownItem href="#">Another action</CDropdownItem>\n                  <CDropdownDivider />\n                  <CDropdownItem href="#">Something else here</CDropdownItem>\n                </CDropdownMenu>\n              </CDropdown>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="light" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n      <br />\n      <CNavbar\n        expand="lg"\n        colorScheme="light"\n        style={{ backgroundColor: \'#e3f2fd\' }}\n      >\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav>\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CDropdown variant="nav-item" popper={false}>\n                <CDropdownToggle color="secondary">\n                  Dropdown button\n                </CDropdownToggle>\n                <CDropdownMenu>\n                  <CDropdownItem href="#">Action</CDropdownItem>\n                  <CDropdownItem href="#">Another action</CDropdownItem>\n                  <CDropdownDivider />\n                  <CDropdownItem href="#">Something else here</CDropdownItem>\n                </CDropdownMenu>\n              </CDropdown>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="primary" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(X={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},X.DefaultLayout=b.a,X._frontmatter=S,X),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"dark",className:"bg-dark",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(c.a,{variant:"nav-item",popper:!1,mdxType:"CDropdown"},Object(C.b)(h.a,{color:"secondary",mdxType:"CDropdownToggle"},"Dropdown button"),Object(C.b)(u.a,{mdxType:"CDropdownMenu"},Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Action"),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Another action"),Object(C.b)(m.a,{mdxType:"CDropdownDivider"}),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Something else here"))),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"light",variant:"outline",mdxType:"CButton"},"Search"))))),Object(C.b)("br",null),Object(C.b)(D.a,{expand:"lg",colorScheme:"dark",className:"bg-primary",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(c.a,{variant:"nav-item",popper:!1,mdxType:"CDropdown"},Object(C.b)(h.a,{color:"secondary",mdxType:"CDropdownToggle"},"Dropdown button"),Object(C.b)(u.a,{mdxType:"CDropdownMenu"},Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Action"),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Another action"),Object(C.b)(m.a,{mdxType:"CDropdownDivider"}),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Something else here"))),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"light",variant:"outline",mdxType:"CButton"},"Search"))))),Object(C.b)("br",null),Object(C.b)(D.a,{expand:"lg",colorScheme:"light",style:{backgroundColor:"#e3f2fd"},mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(c.a,{variant:"nav-item",popper:!1,mdxType:"CDropdown"},Object(C.b)(h.a,{color:"secondary",mdxType:"CDropdownToggle"},"Dropdown button"),Object(C.b)(u.a,{mdxType:"CDropdownMenu"},Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Action"),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Another action"),Object(C.b)(m.a,{mdxType:"CDropdownDivider"}),Object(C.b)(v.a,{href:"#",mdxType:"CDropdownItem"},"Something else here"))),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"primary",variant:"outline",mdxType:"CButton"},"Search"))))))})),Object(C.b)("h2",{id:"containers"},"Containers"),Object(C.b)("p",null,"Although it's not required, you can wrap a ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>")," in a ",Object(C.b)("inlineCode",{parentName:"p"},"<CContainer>")," to center it on a page–though note that an inner container is still required. Or you can add a container inside the ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>")," to only center the contents of a ",Object(C.b)("a",{parentName:"p",href:"#placement"},"fixed or static top navbar"),"."),Object(C.b)(l.c,{__position:13,__code:'<CContainer>\n  <CNavbar colorScheme="light" className="bg-light">\n    <CContainer fluid>\n      <CNavbarBrand href="#">Navbar</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n</CContainer>',__scope:(J={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},J.DefaultLayout=b.a,J._frontmatter=S,J),mdxType:"Playground"},Object(C.b)(p.a,{mdxType:"CContainer"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"))))),Object(C.b)("p",null,"Use any of the responsive containers to change how wide the content in your navbar is presented."),Object(C.b)(l.c,{__position:14,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CContainer breakpoint="md">\n    <CNavbarBrand href="#">Navbar</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(Q={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},Q.DefaultLayout=b.a,Q._frontmatter=S,Q),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{breakpoint:"md",mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar")))),Object(C.b)("h2",{id:"placement"},"Placement"),Object(C.b)("p",null,"Use our ",Object(C.b)("inlineCode",{parentName:"p"},"placement")," properly to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use ",Object(C.b)("inlineCode",{parentName:"p"},"position: fixed"),", meaning they're pulled from the normal flow of the DOM and may require custom CSS (e.g., ",Object(C.b)("inlineCode",{parentName:"p"},"padding-top")," on the ",Object(C.b)("inlineCode",{parentName:"p"},"<body>"),") to prevent overlap with other elements."),Object(C.b)("p",null,"Also note that ",Object(C.b)("strong",{parentName:"p"},Object(C.b)("inlineCode",{parentName:"strong"},".sticky-top")," uses ",Object(C.b)("inlineCode",{parentName:"strong"},"position: sticky"),", which ",Object(C.b)("a",{parentName:"strong",href:"https://caniuse.com/css-sticky"},"isn't fully supported in every browser")),"."),Object(C.b)(l.c,{__position:15,__code:'<CNavbar colorScheme="light" className="bg-light">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Default</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(E={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},E.DefaultLayout=b.a,E._frontmatter=S,E),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Default")))),Object(C.b)(l.c,{__position:16,__code:'<CNavbar colorScheme="light" className="bg-light" placement="fixed-top">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Fixed top</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(W={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},W.DefaultLayout=b.a,W._frontmatter=S,W),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",placement:"fixed-top",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Fixed top")))),Object(C.b)(l.c,{__position:17,__code:'<CNavbar colorScheme="light" className="bg-light" placement="fixed-bottom">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Fixed bottom</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(R={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},R.DefaultLayout=b.a,R._frontmatter=S,R),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",placement:"fixed-bottom",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Fixed bottom")))),Object(C.b)(l.c,{__position:18,__code:'<CNavbar colorScheme="light" className="bg-light" placement="sticky-top">\n  <CContainer fluid>\n    <CNavbarBrand href="#">Sticky top</CNavbarBrand>\n  </CContainer>\n</CNavbar>',__scope:(Z={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},Z.DefaultLayout=b.a,Z._frontmatter=S,Z),mdxType:"Playground"},Object(C.b)(D.a,{colorScheme:"light",className:"bg-light",placement:"sticky-top",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Sticky top")))),Object(C.b)("h2",{id:"responsive-behaviors"},"Responsive behaviors"),Object(C.b)("p",null,"Navbars can use ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarToggler>"),", ",Object(C.b)("inlineCode",{parentName:"p"},"<CCollapse>"),", and ",Object(C.b)("inlineCode",{parentName:"p"},'expand="{sm|md|lg|xl|xxl}"')," property to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements."),Object(C.b)("p",null,"For navbars that never collapse, add the ",Object(C.b)("inlineCode",{parentName:"p"},"expand")," boolean property on the ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbar>"),". For navbars that always collapse, don't add any property."),Object(C.b)("h3",{id:"toggler"},"Toggler"),Object(C.b)("p",null,"Navbar togglers are left-aligned by default, but should they follow a sibling element like a ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarBrand>"),", they'll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles."),Object(C.b)("p",null,"With no ",Object(C.b)("inlineCode",{parentName:"p"},"<CNavbarBrand>")," shown at the smallest breakpoint:"),Object(C.b)(l.c,{__position:19,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarBrand href="#">Hidden brand</CNavbarBrand>\n            <CNavbarNav className="me-auto mb-2 mb-lg-0">\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="success" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(K={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},K.DefaultLayout=b.a,K._frontmatter=S,K),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Hidden brand"),Object(C.b)(I.a,{className:"me-auto mb-2 mb-lg-0",mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))))})),Object(C.b)("p",null,"With a brand name shown on the left and toggler on the right:"),Object(C.b)(l.c,{__position:20,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav className="me-auto mb-2 mb-lg-0">\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="success" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:(Y={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},Y.DefaultLayout=b.a,Y._frontmatter=S,Y),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{className:"me-auto mb-2 mb-lg-0",mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))))})),Object(C.b)("p",null,"With a toggler on the left and brand name on the right:"),Object(C.b)(l.c,{__position:21,__code:'() => {\n  const [visible, setVisible] = useState(false)\n  return (\n    <>\n      <CNavbar expand="lg" colorScheme="light" className="bg-light">\n        <CContainer fluid>\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\n          <CNavbarBrand href="#">Navbar</CNavbarBrand>\n          <CCollapse className="navbar-collapse" visible={visible}>\n            <CNavbarNav className="me-auto mb-2 mb-lg-0">\n              <CNavItem>\n                <CNavLink href="#" active>\n                  Home\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#">Link</CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink href="#" disabled>\n                  Disabled\n                </CNavLink>\n              </CNavItem>\n            </CNavbarNav>\n            <CForm className="d-flex">\n              <CFormControl\n                type="search"\n                className="me-2"\n                placeholder="Search"\n              />\n              <CButton type="submit" color="success" variant="outline">\n                Search\n              </CButton>\n            </CForm>\n          </CCollapse>\n        </CContainer>\n      </CNavbar>\n    </>\n  )\n}',__scope:($={props:ea,DefaultLayout:b.a,Playground:l.c,Props:l.d,useState:r.useState,CButton:i.a,CContainer:p.a,CCollapse:d.a,CDropdown:c.a,CDropdownDivider:m.a,CDropdownHeader:s.a,CDropdownItem:v.a,CDropdownItemPlain:N.a,CDropdownMenu:u.a,CDropdownToggle:h.a,CForm:g.a,CFormControl:y.a,CInputGroup:T.a,CInputGroupText:f.a,CNav:x.a,CNavItem:j.a,CNavLink:O.a,CNavbar:D.a,CNavbarBrand:w.a,CNavbarNav:I.a,CNavbarText:k.a,CNavbarToggler:L.a},$.DefaultLayout=b.a,$._frontmatter=S,$),mdxType:"Playground"},(function(){var a=Object(r.useState)(!1),e=a[0],n=a[1];return Object(C.b)(r.Fragment,null,Object(C.b)(D.a,{expand:"lg",colorScheme:"light",className:"bg-light",mdxType:"CNavbar"},Object(C.b)(p.a,{fluid:!0,mdxType:"CContainer"},Object(C.b)(L.a,{onClick:function(){return n(!e)},mdxType:"CNavbarToggler"}),Object(C.b)(w.a,{href:"#",mdxType:"CNavbarBrand"},"Navbar"),Object(C.b)(d.a,{className:"navbar-collapse",visible:e,mdxType:"CCollapse"},Object(C.b)(I.a,{className:"me-auto mb-2 mb-lg-0",mdxType:"CNavbarNav"},Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",active:!0,mdxType:"CNavLink"},"Home")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",mdxType:"CNavLink"},"Link")),Object(C.b)(j.a,{mdxType:"CNavItem"},Object(C.b)(O.a,{href:"#",disabled:!0,mdxType:"CNavLink"},"Disabled"))),Object(C.b)(g.a,{className:"d-flex",mdxType:"CForm"},Object(C.b)(y.a,{type:"search",className:"me-2",placeholder:"Search",mdxType:"CFormControl"}),Object(C.b)(i.a,{type:"submit",color:"success",variant:"outline",mdxType:"CButton"},"Search"))))))})),Object(C.b)("h2",{id:"api"},"API"),Object(C.b)("h3",{id:"cnavbar"},"CNavbar"),Object(C.b)(l.d,{of:D.a,mdxType:"Props"}),Object(C.b)("h3",{id:"cnavbarbrand"},"CNavbarBrand"),Object(C.b)(l.d,{of:w.a,mdxType:"Props"}),Object(C.b)("h3",{id:"cnavbarnav"},"CNavbarNav"),Object(C.b)(l.d,{of:I.a,mdxType:"Props"}),Object(C.b)("h3",{id:"cnavbartext"},"CNavbarText"),Object(C.b)(l.d,{of:k.a,mdxType:"Props"}),Object(C.b)("h3",{id:"cnavbartoggler"},"CNavbarToggler"),Object(C.b)(l.d,{of:L.a,mdxType:"Props"}))}void 0!==F&&F&&F===Object(F)&&Object.isExtensible(F)&&!F.hasOwnProperty("__filemeta")&&Object.defineProperty(F,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/navbar/CNavbar.mdx"}}),F.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-navbar-c-navbar-mdx-62fc9c6cbf77753acba7.js.map