{"version":3,"sources":["webpack:///../src/components/navbar/CNavbar.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","CButton","CContainer","CCollapse","CDropdown","CDropdownDivider","CDropdownHeader","CDropdownItem","CDropdownItemPlain","CDropdownMenu","CDropdownToggle","CForm","CFormControl","CInputGroup","CInputGroupText","CNav","CNavItem","CNavLink","CNavbar","CNavbarBrand","CNavbarNav","CNavbarText","CNavbarToggler","visible","setVisible","expand","colorScheme","className","fluid","href","onClick","active","variant","popper","color","disabled","type","placeholder","src","alt","width","height","component","id","aria-label","aria-describedby","size","style","backgroundColor","breakpoint","placement","of","isMDXComponent"],"mappings":"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","file":"component---src-components-navbar-c-navbar-mdx-dac58d347c4a6c85d4ad.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport { CButton } from '../button/CButton.tsx';\nimport { CContainer } from '../grid/CContainer.tsx';\nimport { CCollapse } from '../collapse/CCollapse.tsx';\nimport { CDropdown } from '../dropdown/CDropdown.tsx';\nimport { CDropdownDivider } from '../dropdown/CDropdownDivider.tsx';\nimport { CDropdownHeader } from '../dropdown/CDropdownHeader.tsx';\nimport { CDropdownItem } from '../dropdown/CDropdownItem.tsx';\nimport { CDropdownItemPlain } from '../dropdown/CDropdownItemPlain.tsx';\nimport { CDropdownMenu } from '../dropdown/CDropdownMenu.tsx';\nimport { CDropdownToggle } from '../dropdown/CDropdownToggle.tsx';\nimport { CForm } from '../form/CForm.tsx';\nimport { CFormControl } from '../form/CFormControl.tsx';\nimport { CInputGroup } from '../form/CInputGroup.tsx';\nimport { CInputGroupText } from '../form/CInputGroupText.tsx';\nimport { CNav } from '../nav/CNav.tsx';\nimport { CNavItem } from '../nav/CNavItem.tsx';\nimport { CNavLink } from '../nav/CNavLink.tsx';\nimport { CNavbar } from './CNavbar.tsx';\nimport { CNavbarBrand } from './CNavbarBrand.tsx';\nimport { CNavbarNav } from './CNavbarNav.tsx';\nimport { CNavbarText } from './CNavbarText.tsx';\nimport { CNavbarToggler } from './CNavbarToggler.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h2 {...{\n      \"id\": \"supported-content\"\n    }}>{`Supported content`}</h2>\n    <p><inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{` come with built-in support for a handful of sub-components. Choose from the following as needed:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<CNavbarBrand>`}</inlineCode>{` for your company, product, or project name.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<CNavbarNav>`}</inlineCode>{` for a full-height and lightweight navigation (including support for dropdowns).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<CNavbarToggler>`}</inlineCode>{` for use with our collapse plugin and other `}<a parentName=\"li\" {...{\n          \"href\": \"#responsive-behaviors\"\n        }}>{`navigation toggling`}</a>{` behaviors.`}</li>\n      <li parentName=\"ul\">{`Flex and spacing utilities for any form controls and actions.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<CNavbarText>`}</inlineCode>{` for adding vertically centered strings of text.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`<CCollapse>`}</inlineCode>{` for grouping and hiding navbar contents by a parent breakpoint.`}</li>\n    </ul>\n    <p>{`Here's an example of all the sub-components included in a responsive light-themed navbar that automatically collapses at the `}<inlineCode parentName=\"p\">{`lg`}</inlineCode>{` (large) breakpoint.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n                <CDropdownToggle color=\\\"secondary\\\">\\n                  Dropdown button\\n                </CDropdownToggle>\\n                <CDropdownMenu>\\n                  <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                  <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                  <CDropdownDivider />\\n                  <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n                </CDropdownMenu>\\n              </CDropdown>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CDropdown variant=\"nav-item\" popper={false} mdxType=\"CDropdown\">\n                  <CDropdownToggle color=\"secondary\" mdxType=\"CDropdownToggle\">Dropdown button</CDropdownToggle>\n                  <CDropdownMenu mdxType=\"CDropdownMenu\">\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Action</CDropdownItem>\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Another action</CDropdownItem>\n                    <CDropdownDivider mdxType=\"CDropdownDivider\" />\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Something else here</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"brand\"\n    }}>{`Brand`}</h3>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<CNavbarBrand>`}</inlineCode>{` can be applied to most elements, but an anchor works best, as some elements might require utility classes or custom styles.`}</p>\n    <Playground __position={1} __code={'{/* As a link */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>\\n<br />\\n{/* As a heading */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand className=\\\"mb-0 h1\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {\n        /* As a link */\n      }\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n  <br />\n  {\n        /* As a heading */\n      }\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand className=\"mb-0 h1\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <p>{`Adding images to the `}<inlineCode parentName=\"p\">{`<CNavbarBrand>`}</inlineCode>{` will likely always require custom styles or utilities to properly size. Here are some examples to demonstrate.`}</p>\n    <Playground __position={2} __code={'{/* Just an image */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">\\n      <img\\n        src=\\\"/public/images/brand/coreui-signet.svg\\\"\\n        alt=\\\"\\\"\\n        width=\\\"22\\\"\\n        height=\\\"24\\\"\\n      />\\n    </CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {\n        /* Just an image */\n      }\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">\n        <img src=\"/public/images/brand/coreui-signet.svg\" alt=\"\" width=\"22\" height=\"24\" />\n      </CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <Playground __position={3} __code={'{/* Image and text */}\\n<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">\\n      <img\\n        src=\\\"/public/images/brand/coreui-signet.svg\\\"\\n        alt=\\\"\\\"\\n        width=\\\"22\\\"\\n        height=\\\"24\\\"\\n        class=\\\"d-inline-block align-top\\\"\\n      />{\\' \\'}\\n      CoreUI\\n    </CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {\n        /* Image and text */\n      }\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">\n        <img src=\"/public/images/brand/coreui-signet.svg\" alt=\"\" width=\"22\" height=\"24\" className=\"d-inline-block align-top\" /> CoreUI\n      </CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <h3 {...{\n      \"id\": \"nav\"\n    }}>{`Nav`}</h3>\n    <p><inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{` navigation is based on `}<inlineCode parentName=\"p\">{`<CNavbarNav>`}</inlineCode>{`. `}<strong parentName=\"p\">{`Navigation in navbars will also grow to occupy as much horizontal space as possible`}</strong>{` to keep your navbar contents securely aligned.`}</p>\n    <Playground __position={4} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Features</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Features</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Pricing</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">Disabled</CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <p>{`And because we use classes for our navs, you can avoid the list-based approach entirely if you like.`}</p>\n    <Playground __position={5} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav component=\\\"nav\\\">\\n              <CNavLink href=\\\"#\\\" active>\\n                Home\\n              </CNavLink>\\n              <CNavLink href=\\\"#\\\">Features</CNavLink>\\n              <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n              <CNavLink href=\\\"#\\\" disabled>\\n                Disabled\\n              </CNavLink>\\n            </CNavbarNav>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav component=\"nav\" mdxType=\"CNavbarNav\">\n                <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                <CNavLink href=\"#\" mdxType=\"CNavLink\">Features</CNavLink>\n                <CNavLink href=\"#\" mdxType=\"CNavLink\">Pricing</CNavLink>\n                <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">Disabled</CNavLink>\n              </CNavbarNav>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <p>{`You can also use dropdowns in your navbar. Please note that `}<inlineCode parentName=\"p\">{`<CDropdown>`}</inlineCode>{` component requires `}<inlineCode parentName=\"p\">{`variant=\"nav-item\"`}</inlineCode>{`.`}</p>\n    <Playground __position={6} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Features</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Pricing</CNavLink>\\n              </CNavItem>\\n              <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n                <CDropdownToggle>Dropdown link</CDropdownToggle>\\n                <CDropdownMenu>\\n                  <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                  <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                  <CDropdownDivider />\\n                  <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n                </CDropdownMenu>\\n              </CDropdown>\\n            </CNavbarNav>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Features</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Pricing</CNavLink>\n                </CNavItem>\n                <CDropdown variant=\"nav-item\" popper={false} mdxType=\"CDropdown\">\n                  <CDropdownToggle mdxType=\"CDropdownToggle\">Dropdown link</CDropdownToggle>\n                  <CDropdownMenu mdxType=\"CDropdownMenu\">\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Action</CDropdownItem>\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Another action</CDropdownItem>\n                    <CDropdownDivider mdxType=\"CDropdownDivider\" />\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Something else here</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n              </CNavbarNav>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h3>\n    <p>{`Place various form controls and components within a navbar:`}</p>\n    <Playground __position={7} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CForm className=\\\"d-flex\\\">\\n      <CFormControl type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n      <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n        Search\\n      </CButton>\\n    </CForm>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CForm className=\"d-flex\" mdxType=\"CForm\">\n        <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n        <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n      </CForm>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <p>{`Immediate child elements of `}<inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{` use flex layout and will default to `}<inlineCode parentName=\"p\">{`justify-content: space-between`}</inlineCode>{`. Use additional `}<a parentName=\"p\" {...{\n        \"href\": \"https://coreui.io/docs/4.0/utilities/flex/\"\n      }}>{`flex utilities`}</a>{` as needed to adjust this behavior.`}</p>\n    <Playground __position={8} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n    <CForm className=\\\"d-flex\\\">\\n      <CFormControl type=\\\"search\\\" className=\\\"me-2\\\" placeholder=\\\"Search\\\" />\\n      <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n        Search\\n      </CButton>\\n    </CForm>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n      <CForm className=\"d-flex\" mdxType=\"CForm\">\n        <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n        <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n      </CForm>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <p>{`Input groups work, too. If your navbar is an entire form, or mostly a form, you can use the `}<inlineCode parentName=\"p\">{`<CForm>`}</inlineCode>{` element as the container and save some HTML.`}</p>\n    <Playground __position={9} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CForm className=\\\"container-fluid\\\">\\n    <CInputGroup>\\n      <CInputGroupText id=\\\"basic-addon1\\\">@</CInputGroupText>\\n      <CFormControl\\n        placeholder=\\\"Username\\\"\\n        aria-label=\\\"Username\\\"\\n        aria-describedby=\\\"basic-addon1\\\"\\n      />\\n    </CInputGroup>\\n  </CForm>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CForm className=\"container-fluid\" mdxType=\"CForm\">\n      <CInputGroup mdxType=\"CInputGroup\">\n        <CInputGroupText id=\"basic-addon1\" mdxType=\"CInputGroupText\">@</CInputGroupText>\n        <CFormControl placeholder=\"Username\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" mdxType=\"CFormControl\" /> \n      </CInputGroup>\n    </CForm>\n  </CNavbar>\n    </Playground>\n    <p>{`Various buttons are supported as part of these navbar forms, too. This is also a great reminder that vertical alignment utilities can be used to align different sized elements.`}</p>\n    <Playground __position={10} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CForm className=\\\"container-fluid justify-content-start\\\">\\n    <CButton type=\\\"button\\\" color=\\\"success\\\" variant=\\\"outline\\\" className=\\\"me-2\\\">\\n      Main button\\n    </CButton>\\n    <CButton type=\\\"button\\\" color=\\\"secondary\\\" variant=\\\"outline\\\" size=\\\"sm\\\">\\n      Smaller button\\n    </CButton>\\n  </CForm>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CForm className=\"container-fluid justify-content-start\" mdxType=\"CForm\">\n      <CButton type=\"button\" color=\"success\" variant=\"outline\" className=\"me-2\" mdxType=\"CButton\">Main button</CButton>\n      <CButton type=\"button\" color=\"secondary\" variant=\"outline\" size=\"sm\" mdxType=\"CButton\">Smaller button</CButton>\n    </CForm>\n  </CNavbar>\n    </Playground>\n    <h3 {...{\n      \"id\": \"text\"\n    }}>{`Text`}</h3>\n    <p>{`Navbars may contain bits of text with the help of `}<inlineCode parentName=\"p\">{`<CNavbarText>`}</inlineCode>{`. This class adjusts vertical alignment and horizontal spacing for strings of text.`}</p>\n    <Playground __position={11} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarText>Navbar text with an inline element</CNavbarText>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarText mdxType=\"CNavbarText\">Navbar text with an inline element</CNavbarText>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <h2 {...{\n      \"id\": \"color-schemes\"\n    }}>{`Color schemes`}</h2>\n    <p>{`Theming the navbar has never been easier thanks to the combination of theming classes and `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{` utilities. Set `}<inlineCode parentName=\"p\">{`colorScheme=\"light\"`}</inlineCode>{` for use with light background colors, or `}<inlineCode parentName=\"p\">{`colorScheme=\"dark\"`}</inlineCode>{` for dark background colors. Then, customize with `}<inlineCode parentName=\"p\">{`.bg-*`}</inlineCode>{` utilities.`}</p>\n    <Playground __position={12} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"dark\\\" className=\\\"bg-dark\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n                <CDropdownToggle color=\\\"secondary\\\">\\n                  Dropdown button\\n                </CDropdownToggle>\\n                <CDropdownMenu>\\n                  <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                  <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                  <CDropdownDivider />\\n                  <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n                </CDropdownMenu>\\n              </CDropdown>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"light\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n      <br />\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"dark\\\" className=\\\"bg-primary\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n                <CDropdownToggle color=\\\"secondary\\\">\\n                  Dropdown button\\n                </CDropdownToggle>\\n                <CDropdownMenu>\\n                  <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                  <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                  <CDropdownDivider />\\n                  <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n                </CDropdownMenu>\\n              </CDropdown>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"light\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n      <br />\\n      <CNavbar\\n        expand=\\\"lg\\\"\\n        colorScheme=\\\"light\\\"\\n        style={{ backgroundColor: \\'#e3f2fd\\' }}\\n      >\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CDropdown variant=\\\"nav-item\\\" popper={false}>\\n                <CDropdownToggle color=\\\"secondary\\\">\\n                  Dropdown button\\n                </CDropdownToggle>\\n                <CDropdownMenu>\\n                  <CDropdownItem href=\\\"#\\\">Action</CDropdownItem>\\n                  <CDropdownItem href=\\\"#\\\">Another action</CDropdownItem>\\n                  <CDropdownDivider />\\n                  <CDropdownItem href=\\\"#\\\">Something else here</CDropdownItem>\\n                </CDropdownMenu>\\n              </CDropdown>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"primary\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"dark\" className=\"bg-dark\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CDropdown variant=\"nav-item\" popper={false} mdxType=\"CDropdown\">\n                  <CDropdownToggle color=\"secondary\" mdxType=\"CDropdownToggle\">Dropdown button</CDropdownToggle>\n                  <CDropdownMenu mdxType=\"CDropdownMenu\">\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Action</CDropdownItem>\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Another action</CDropdownItem>\n                    <CDropdownDivider mdxType=\"CDropdownDivider\" />\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Something else here</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"light\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n        <br />\n        <CNavbar expand=\"lg\" colorScheme=\"dark\" className=\"bg-primary\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CDropdown variant=\"nav-item\" popper={false} mdxType=\"CDropdown\">\n                  <CDropdownToggle color=\"secondary\" mdxType=\"CDropdownToggle\">Dropdown button</CDropdownToggle>\n                  <CDropdownMenu mdxType=\"CDropdownMenu\">\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Action</CDropdownItem>\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Another action</CDropdownItem>\n                    <CDropdownDivider mdxType=\"CDropdownDivider\" />\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Something else here</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"light\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n        <br />\n        <CNavbar expand=\"lg\" colorScheme=\"light\" style={{\n            backgroundColor: '#e3f2fd'\n          }} mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CDropdown variant=\"nav-item\" popper={false} mdxType=\"CDropdown\">\n                  <CDropdownToggle color=\"secondary\" mdxType=\"CDropdownToggle\">Dropdown button</CDropdownToggle>\n                  <CDropdownMenu mdxType=\"CDropdownMenu\">\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Action</CDropdownItem>\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Another action</CDropdownItem>\n                    <CDropdownDivider mdxType=\"CDropdownDivider\" />\n                    <CDropdownItem href=\"#\" mdxType=\"CDropdownItem\">Something else here</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"primary\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"containers\"\n    }}>{`Containers`}</h2>\n    <p>{`Although it's not required, you can wrap a `}<inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{` in a `}<inlineCode parentName=\"p\">{`<CContainer>`}</inlineCode>{` to center it on a page–though note that an inner container is still required. Or you can add a container inside the `}<inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{` to only center the contents of a `}<a parentName=\"p\" {...{\n        \"href\": \"#placement\"\n      }}>{`fixed or static top navbar`}</a>{`.`}</p>\n    <Playground __position={13} __code={'<CContainer>\\n  <CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n    <CContainer fluid>\\n      <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n    </CContainer>\\n  </CNavbar>\\n</CContainer>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CContainer mdxType=\"CContainer\">\n    <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n      <CContainer fluid mdxType=\"CContainer\">\n        <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n      </CContainer>\n    </CNavbar>\n  </CContainer>\n    </Playground>\n    <p>{`Use any of the responsive containers to change how wide the content in your navbar is presented.`}</p>\n    <Playground __position={14} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer breakpoint=\\\"md\\\">\\n    <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer breakpoint=\"md\" mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <h2 {...{\n      \"id\": \"placement\"\n    }}>{`Placement`}</h2>\n    <p>{`Use our `}<inlineCode parentName=\"p\">{`placement`}</inlineCode>{` properly to place navbars in non-static positions. Choose from fixed to the top, fixed to the bottom, or stickied to the top (scrolls with the page until it reaches the top, then stays there). Fixed navbars use `}<inlineCode parentName=\"p\">{`position: fixed`}</inlineCode>{`, meaning they're pulled from the normal flow of the DOM and may require custom CSS (e.g., `}<inlineCode parentName=\"p\">{`padding-top`}</inlineCode>{` on the `}<inlineCode parentName=\"p\">{`<body>`}</inlineCode>{`) to prevent overlap with other elements.`}</p>\n    <p>{`Also note that `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`.sticky-top`}</inlineCode>{` uses `}<inlineCode parentName=\"strong\">{`position: sticky`}</inlineCode>{`, which `}<a parentName=\"strong\" {...{\n          \"href\": \"https://caniuse.com/css-sticky\"\n        }}>{`isn't fully supported in every browser`}</a></strong>{`.`}</p>\n    <Playground __position={15} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Default</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Default</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <Playground __position={16} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"fixed-top\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Fixed top</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" placement=\"fixed-top\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Fixed top</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <Playground __position={17} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"fixed-bottom\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Fixed bottom</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" placement=\"fixed-bottom\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Fixed bottom</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <Playground __position={18} __code={'<CNavbar colorScheme=\\\"light\\\" className=\\\"bg-light\\\" placement=\\\"sticky-top\\\">\\n  <CContainer fluid>\\n    <CNavbarBrand href=\\\"#\\\">Sticky top</CNavbarBrand>\\n  </CContainer>\\n</CNavbar>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CNavbar colorScheme=\"light\" className=\"bg-light\" placement=\"sticky-top\" mdxType=\"CNavbar\">\n    <CContainer fluid mdxType=\"CContainer\">\n      <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Sticky top</CNavbarBrand>\n    </CContainer>\n  </CNavbar>\n    </Playground>\n    <h2 {...{\n      \"id\": \"responsive-behaviors\"\n    }}>{`Responsive behaviors`}</h2>\n    <p>{`Navbars can use `}<inlineCode parentName=\"p\">{`<CNavbarToggler>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<CCollapse>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`expand=\"{sm|md|lg|xl|xxl}\"`}</inlineCode>{` property to determine when their content collapses behind a button. In combination with other utilities, you can easily choose when to show or hide particular elements.`}</p>\n    <p>{`For navbars that never collapse, add the `}<inlineCode parentName=\"p\">{`expand`}</inlineCode>{` boolean property on the `}<inlineCode parentName=\"p\">{`<CNavbar>`}</inlineCode>{`. For navbars that always collapse, don't add any property.`}</p>\n    <h3 {...{\n      \"id\": \"toggler\"\n    }}>{`Toggler`}</h3>\n    <p>{`Navbar togglers are left-aligned by default, but should they follow a sibling element like a `}<inlineCode parentName=\"p\">{`<CNavbarBrand>`}</inlineCode>{`, they'll automatically be aligned to the far right. Reversing your markup will reverse the placement of the toggler. Below are examples of different toggle styles.`}</p>\n    <p>{`With no `}<inlineCode parentName=\"p\">{`<CNavbarBrand>`}</inlineCode>{` shown at the smallest breakpoint:`}</p>\n    <Playground __position={19} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarBrand href=\\\"#\\\">Hidden brand</CNavbarBrand>\\n            <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Hidden brand</CNavbarBrand>\n              <CNavbarNav className=\"me-auto mb-2 mb-lg-0\" mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <p>{`With a brand name shown on the left and toggler on the right:`}</p>\n    <Playground __position={20} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav className=\"me-auto mb-2 mb-lg-0\" mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <p>{`With a toggler on the left and brand name on the right:`}</p>\n    <Playground __position={21} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CNavbar expand=\\\"lg\\\" colorScheme=\\\"light\\\" className=\\\"bg-light\\\">\\n        <CContainer fluid>\\n          <CNavbarToggler onClick={() => setVisible(!visible)} />\\n          <CNavbarBrand href=\\\"#\\\">Navbar</CNavbarBrand>\\n          <CCollapse className=\\\"navbar-collapse\\\" visible={visible}>\\n            <CNavbarNav className=\\\"me-auto mb-2 mb-lg-0\\\">\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" active>\\n                  Home\\n                </CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\">Link</CNavLink>\\n              </CNavItem>\\n              <CNavItem>\\n                <CNavLink href=\\\"#\\\" disabled>\\n                  Disabled\\n                </CNavLink>\\n              </CNavItem>\\n            </CNavbarNav>\\n            <CForm className=\\\"d-flex\\\">\\n              <CFormControl\\n                type=\\\"search\\\"\\n                className=\\\"me-2\\\"\\n                placeholder=\\\"Search\\\"\\n              />\\n              <CButton type=\\\"submit\\\" color=\\\"success\\\" variant=\\\"outline\\\">\\n                Search\\n              </CButton>\\n            </CForm>\\n          </CCollapse>\\n        </CContainer>\\n      </CNavbar>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CContainer,\n      CCollapse,\n      CDropdown,\n      CDropdownDivider,\n      CDropdownHeader,\n      CDropdownItem,\n      CDropdownItemPlain,\n      CDropdownMenu,\n      CDropdownToggle,\n      CForm,\n      CFormControl,\n      CInputGroup,\n      CInputGroupText,\n      CNav,\n      CNavItem,\n      CNavLink,\n      CNavbar,\n      CNavbarBrand,\n      CNavbarNav,\n      CNavbarText,\n      CNavbarToggler,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CNavbar expand=\"lg\" colorScheme=\"light\" className=\"bg-light\" mdxType=\"CNavbar\">\n          <CContainer fluid mdxType=\"CContainer\">\n            <CNavbarToggler onClick={() => setVisible(!visible)} mdxType=\"CNavbarToggler\" />\n            <CNavbarBrand href=\"#\" mdxType=\"CNavbarBrand\">Navbar</CNavbarBrand>\n            <CCollapse className=\"navbar-collapse\" visible={visible} mdxType=\"CCollapse\">\n              <CNavbarNav className=\"me-auto mb-2 mb-lg-0\" mdxType=\"CNavbarNav\">\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" active mdxType=\"CNavLink\">\n                    Home\n                  </CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" mdxType=\"CNavLink\">Link</CNavLink>\n                </CNavItem>\n                <CNavItem mdxType=\"CNavItem\">\n                  <CNavLink href=\"#\" disabled mdxType=\"CNavLink\">\n                    Disabled\n                  </CNavLink>\n                </CNavItem>\n              </CNavbarNav>\n              <CForm className=\"d-flex\" mdxType=\"CForm\">\n                <CFormControl type=\"search\" className=\"me-2\" placeholder=\"Search\" mdxType=\"CFormControl\" />\n                <CButton type=\"submit\" color=\"success\" variant=\"outline\" mdxType=\"CButton\">Search</CButton>\n              </CForm>\n            </CCollapse>\n          </CContainer>\n        </CNavbar>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"cnavbar\"\n    }}>{`CNavbar`}</h3>\n    <Props of={CNavbar} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"cnavbarbrand\"\n    }}>{`CNavbarBrand`}</h3>\n    <Props of={CNavbarBrand} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"cnavbarnav\"\n    }}>{`CNavbarNav`}</h3>\n    <Props of={CNavbarNav} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"cnavbartext\"\n    }}>{`CNavbarText`}</h3>\n    <Props of={CNavbarText} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"cnavbartoggler\"\n    }}>{`CNavbarToggler`}</h3>\n    <Props of={CNavbarToggler} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}