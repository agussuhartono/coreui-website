(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"xsw+":function(e,t,o){"use strict";o.r(t),o.d(t,"_frontmatter",(function(){return s})),o.d(t,"default",(function(){return m}));var n=o("Fcif"),a=o("+I+c"),l=(o("mXGw"),o("/FXl")),r=o("BIGe"),d=o("ZFoC"),i=o("CEMk"),b=o("soAG"),c=o("13Mt"),s=(o("aD51"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/layout/gutters.mdx"}});var p={_frontmatter:s},C=r.a;function m(e){var t,o,m,u,g,j,O=e.components,h=Object(a.a)(e,["components"]);return Object(l.b)(C,Object(n.a)({},p,h,{components:O,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"how-they-work"},"How they work"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Gutters are the gaps between column content, created by horizontal ",Object(l.b)("inlineCode",{parentName:"strong"},"padding"),".")," We set ",Object(l.b)("inlineCode",{parentName:"p"},"padding-right")," and ",Object(l.b)("inlineCode",{parentName:"p"},"padding-left")," on each column, and use negative ",Object(l.b)("inlineCode",{parentName:"p"},"margin")," to offset that at the start and end of each row to align content.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Gutters start at ",Object(l.b)("inlineCode",{parentName:"strong"},"1.5rem")," (",Object(l.b)("inlineCode",{parentName:"strong"},"24px"),") wide.")," This allows us to match our grid to the ",Object(l.b)("a",{parentName:"p",href:"https://coreui.io/docs/utilities/spacing"},"padding and margin spacers")," scale.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},Object(l.b)("strong",{parentName:"p"},"Gutters can be responsively adjusted.")," Use breakpoint-specific gutter props to modify horizontal gutters, vertical gutters, and all gutters."))),Object(l.b)("h2",{id:"horizontal-gutters"},"Horizontal gutters"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ gutterX: * }}")," props can be used to control the horizontal gutter widths. The ",Object(l.b)("inlineCode",{parentName:"p"},"<CContainer>")," or ",Object(l.b)("inlineCode",{parentName:"p"},"<CContainer fluid>")," parent may need to be adjusted if larger gutters are used too to avoid unwanted overflow, using a matching padding utility. For example, in the following example we've increased the padding with ",Object(l.b)("inlineCode",{parentName:"p"},".px-4"),":"),Object(l.b)(d.c,{__position:0,__code:'<CContainer className="px-4">\n  <CRow xs={{ gutterX: 5 }}>\n    <CCol>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n  </CRow>\n</CContainer>',__scope:(t={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},t.DefaultLayout=r.a,t._frontmatter=s,t),mdxType:"Playground"},Object(l.b)(b.a,{className:"px-4",mdxType:"CContainer"},Object(l.b)(c.a,{xs:{gutterX:5},mdxType:"CRow"},Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding"))))),Object(l.b)("p",null,"An alternative solution is to add a wrapper around the ",Object(l.b)("inlineCode",{parentName:"p"},"<CRow>")," with the ",Object(l.b)("inlineCode",{parentName:"p"},".overflow-hidden")," class:"),Object(l.b)(d.c,{__position:1,__code:'<CContainer className="overflow-hidden">\n  <CRow xs={{ gutterX: 5 }}>\n    <CCol>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n  </CRow>\n</CContainer>',__scope:(o={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},o.DefaultLayout=r.a,o._frontmatter=s,o),mdxType:"Playground"},Object(l.b)(b.a,{className:"overflow-hidden",mdxType:"CContainer"},Object(l.b)(c.a,{xs:{gutterX:5},mdxType:"CRow"},Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding"))))),Object(l.b)("h2",{id:"vertical-gutters"},"Vertical gutters"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ gutterY: * }}")," props can be used to control the vertical gutter widths. Like the horizontal gutters, the vertical gutters can cause some overflow below the ",Object(l.b)("inlineCode",{parentName:"p"},"<CRow>")," at the end of a page. If this occurs, you add a wrapper around ",Object(l.b)("inlineCode",{parentName:"p"},"<CRow>")," with the ",Object(l.b)("inlineCode",{parentName:"p"},".overflow-hidden")," class:"),Object(l.b)(d.c,{__position:2,__code:'<CContainer className="overflow-hidden">\n  <CRow xs={{ gutterY: 5 }}>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n  </CRow>\n</CContainer>',__scope:(m={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},m.DefaultLayout=r.a,m._frontmatter=s,m),mdxType:"Playground"},Object(l.b)(b.a,{className:"overflow-hidden",mdxType:"CContainer"},Object(l.b)(c.a,{xs:{gutterY:5},mdxType:"CRow"},Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding"))))),Object(l.b)("h2",{id:"horizontal--vertical-gutters"},"Horizontal & vertical gutters"),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ gutter: * }}")," props can be used to control the horizontal gutter widths, for the following example we use a smaller gutter width, so there won't be a need to add the ",Object(l.b)("inlineCode",{parentName:"p"},".overflow-hidden")," wrapper class."),Object(l.b)(d.c,{__position:3,__code:'<CContainer>\n  <CRow xs={{ gutter: 2 }}>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n    <CCol xs={{ span: 6 }}>\n      <div className="p-3 border bg-light">Custom column padding</div>\n    </CCol>\n  </CRow>\n</CContainer>',__scope:(u={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},u.DefaultLayout=r.a,u._frontmatter=s,u),mdxType:"Playground"},Object(l.b)(b.a,{mdxType:"CContainer"},Object(l.b)(c.a,{xs:{gutter:2},mdxType:"CRow"},Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding")),Object(l.b)(i.a,{xs:{span:6},mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Custom column padding"))))),Object(l.b)("h2",{id:"row-columns-gutters"},"Row columns gutters"),Object(l.b)("p",null,"Gutter props can also be added to ",Object(l.b)("a",{parentName:"p",href:"../layout/grid#row-columns"},"row columns"),". In the following example, we use responsive row columns and responsive gutter props."),Object(l.b)(d.c,{__position:4,__code:'<CContainer>\n  <CRow xs={{ cols: 2, gutter: 2 }} lg={{ cols: 5, gutter: 3 }}>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n    <CCol>\n      <div className="p-3 border bg-light">Row column</div>\n    </CCol>\n  </CRow>\n</CContainer>',__scope:(g={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},g.DefaultLayout=r.a,g._frontmatter=s,g),mdxType:"Playground"},Object(l.b)(b.a,{mdxType:"CContainer"},Object(l.b)(c.a,{xs:{cols:2,gutter:2},lg:{cols:5,gutter:3},mdxType:"CRow"},Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column")),Object(l.b)(i.a,{mdxType:"CCol"},Object(l.b)("div",{className:"p-3 border bg-light"},"Row column"))))),Object(l.b)("h2",{id:"no-gutters"},"No gutters"),Object(l.b)("p",null,"The gutters between columns in our predefined grid props can be removed with ",Object(l.b)("inlineCode",{parentName:"p"},"{breakpoint}={{ gutter: 0 }}"),". This removes the negative ",Object(l.b)("inlineCode",{parentName:"p"},"margin"),"s from ",Object(l.b)("inlineCode",{parentName:"p"},"<CRow>")," and the horizontal ",Object(l.b)("inlineCode",{parentName:"p"},"padding")," from all immediate children columns."),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Need an edge-to-edge design?")," Drop the parent ",Object(l.b)("inlineCode",{parentName:"p"},"<CContainer>")," or ",Object(l.b)("inlineCode",{parentName:"p"},"<CContainer fluid>"),"."),Object(l.b)("p",null,"In practice, here's how it looks. Note you can continue to use this with all other predefined grid props (including column widths, responsive tiers, reorders, and more)."),Object(l.b)(d.c,{__position:5,__code:'<div className="docs-example-row">\n  <CRow xs={{ gutter: 0 }}>\n    <CCol sm={6} md={8}>\n      .col-sm-6 .col-md-8\n    </CCol>\n    <CCol xs={6} md={4}>\n      .col-6 .col-md-4\n    </CCol>\n  </CRow>\n</div>',__scope:(j={props:h,DefaultLayout:r.a,Playground:d.c,Props:d.d,CCol:i.a,CContainer:b.a,CRow:c.a},j.DefaultLayout=r.a,j._frontmatter=s,j),mdxType:"Playground"},Object(l.b)("div",{className:"docs-example-row"},Object(l.b)(c.a,{xs:{gutter:0},mdxType:"CRow"},Object(l.b)(i.a,{sm:6,md:8,mdxType:"CCol"},".col-sm-6 .col-md-8"),Object(l.b)(i.a,{xs:6,md:4,mdxType:"CCol"},".col-6 .col-md-4")))),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("h3",{id:"ccontainer"},"CContainer"),Object(l.b)(d.d,{of:b.a,mdxType:"Props"}),Object(l.b)("h3",{id:"crow"},"CRow"),Object(l.b)(d.d,{of:c.a,mdxType:"Props"}),Object(l.b)("h3",{id:"ccol"},"CCol"),Object(l.b)(d.d,{of:i.a,mdxType:"Props"}))}void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!m.hasOwnProperty("__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/layout/gutters.mdx"}}),m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-layout-gutters-mdx-8e9a5133057118a76814.js.map