{"version":3,"sources":["webpack:///../docs/layout/breakpoints.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","className","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,iBADR,iBAGA,sBACE,kBAAIC,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,6DAAnB,kGAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,0DAAnB,oKAAkR,0BAAYA,WAAW,KAAvB,aAAlR,2BAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,sBAAQA,WAAW,KAAnB,gDAAnB,uRAGJ,kBACE,GAAM,yBADR,yBAGA,uGAAsF,kBAAIA,WAAW,KAAf,cAAtF,2GACA,qBAAOC,UAAU,SACnB,yBACE,sBACE,oCACA,qCACA,sCAGJ,yBACE,sBACE,iCACA,sBAAI,+BACJ,iCAEF,sBACE,+BACA,sBAAI,+BACJ,iCAEF,sBACE,gCACA,sBAAI,+BACJ,iCAEF,sBACE,+BACA,sBAAI,+BACJ,iCAEF,sBACE,qCACA,sBAAI,+BACJ,kCAEF,sBACE,2CACA,sBAAI,gCACJ,oCAIF,8WACA,0GAAyF,0BAAYD,WAAW,KAAvB,mBAAzF,gBACA,8FACA,wHAAuG,iBAAGA,WAAW,IACjH,KAAQ,+CAD2F,8CAAvG,KAGA,kBACE,GAAM,iBADR,iBAGA,uGAAsF,iBAAGA,WAAW,IAChG,KAAQ,sFAD0E,iBAAtF,4LAGA,kBACE,GAAM,aADR,aAGA,iLACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,0iBAuBL,sIACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,0iBAoBL,kBACE,GAAM,aADR,aAGA,gHAA+F,kBAAIA,WAAW,KAAf,cAA/F,MACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,gdAgBL,+EAA8D,0BAAYA,WAAW,KAAvB,SAA9D,mCAAmJ,0BAAYA,WAAW,KAAvB,aAAnJ,yBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,mkBAoBL,8HAGA,kBACE,GAAM,qBADR,qBAGA,gKACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,8QASL,wCAAuB,0BAAYA,WAAW,KAAvB,8CAAvB,qBACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,kEAIL,kBACE,GAAM,uBADR,uBAGA,sFACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,wDAIL,0CACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,iBADZ,iK,2MAUTJ,EAAWM,gBAAiB","file":"component---docs-layout-breakpoints-mdx-4e05f8ec631d7a609dcf.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"core-concepts\"\n    }}>{`Core concepts`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Breakpoints are the building blocks of responsive design.`}</strong>{` Use them to control when your layout can be adapted at a particular viewport or device size.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Use media queries to architect your CSS by breakpoint.`}</strong>{` Media queries are a feature of CSS that allow you to conditionally apply styles based on a set of browser and operating system parameters. We most commonly use `}<inlineCode parentName=\"p\">{`min-width`}</inlineCode>{` in our media queries.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Mobile first, responsive design is the goal.`}</strong>{` CoreUI's CSS aims to apply the bare minimum of styles to make a layout work at the smallest breakpoint, and then layers on styles to adjust that design for larger devices. This optimizes your CSS, improves rendering time, and provides a great experience for your visitors.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"available-breakpoints\"\n    }}>{`Available breakpoints`}</h2>\n    <p>{`CoreUI for React.js includes six default breakpoints, sometimes referred to as `}<em parentName=\"p\">{`grid tiers`}</em>{`, for building responsively. These breakpoints can be customized if you're using our source Sass files.`}</p>\n    <table className=\"table\">\n  <thead>\n    <tr>\n      <th>Breakpoint</th>\n      <th>Class infix</th>\n      <th>Dimensions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>X-Small</td>\n      <td><em>None</em></td>\n      <td>&lt;576px</td>\n    </tr>\n    <tr>\n      <td>Small</td>\n      <td><code>sm</code></td>\n      <td>&ge;576px</td>\n    </tr>\n    <tr>\n      <td>Medium</td>\n      <td><code>md</code></td>\n      <td>&ge;768px</td>\n    </tr>\n    <tr>\n      <td>Large</td>\n      <td><code>lg</code></td>\n      <td>&ge;992px</td>\n    </tr>\n    <tr>\n      <td>Extra large</td>\n      <td><code>xl</code></td>\n      <td>&ge;1200px</td>\n    </tr>\n    <tr>\n      <td>Extra extra large</td>\n      <td><code>xxl</code></td>\n      <td>&ge;1400px</td>\n    </tr>\n  </tbody>\n    </table>\n    <p>{`Each breakpoint was chosen to comfortably hold containers whose widths are multiples of 12. Breakpoints are also representative of a subset of common device sizes and viewport dimensions—they don't specifically target every use case or device. Instead, the ranges provide a strong and consistent foundation to build on for nearly any device.`}</p>\n    <p>{`These breakpoints are customizable via Sass—you'll find them in a Sass map in our `}<inlineCode parentName=\"p\">{`_variables.scss`}</inlineCode>{` stylesheet.`}</p>\n    <p>{`{{< scss-docs name=\"grid-breakpoints\" file=\"scss/_variables.scss\" >}}`}</p>\n    <p>{`For more information and examples on how to modify our Sass maps and variables, please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://coreui.io/docs/4.0/layout/grid#sass\"\n      }}>{`the Sass section of the Grid documentation`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"media-queries\"\n    }}>{`Media queries`}</h2>\n    <p>{`Since CoreUI for React.js is developed to be mobile first, we use a handful of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\"\n      }}>{`media queries`}</a>{` to create sensible breakpoints for our layouts and interfaces. These breakpoints are mostly based on minimum viewport widths and allow us to scale up elements as the viewport changes.`}</p>\n    <h3 {...{\n      \"id\": \"min-width\"\n    }}>{`Min-width`}</h3>\n    <p>{`CoreUI for React.js primarily uses the following media query ranges—or breakpoints—in our source Sass files for our layout, grid system, and components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Source mixins\n\n// No media query necessary for xs breakpoint as it's effectively \\`@media (min-width: 0) { ... }\\`\n@include media-breakpoint-up(sm) { ... }\n@include media-breakpoint-up(md) { ... }\n@include media-breakpoint-up(lg) { ... }\n@include media-breakpoint-up(xl) { ... }\n@include media-breakpoint-up(xxl) { ... }\n\n// Usage\n\n// Example: Hide starting at \\`min-width: 0\\`, and then show at the \\`sm\\` breakpoint\n.custom-class {\n  display: none;\n}\n@include media-breakpoint-up(sm) {\n  .custom-class {\n    display: block;\n  }\n}\n`}</code></pre>\n    <p>{`These Sass mixins translate in our compiled CSS using the values declared in our Sass variables. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// X-Small devices (portrait phones, less than 576px)\n// No media query for \\`xs\\` since this is the default in CoreUI\n\n// Small devices (landscape phones, 576px and up)\n@media (min-width: 576px) { ... }\n\n// Medium devices (tablets, 768px and up)\n@media (min-width: 768px) { ... }\n\n// Large devices (desktops, 992px and up)\n@media (min-width: 992px) { ... }\n\n// X-Large devices (large desktops, 1200px and up)\n@media (min-width: 1200px) { ... }\n\n// XX-Large devices (larger desktops, 1400px and up)\n@media (min-width: 1400px) { ... }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"max-width\"\n    }}>{`Max-width`}</h3>\n    <p>{`We occasionally use media queries that go in the other direction (the given screen size `}<em parentName=\"p\">{`or smaller`}</em>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// No media query necessary for xs breakpoint as it's effectively \\`@media (max-width: 0) { ... }\\`\n@include media-breakpoint-down(sm) { ... }\n@include media-breakpoint-down(md) { ... }\n@include media-breakpoint-down(lg) { ... }\n@include media-breakpoint-down(xl) { ... }\n@include media-breakpoint-down(xxl) { ... }\n\n// Example: Style from medium breakpoint and down\n@include media-breakpoint-down(md) {\n  .custom-class {\n    display: block;\n  }\n}\n`}</code></pre>\n    <p>{`These mixins take those declared breakpoints, subtract `}<inlineCode parentName=\"p\">{`.02px`}</inlineCode>{` from them, and use them as our `}<inlineCode parentName=\"p\">{`max-width`}</inlineCode>{` values. For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// X-Small devices (portrait phones, less than 576px)\n@media (max-width: 575.98px) { ... }\n\n// Small devices (landscape phones, less than 768px)\n@media (max-width: 767.98px) { ... }\n\n// Medium devices (tablets, less than 992px)\n@media (max-width: 991.98px) { ... }\n\n// Large devices (desktops, less than 1200px)\n@media (max-width: 1199.98px) { ... }\n\n// X-Large devices (large desktops, less than 1400px)\n@media (max-width: 1399.98px) { ... }\n\n// XX-Large devices (larger desktops)\n// No media query since the xxl breakpoint has no upper bound on its width\n`}</code></pre>\n    <p>{`{{< callout warning >}}\n{{< partial \"callout-info-mediaqueries-breakpoints.md\" >}}\n{{< /callout >}}`}</p>\n    <h3 {...{\n      \"id\": \"single-breakpoint\"\n    }}>{`Single breakpoint`}</h3>\n    <p>{`There are also media queries and mixins for targeting a single segment of screen sizes using the minimum and maximum breakpoint widths.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@include media-breakpoint-only(xs) { ... }\n@include media-breakpoint-only(sm) { ... }\n@include media-breakpoint-only(md) { ... }\n@include media-breakpoint-only(lg) { ... }\n@include media-breakpoint-only(xl) { ... }\n@include media-breakpoint-only(xxl) { ... }\n`}</code></pre>\n    <p>{`For example the `}<inlineCode parentName=\"p\">{`@include media-breakpoint-only(md) { ... }`}</inlineCode>{` will result in :`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@media (min-width: 768px) and (max-width: 991.98px) { ... }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"between-breakpoints\"\n    }}>{`Between breakpoints`}</h3>\n    <p>{`Similarly, media queries may span multiple breakpoint widths:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`@include media-breakpoint-between(md, xl) { ... }\n`}</code></pre>\n    <p>{`Which results in:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`// Example\n// Apply styles starting from medium devices and up to extra large devices\n@media (min-width: 768px) and (max-width: 1199.98px) { ... }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}