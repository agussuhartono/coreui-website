{"version":3,"sources":["webpack:///../src/components/form/CForm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","CButton","CForm","CFormCheck","CFormControl","CFormLabel","CFormSelect","CFormText","CCol","CRow","className","htmlFor","type","id","aria-describedby","label","onChange","e","console","log","target","color","xs","component","disabled","placeholder","isMDXComponent"],"mappings":"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","file":"component---src-components-form-c-form-mdx-92e94d841c26527c40f2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CButton } from '../button/CButton';\nimport { CForm } from './CForm';\nimport { CFormCheck } from './CFormCheck';\nimport { CFormControl } from './CFormControl';\nimport { CFormLabel } from './CFormLabel';\nimport { CFormSelect } from './CFormSelect';\nimport { CFormText } from './CFormText';\nimport { CCol } from '../grid/CCol';\nimport { CRow } from '../grid/CRow';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`CoreUI’s form controls expand on our Rebooted form styles with classes. Use these classes to opt into their customized displays for a more consistent rendering across browsers and devices.`}</p>\n    <p>{`Be sure to use an appropriate `}<inlineCode parentName=\"p\">{`type`}</inlineCode>{` attribute on all inputs (e.g., `}<inlineCode parentName=\"p\">{`email`}</inlineCode>{` for email address or `}<inlineCode parentName=\"p\">{`number`}</inlineCode>{` for numerical information) to take advantage of newer input controls like email verification, number selection, and more.`}</p>\n    <p>{`Here’s a quick example to demonstrate CoreUI’s form styles. Keep reading for documentation on required classes, form layout, and more.`}</p>\n    <Playground __position={0} __code={'<CForm>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"exampleInputEmail1\\\">Email address</CFormLabel>\\n    <CFormControl\\n      type=\\\"email\\\"\\n      id=\\\"exampleInputEmail1\\\"\\n      aria-describedby=\\\"emailHelp\\\"\\n    />\\n    <CFormText id=\\\"emailHelp\\\">\\n      We\\'ll never share your email with anyone else.\\n    </CFormText>\\n  </div>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"exampleInputPassword1\\\">Email Password</CFormLabel>\\n    <CFormControl type=\\\"password\\\" id=\\\"exampleInputPassword1\\\" />\\n  </div>\\n  <CFormCheck\\n    className=\\\"mb-3\\\"\\n    label=\\\"Check me out\\\"\\n    onChange={e => {\\n      console.log(e.target)\\n    }}\\n  />\\n  <CButton type=\\\"submit\\\" color=\\\"primary\\\">\\n    Submit\\n  </CButton>\\n</CForm>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CButton,\n      CForm,\n      CFormCheck,\n      CFormControl,\n      CFormLabel,\n      CFormSelect,\n      CFormText,\n      CCol,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CForm mdxType=\"CForm\">\n    <div className=\"mb-3\">\n      <CFormLabel htmlFor=\"exampleInputEmail1\" mdxType=\"CFormLabel\">Email address</CFormLabel>\n      <CFormControl type=\"email\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" mdxType=\"CFormControl\" />\n      <CFormText id=\"emailHelp\" mdxType=\"CFormText\">We'll never share your email with anyone else.</CFormText>\n    </div>\n    <div className=\"mb-3\">\n      <CFormLabel htmlFor=\"exampleInputPassword1\" mdxType=\"CFormLabel\">Email Password</CFormLabel>\n      <CFormControl type=\"password\" id=\"exampleInputPassword1\" mdxType=\"CFormControl\" />\n    </div>\n    <CFormCheck className=\"mb-3\" label=\"Check me out\" onChange={e => {\n          console.log(e.target);\n        }} mdxType=\"CFormCheck\" />\n        <CButton type=\"submit\" color=\"primary\" mdxType=\"CButton\">\n  Submit\n        </CButton>\n  </CForm>\n    </Playground>\n    <h2 {...{\n      \"id\": \"form-text\"\n    }}>{`Form text`}</h2>\n    <p>{`Block-level or inline-level form text can be created using `}<inlineCode parentName=\"p\">{`<CFormText>`}</inlineCode>{`.`}</p>\n    <p>{`Associating form text with form controls\nForm text should be explicitly associated with the form control it relates to using the aria-describedby attribute. This will ensure that assistive technologies—such as screen readers—will announce this form text when the user focuses or enters the control.`}</p>\n    <p>{`Form text below inputs can be styled with `}<inlineCode parentName=\"p\">{`<CFormText>`}</inlineCode>{`. If a block-level element will be used, a top margin is added for easy spacing from the inputs above.`}</p>\n    <Playground __position={1} __code={'<CForm>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"inputPassword5\\\">Password</CFormLabel>\\n    <CFormControl\\n      type=\\\"password\\\"\\n      id=\\\"inputPassword5\\\"\\n      aria-describedby=\\\"passwordHelpBlock\\\"\\n    />\\n    <CFormText id=\\\"passwordHelpBlock\\\">\\n      Your password must be 8-20 characters long, contain letters and numbers,\\n      and must not contain spaces, special characters, or emoji.\\n    </CFormText>\\n  </div>\\n</CForm>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CButton,\n      CForm,\n      CFormCheck,\n      CFormControl,\n      CFormLabel,\n      CFormSelect,\n      CFormText,\n      CCol,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CForm mdxType=\"CForm\">\n    <div className=\"mb-3\">\n      <CFormLabel htmlFor=\"inputPassword5\" mdxType=\"CFormLabel\">Password</CFormLabel>\n      <CFormControl type=\"password\" id=\"inputPassword5\" aria-describedby=\"passwordHelpBlock\" mdxType=\"CFormControl\" />\n      <CFormText id=\"passwordHelpBlock\" mdxType=\"CFormText\">\n        Your password must be 8-20 characters long, contain letters and numbers, and must not\n        contain spaces, special characters, or emoji.\n      </CFormText>\n    </div>\n  </CForm>\n    </Playground>\n    <p>{`Inline text can use any typical inline HTML element (be it a `}<inlineCode parentName=\"p\">{`<span>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<small>`}</inlineCode>{`, or something else) with nothing more than the `}<inlineCode parentName=\"p\">{`.form-text`}</inlineCode>{` class.`}</p>\n    <Playground __position={2} __code={'<CRow className=\\\"g-3 align-items-center\\\">\\n  <CCol xs=\\\"auto\\\">\\n    <CFormLabel htmlFor=\\\"inputPassword6\\\" className=\\\"col-form-label\\\">\\n      Password\\n    </CFormLabel>\\n  </CCol>\\n  <CCol xs=\\\"auto\\\">\\n    <CFormControl\\n      type=\\\"password\\\"\\n      id=\\\"inputPassword6\\\"\\n      aria-describedby=\\\"passwordHelpInline\\\"\\n    />\\n  </CCol>\\n  <CCol xs=\\\"auto\\\">\\n    <CFormText component=\\\"span\\\" id=\\\"passwordHelpInline\\\">\\n      Must be 8-20 characters long.\\n    </CFormText>\\n  </CCol>\\n</CRow>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CButton,\n      CForm,\n      CFormCheck,\n      CFormControl,\n      CFormLabel,\n      CFormSelect,\n      CFormText,\n      CCol,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CRow className=\"g-3 align-items-center\" mdxType=\"CRow\">\n    <CCol xs=\"auto\" mdxType=\"CCol\">\n      <CFormLabel htmlFor=\"inputPassword6\" className=\"col-form-label\" mdxType=\"CFormLabel\">Password</CFormLabel>\n    </CCol>\n    <CCol xs=\"auto\" mdxType=\"CCol\">\n      <CFormControl type=\"password\" id=\"inputPassword6\" aria-describedby=\"passwordHelpInline\" mdxType=\"CFormControl\" />\n    </CCol>\n    <CCol xs=\"auto\" mdxType=\"CCol\">\n      <CFormText component=\"span\" id=\"passwordHelpInline\" mdxType=\"CFormText\">\n        Must be 8-20 characters long.\n      </CFormText>\n    </CCol>\n  </CRow>\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled-forms\"\n    }}>{`Disabled forms`}</h2>\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` boolean attribute on an input to prevent user interactions and make it appear lighter.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`<CFormLabel id=\"disabledInput\" type=\"text\" placeholder=\"Disabled input here...\" disabled/>\n`}</code></pre>\n    <p>{`Add the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` attribute to a `}<inlineCode parentName=\"p\">{`<fieldset>`}</inlineCode>{` to disable all the controls within. Browsers treat all native form controls (`}<inlineCode parentName=\"p\">{`<input>`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`<select>`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`<button>`}</inlineCode>{` elements) inside a `}<inlineCode parentName=\"p\">{`<fieldset disabled>`}</inlineCode>{` as disabled, preventing both keyboard and mouse interactions on them.`}</p>\n    <p>{`However, if your form also includes custom button-like elements such as `}<inlineCode parentName=\"p\">{`<CButton>...</CButton>`}</inlineCode>{`, these will only be given a style of `}<inlineCode parentName=\"p\">{`pointer-events: none`}</inlineCode>{`, meaning they are still focusable and operable using the keyboard. In this case, you must manually modify these controls by adding `}<inlineCode parentName=\"p\">{`tabindex=\"-1\"`}</inlineCode>{` to prevent them from receiving focus and `}<inlineCode parentName=\"p\">{`aria-disabled=\"disabled\"`}</inlineCode>{` to signal their state to assistive technologies.`}</p>\n    <Playground __position={3} __code={'<CForm>\\n  <fieldset disabled>\\n    <legend>Disabled fieldset example</legend>\\n    <div className=\\\"mb-3\\\">\\n      <CFormLabel htmlFor=\\\"disabledTextInput\\\">Disabled input</CFormLabel>\\n      <CFormControl id=\\\"disabledTextInput\\\" placeholder=\\\"Disabled input\\\" />\\n    </div>\\n    <div className=\\\"mb-3\\\">\\n      <CFormLabel htmlFor=\\\"disabledSelect\\\">Disabled select menu</CFormLabel>\\n      <CFormSelect id=\\\"disabledSelect\\\">\\n        <option>Disabled select</option>\\n      </CFormSelect>\\n    </div>\\n    <div className=\\\"mb-3\\\">\\n      <CFormCheck\\n        id=\\\"disabledFieldsetCheck\\\"\\n        label=\\\"Can\\'t check this\\\"\\n        disabled\\n      />\\n    </div>\\n    <CButton type=\\\"submit\\\">Submit</CButton>\\n  </fieldset>\\n</CForm>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CButton,\n      CForm,\n      CFormCheck,\n      CFormControl,\n      CFormLabel,\n      CFormSelect,\n      CFormText,\n      CCol,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CForm mdxType=\"CForm\">\n    <fieldset disabled>\n      <legend>Disabled fieldset example</legend>\n      <div className=\"mb-3\">\n        <CFormLabel htmlFor=\"disabledTextInput\" mdxType=\"CFormLabel\">Disabled input</CFormLabel>\n        <CFormControl id=\"disabledTextInput\" placeholder=\"Disabled input\" mdxType=\"CFormControl\" />\n      </div>\n      <div className=\"mb-3\">\n        <CFormLabel htmlFor=\"disabledSelect\" mdxType=\"CFormLabel\">Disabled select menu</CFormLabel>\n        <CFormSelect id=\"disabledSelect\" mdxType=\"CFormSelect\">\n          <option>Disabled select</option>\n        </CFormSelect>\n      </div>\n      <div className=\"mb-3\">\n        <CFormCheck id=\"disabledFieldsetCheck\" label=\"Can't check this\" disabled mdxType=\"CFormCheck\" />\n      </div>\n      <CButton type=\"submit\" mdxType=\"CButton\">Submit</CButton>\n    </fieldset>\n  </CForm>\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}