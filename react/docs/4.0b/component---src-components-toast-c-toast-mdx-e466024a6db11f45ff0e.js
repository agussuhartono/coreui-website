(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{FaD7:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return T})),a.d(t,"default",(function(){return g}));var o=a("Fcif"),s=a("+I+c"),n=a("mXGw"),l=a("/FXl"),i=a("BIGe"),r=a("ZFoC"),c=a("758a"),d=a("iw6P"),m=a("9O+I"),b=a("7i5X"),u=a("ni8l"),p=a("gfrc"),C=a("D3pV"),T=(a("aD51"),{});void 0!==T&&T&&T===Object(T)&&Object.isExtensible(T)&&!T.hasOwnProperty("__filemeta")&&Object.defineProperty(T,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/components/toast/CToast.mdx"}});var h={_frontmatter:T},f=i.a;function g(e){var t,a,g,y,j,O,w,x=e.components,v=Object(s.a)(e,["components"]);return Object(l.b)(f,Object(o.a)({},h,v,{components:x,mdxType:"MDXLayout"}),Object(l.b)("p",null,"React toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They’re built with flexbox, so they’re easy to align and position."),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("p",null,"Things to know when using the toast plugin:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Toasts are opt-in for performance reasons, so ",Object(l.b)("strong",{parentName:"li"},"you must initialize them yourself"),"."),Object(l.b)("li",{parentName:"ul"},"Toasts will automatically hide if you do not specify ",Object(l.b)("inlineCode",{parentName:"li"},"autohide: false"),".")),Object(l.b)("h2",{id:"examples"},"Examples"),Object(l.b)("h3",{id:"basic"},"Basic"),Object(l.b)("p",null,"To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use ",Object(l.b)("inlineCode",{parentName:"p"},"display: flex"),", allowing easy alignment of content thanks to our margin and flexbox utilities."),Object(l.b)("p",null,'Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your "toasted" content and strongly encourage a dismiss button.'),Object(l.b)(r.c,{__position:0,__code:'<CToast title="CoreUI for React.js" autohide={false}>\n  <CToastHeader close>\n    <svg\n      className="rounded me-2"\n      width="20"\n      height="20"\n      xmlns="http://www.w3.org/2000/svg"\n      preserveAspectRatio="xMidYMid slice"\n      focusable="false"\n      role="img"\n    >\n      <rect width="100%" height="100%" fill="#007aff"></rect>\n    </svg>\n    <strong className="me-auto">CoreUI for React.js</strong>\n    <small>7 min ago</small>\n  </CToastHeader>\n  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n</CToast>',__scope:(t={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},t.DefaultLayout=i.a,t._frontmatter=T,t),mdxType:"Playground"},Object(l.b)(m.a,{title:"CoreUI for React.js",autohide:!1,mdxType:"CToast"},Object(l.b)(p.a,{close:!0,mdxType:"CToastHeader"},Object(l.b)("svg",{className:"rounded me-2",width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},Object(l.b)("rect",{width:"100%",height:"100%",fill:"#007aff"})),Object(l.b)("strong",{className:"me-auto"},"CoreUI for React.js"),Object(l.b)("small",null,"7 min ago")),Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message."))),Object(l.b)(r.c,{__position:1,__code:'() => {\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n  const exampleToast = (\n    <CToast title="CoreUI for React.js">\n      <CToastHeader close>\n        <svg\n          className="rounded me-2"\n          width="20"\n          height="20"\n          xmlns="http://www.w3.org/2000/svg"\n          preserveAspectRatio="xMidYMid slice"\n          focusable="false"\n          role="img"\n        >\n          <rect width="100%" height="100%" fill="#007aff"></rect>\n        </svg>\n        <strong className="me-auto">CoreUI for React.js</strong>\n        <small>7 min ago</small>\n      </CToastHeader>\n      <CToastBody>Hello, world! This is a toast message.</CToastBody>\n    </CToast>\n  )\n  return (\n    <>\n      <CButton onClick={() => addToast(exampleToast)}>Send a toast</CButton>\n      <CToaster ref={toaster} push={toast} placement="top-end" />\n    </>\n  )\n}',__scope:(a={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},a.DefaultLayout=i.a,a._frontmatter=T,a),mdxType:"Playground"},(function(){var e=Object(n.useState)(0),t=e[0],a=e[1],o=Object(n.useRef)(),s=Object(l.b)(m.a,{title:"CoreUI for React.js",mdxType:"CToast"},Object(l.b)(p.a,{close:!0,mdxType:"CToastHeader"},Object(l.b)("svg",{className:"rounded me-2",width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},Object(l.b)("rect",{width:"100%",height:"100%",fill:"#007aff"})),Object(l.b)("strong",{className:"me-auto"},"CoreUI for React.js"),Object(l.b)("small",null,"7 min ago")),Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message."));return Object(l.b)(n.Fragment,null,Object(l.b)(c.a,{onClick:function(){return a(s)},mdxType:"CButton"},"Send a toast"),Object(l.b)(C.a,{ref:o,push:t,placement:"top-end",mdxType:"CToaster"}))})),Object(l.b)("h3",{id:"translucent"},"Translucent"),Object(l.b)("p",null,"Toasts are slightly translucent to blend in with what's below them."),Object(l.b)(r.c,{__position:2,__code:'<div className="bg-dark p-3">\n  <CToast title="CoreUI for React.js" autohide={false}>\n    <CToastHeader close>\n      <svg\n        className="rounded me-2"\n        width="20"\n        height="20"\n        xmlns="http://www.w3.org/2000/svg"\n        preserveAspectRatio="xMidYMid slice"\n        focusable="false"\n        role="img"\n      >\n        <rect width="100%" height="100%" fill="#007aff"></rect>\n      </svg>\n      <strong className="me-auto">CoreUI for React.js</strong>\n      <small>7 min ago</small>\n    </CToastHeader>\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\n  </CToast>\n</div>',__scope:(g={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},g.DefaultLayout=i.a,g._frontmatter=T,g),mdxType:"Playground"},Object(l.b)("div",{className:"bg-dark p-3"},Object(l.b)(m.a,{title:"CoreUI for React.js",autohide:!1,mdxType:"CToast"},Object(l.b)(p.a,{close:!0,mdxType:"CToastHeader"},Object(l.b)("svg",{className:"rounded me-2",width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},Object(l.b)("rect",{width:"100%",height:"100%",fill:"#007aff"})),Object(l.b)("strong",{className:"me-auto"},"CoreUI for React.js"),Object(l.b)("small",null,"7 min ago")),Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message.")))),Object(l.b)("h3",{id:"stacking"},"Stacking"),Object(l.b)("p",null,"You can stack toasts by wrapping them in a toast container, which will vertically add some spacing."),Object(l.b)(r.c,{__position:3,__code:'<CToaster>\n  <CToast title="CoreUI for React.js" autohide={false}>\n    <CToastHeader close>\n      <svg\n        className="rounded me-2"\n        width="20"\n        height="20"\n        xmlns="http://www.w3.org/2000/svg"\n        preserveAspectRatio="xMidYMid slice"\n        focusable="false"\n        role="img"\n      >\n        <rect width="100%" height="100%" fill="#007aff"></rect>\n      </svg>\n      <strong className="me-auto">CoreUI for React.js</strong>\n      <small>7 min ago</small>\n    </CToastHeader>\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\n  </CToast>\n  <CToast title="CoreUI for React.js" autohide={false}>\n    <CToastHeader close>\n      <svg\n        className="rounded me-2"\n        width="20"\n        height="20"\n        xmlns="http://www.w3.org/2000/svg"\n        preserveAspectRatio="xMidYMid slice"\n        focusable="false"\n        role="img"\n      >\n        <rect width="100%" height="100%" fill="#007aff"></rect>\n      </svg>\n      <strong className="me-auto">CoreUI for React.js</strong>\n      <small>7 min ago</small>\n    </CToastHeader>\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\n  </CToast>\n</CToaster>',__scope:(y={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},y.DefaultLayout=i.a,y._frontmatter=T,y),mdxType:"Playground"},Object(l.b)(C.a,{mdxType:"CToaster"},Object(l.b)(m.a,{title:"CoreUI for React.js",autohide:!1,mdxType:"CToast"},Object(l.b)(p.a,{close:!0,mdxType:"CToastHeader"},Object(l.b)("svg",{className:"rounded me-2",width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},Object(l.b)("rect",{width:"100%",height:"100%",fill:"#007aff"})),Object(l.b)("strong",{className:"me-auto"},"CoreUI for React.js"),Object(l.b)("small",null,"7 min ago")),Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message.")),Object(l.b)(m.a,{title:"CoreUI for React.js",autohide:!1,mdxType:"CToast"},Object(l.b)(p.a,{close:!0,mdxType:"CToastHeader"},Object(l.b)("svg",{className:"rounded me-2",width:"20",height:"20",xmlns:"http://www.w3.org/2000/svg",preserveAspectRatio:"xMidYMid slice",focusable:"false",role:"img"},Object(l.b)("rect",{width:"100%",height:"100%",fill:"#007aff"})),Object(l.b)("strong",{className:"me-auto"},"CoreUI for React.js"),Object(l.b)("small",null,"7 min ago")),Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message.")))),Object(l.b)("h3",{id:"custom-content"},"Custom content"),Object(l.b)("p",null,"Customize your toasts by removing sub-components, tweaking them with ",Object(l.b)("a",{parentName:"p",href:"https://coreui.io/docs/4.0/utilities/api"},"utilities"),", or by adding your own markup. Here we've created a simpler toast by removing the default ",Object(l.b)("inlineCode",{parentName:"p"},"<CToastHeader>"),", adding a custom hide icon from ",Object(l.b)("a",{parentName:"p",href:"https://icons.coreui.io"},"CoreUI Icons"),", and using some ",Object(l.b)("a",{parentName:"p",href:"https://coreui.io/docs/4.0/utilities/flex"},"flexbox utilities")," to adjust the layout."),Object(l.b)(r.c,{__position:4,__code:'<CToast autohide={false} className="align-items-center">\n  <div className="d-flex">\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\n    <CToastClose className="me-2 m-auto" />\n  </div>\n</CToast>',__scope:(j={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},j.DefaultLayout=i.a,j._frontmatter=T,j),mdxType:"Playground"},Object(l.b)(m.a,{autohide:!1,className:"align-items-center",mdxType:"CToast"},Object(l.b)("div",{className:"d-flex"},Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message."),Object(l.b)(u.a,{className:"me-2 m-auto",mdxType:"CToastClose"})))),Object(l.b)("p",null,"Alternatively, you can also add additional controls and components to toasts."),Object(l.b)(r.c,{__position:5,__code:'<CToast autohide={false}>\n  <CToastBody>\n    Hello, world! This is a toast message.\n    <div className="mt-2 pt-2 border-top">\n      <CButton type="button" color="primary" size="sm">\n        Take action\n      </CButton>\n      <CToastClose\n        component={CButton}\n        color="secondary"\n        size="sm"\n        className="ms-1"\n      >\n        Close\n      </CToastClose>\n    </div>\n  </CToastBody>\n</CToast>',__scope:(O={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},O.DefaultLayout=i.a,O._frontmatter=T,O),mdxType:"Playground"},Object(l.b)(m.a,{autohide:!1,mdxType:"CToast"},Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message.",Object(l.b)("div",{className:"mt-2 pt-2 border-top"},Object(l.b)(c.a,{type:"button",color:"primary",size:"sm",mdxType:"CButton"},"Take action"),Object(l.b)(u.a,{component:c.a,color:"secondary",size:"sm",className:"ms-1",mdxType:"CToastClose"},"Close"))))),Object(l.b)("h3",{id:"color-schemes"},"Color schemes"),Object(l.b)("p",null,"Building on the above example, you can create different toast color schemes with our ",Object(l.b)("a",{parentName:"p",href:"https://coreui.io/docs/4.0/utilities/colors"},"color")," and ",Object(l.b)("a",{parentName:"p",href:"https://coreui.io/docs/4.0//utilities/background"},"background")," utilities. Here we've set ",Object(l.b)("inlineCode",{parentName:"p"},'color="primary"')," and added ",Object(l.b)("inlineCode",{parentName:"p"},".text-white")," class to the ",Object(l.b)("inlineCode",{parentName:"p"},"<Ctoast>"),", and then set ",Object(l.b)("inlineCode",{parentName:"p"},"white")," property to our close button. For a crisp edge, we remove the default border with ",Object(l.b)("inlineCode",{parentName:"p"},".border-0"),"."),Object(l.b)(r.c,{__position:6,__code:'<CToast\n  autohide={false}\n  color="primary"\n  className="text-white align-items-center"\n>\n  <div className="d-flex">\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\n    <CToastClose className="me-2 m-auto" white />\n  </div>\n</CToast>',__scope:(w={props:v,DefaultLayout:i.a,useState:n.useState,useRef:n.useRef,Playground:r.c,Props:r.d,CButton:c.a,CButtonClose:d.a,CToast:m.a,CToastBody:b.a,CToastClose:u.a,CToastHeader:p.a,CToaster:C.a},w.DefaultLayout=i.a,w._frontmatter=T,w),mdxType:"Playground"},Object(l.b)(m.a,{autohide:!1,color:"primary",className:"text-white align-items-center",mdxType:"CToast"},Object(l.b)("div",{className:"d-flex"},Object(l.b)(b.a,{mdxType:"CToastBody"},"Hello, world! This is a toast message."),Object(l.b)(u.a,{className:"me-2 m-auto",white:!0,mdxType:"CToastClose"})))),Object(l.b)("h2",{id:"api"},"API"),Object(l.b)("h3",{id:"ctoast"},"CToast"),Object(l.b)(r.d,{of:m.a,mdxType:"Props"}),Object(l.b)("h3",{id:"ctoastheader"},"CToastHeader"),Object(l.b)(r.d,{of:p.a,mdxType:"Props"}),Object(l.b)("h3",{id:"ctoastbody"},"CToastBody"),Object(l.b)(r.d,{of:b.a,mdxType:"Props"}),Object(l.b)("h3",{id:"ctoastclose"},"CToastClose"),Object(l.b)(r.d,{of:u.a,mdxType:"Props"}),Object(l.b)("h3",{id:"ctoaster"},"CToaster"),Object(l.b)(r.d,{of:C.a,mdxType:"Props"}))}void 0!==g&&g&&g===Object(g)&&Object.isExtensible(g)&&!g.hasOwnProperty("__filemeta")&&Object.defineProperty(g,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/components/toast/CToast.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-components-toast-c-toast-mdx-e466024a6db11f45ff0e.js.map