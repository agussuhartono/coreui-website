{"version":3,"sources":["webpack:///../src/components/accordion/CAccordion.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","useState","CAccordion","CAccordionBody","CAccordionButton","CAccordionCollapse","CAccordionHeader","CAccordionItem","activeKey","setActiveKey","collapsed","onClick","visible","parentName","flush","of","isMDXComponent"],"mappings":"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","file":"component---src-components-accordion-c-accordion-mdx-37ecf87b5cf288cd9d9a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport { CAccordion } from './CAccordion.tsx';\nimport { CAccordionBody } from './CAccordionBody.tsx';\nimport { CAccordionButton } from './CAccordionButton.tsx';\nimport { CAccordionCollapse } from './CAccordionCollapse.tsx';\nimport { CAccordionHeader } from './CAccordionHeader.tsx';\nimport { CAccordionItem } from './CAccordionItem.tsx';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Click the accordions below to expand/collapse the accordion content.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [activeKey, setActiveKey] = useState(0)\\n  return (\\n    <CAccordion>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 1}\\n            onClick={() =>\\n              activeKey === 1 ? setActiveKey(0) : setActiveKey(1)\\n            }\\n          >\\n            Accordion Item #1\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 1}>\\n          <CAccordionBody>\\n            <strong>This is the first item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 2}\\n            onClick={() =>\\n              activeKey === 2 ? setActiveKey(0) : setActiveKey(2)\\n            }\\n          >\\n            Accordion Item #2\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 2}>\\n          <CAccordionBody>\\n            <strong>This is the second item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 3}\\n            onClick={() =>\\n              activeKey === 3 ? setActiveKey(0) : setActiveKey(3)\\n            }\\n          >\\n            Accordion Item #3\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 3}>\\n          <CAccordionBody>\\n            <strong>This is the third item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n    </CAccordion>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CAccordion,\n      CAccordionBody,\n      CAccordionButton,\n      CAccordionCollapse,\n      CAccordionHeader,\n      CAccordionItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [activeKey, setActiveKey] = useState(0);\n        return <CAccordion mdxType=\"CAccordion\">\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 1} onClick={() => activeKey === 1 ? setActiveKey(0) : setActiveKey(1)} mdxType=\"CAccordionButton\">\n              Accordion Item #1\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 1} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the first item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 2} onClick={() => activeKey === 2 ? setActiveKey(0) : setActiveKey(2)} mdxType=\"CAccordionButton\">\n              Accordion Item #2\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 2} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the second item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 3} onClick={() => activeKey === 3 ? setActiveKey(0) : setActiveKey(3)} mdxType=\"CAccordionButton\">\n              Accordion Item #3\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 3} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the third item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n      </CAccordion>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"flush\"\n    }}>{`Flush`}</h3>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`flush`}</inlineCode>{` to remove the default `}<inlineCode parentName=\"p\">{`background-color`}</inlineCode>{`, some borders, and some rounded corners to render accordions edge-to-edge with their parent container.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [activeKey, setActiveKey] = useState(0)\\n  return (\\n    <CAccordion flush>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 1}\\n            onClick={() =>\\n              activeKey === 1 ? setActiveKey(0) : setActiveKey(1)\\n            }\\n          >\\n            Accordion Item #1\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 1}>\\n          <CAccordionBody>\\n            <strong>This is the first item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 2}\\n            onClick={() =>\\n              activeKey === 2 ? setActiveKey(0) : setActiveKey(2)\\n            }\\n          >\\n            Accordion Item #2\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 2}>\\n          <CAccordionBody>\\n            <strong>This is the second item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n      <CAccordionItem>\\n        <CAccordionHeader>\\n          <CAccordionButton\\n            collapsed={activeKey !== 3}\\n            onClick={() =>\\n              activeKey === 3 ? setActiveKey(0) : setActiveKey(3)\\n            }\\n          >\\n            Accordion Item #3\\n          </CAccordionButton>\\n        </CAccordionHeader>\\n        <CAccordionCollapse visible={activeKey === 3}>\\n          <CAccordionBody>\\n            <strong>This is the third item\\'s accordion body.</strong> It is\\n            hidden by default, until the collapse plugin adds the appropriate\\n            classes that we use to style each element. These classes control\\n            the overall appearance, as well as the showing and hiding via CSS\\n            transitions. You can modify any of this with custom CSS or\\n            overriding our default variables. It\\'s also worth noting that just\\n            about any HTML can go within the <code>.accordion-body</code>,\\n            though the transition does limit overflow.\\n          </CAccordionBody>\\n        </CAccordionCollapse>\\n      </CAccordionItem>\\n    </CAccordion>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CAccordion,\n      CAccordionBody,\n      CAccordionButton,\n      CAccordionCollapse,\n      CAccordionHeader,\n      CAccordionItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [activeKey, setActiveKey] = useState(0);\n        return <CAccordion flush mdxType=\"CAccordion\">\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 1} onClick={() => activeKey === 1 ? setActiveKey(0) : setActiveKey(1)} mdxType=\"CAccordionButton\">\n              Accordion Item #1\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 1} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the first item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 2} onClick={() => activeKey === 2 ? setActiveKey(0) : setActiveKey(2)} mdxType=\"CAccordionButton\">\n              Accordion Item #2\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 2} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the second item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n        <CAccordionItem mdxType=\"CAccordionItem\">\n          <CAccordionHeader mdxType=\"CAccordionHeader\">\n            <CAccordionButton collapsed={activeKey !== 3} onClick={() => activeKey === 3 ? setActiveKey(0) : setActiveKey(3)} mdxType=\"CAccordionButton\">\n              Accordion Item #3\n            </CAccordionButton>\n          </CAccordionHeader>\n          <CAccordionCollapse visible={activeKey === 3} mdxType=\"CAccordionCollapse\">\n            <CAccordionBody mdxType=\"CAccordionBody\">\n              <strong>This is the third item's accordion body.</strong> It is hidden by default,\n              until the collapse plugin adds the appropriate classes that we use to style each\n              element. These classes control the overall appearance, as well as the showing and\n              hiding via CSS transitions. You can modify any of this with custom CSS or overriding\n              our default variables. It's also worth noting that just about any HTML can go within\n              the <code>.accordion-body</code>, though the transition does limit overflow.\n            </CAccordionBody>\n          </CAccordionCollapse>\n        </CAccordionItem>\n      </CAccordion>;\n      }}\n    </Playground>\n    {\n      /* ## TODO: Accessibility - https://coreui.io/docs/components/accordion/#accessibility */\n    }\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"caccordion\"\n    }}>{`CAccordion`}</h3>\n    <Props of={CAccordion} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"caccordionbody\"\n    }}>{`CAccordionBody`}</h3>\n    <Props of={CAccordionBody} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"caccordionbutton\"\n    }}>{`CAccordionButton`}</h3>\n    <Props of={CAccordionButton} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"caccordioncollapse\"\n    }}>{`CAccordionCollapse`}</h3>\n    <Props of={CAccordionCollapse} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"caccordionheader\"\n    }}>{`CAccordionHeader`}</h3>\n    <Props of={CAccordionHeader} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"caccordionitem\"\n    }}>{`CAccordionItem`}</h3>\n    <Props of={CAccordionItem} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}