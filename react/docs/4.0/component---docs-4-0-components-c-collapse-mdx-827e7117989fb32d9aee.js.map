{"version":3,"sources":["webpack:///../docs/4.0/components/CCollapse.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","CButton","CCard","CCardBody","CCol","CCollapse","CContainer","CRow","visible","setVisible","href","onClick","className","visibleA","setVisibleA","visibleB","setVisibleB","xs","of","isMDXComponent"],"mappings":"6SAWaA,EAAe,Q,mNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,kBACE,GAAM,gBADR,gBAGA,iNAAgM,0BAAYC,WAAW,KAAvB,UAAhM,8BAAiR,0BAAYA,WAAW,KAAvB,KAAjR,sDAAqX,0BAAYA,WAAW,KAAvB,WAArX,SAAkb,0BAAYA,WAAW,KAAvB,aAAlb,wEACA,kBACE,GAAM,WADR,WAGA,kEACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,upBAA4pBC,SAAO,GACpsBL,QACAH,kBACAS,eACAC,UACAC,oBACAC,YACAC,UACAC,cACAC,SACAC,cACAC,eACAC,WAZosB,gBAapsBlB,IAbosB,EAcpsBH,eAdosB,GAensBO,QAAQ,eACZ,WACK,MAA8BO,oBAAS,GAAhCQ,EAAP,KAAgBC,EAAhB,KACA,OAAO,4BACP,YAAC,IAAD,CAASC,KAAK,IAAIC,QAAS,kBAAMF,GAAYD,IAAUf,QAAQ,WAA/D,QACA,YAAC,IAAD,CAASkB,QAAS,kBAAMF,GAAYD,IAAUf,QAAQ,WAAtD,UACA,YAAC,IAAD,CAAWe,QAASA,EAASf,QAAQ,aACnC,YAAC,IAAD,CAAOmB,UAAU,OAAOnB,QAAQ,SAC9B,YAAC,IAAD,CAAWA,QAAQ,aAAnB,2MAUR,kBACE,GAAM,oBADR,oBAGA,0BAAS,0BAAYC,WAAW,KAAvB,aAAT,yCACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4/CAAigDC,SAAO,GACziDL,QACAH,kBACAS,eACAC,UACAC,oBACAC,YACAC,UACAC,cACAC,SACAC,cACAC,eACAC,WAZyiD,gBAaziDlB,IAbyiD,EAcziDH,eAdyiD,GAexiDO,QAAQ,eACZ,WACK,MAAgCO,oBAAS,GAAlCa,EAAP,KAAiBC,EAAjB,KACA,EAAgCd,oBAAS,GAAlCe,EAAP,KAAiBC,EAAjB,KACA,OAAO,4BACP,YAAC,IAAD,CAASL,QAAS,kBAAMG,GAAaD,IAAWpB,QAAQ,WAAxD,wBACA,YAAC,IAAD,CAASkB,QAAS,kBAAMK,GAAaD,IAAWtB,QAAQ,WAAxD,yBACA,YAAC,IAAD,CAASkB,QAAS,WACdG,GAAaD,GACbG,GAAaD,IACZtB,QAAQ,WAHb,wBAMA,YAAC,KAAD,CAAMA,QAAQ,QACZ,YAAC,IAAD,CAAMwB,GAAI,EAAGxB,QAAQ,QACnB,YAAC,IAAD,CAAWe,QAASK,EAAUpB,QAAQ,aACpC,YAAC,IAAD,CAAOmB,UAAU,OAAOnB,QAAQ,SAC9B,YAAC,IAAD,CAAWA,QAAQ,aAAnB,wMAQN,YAAC,IAAD,CAAMwB,GAAI,EAAGxB,QAAQ,QACnB,YAAC,IAAD,CAAWe,QAASO,EAAUtB,QAAQ,aACpC,YAAC,IAAD,CAAOmB,UAAU,OAAOnB,QAAQ,SAC9B,YAAC,IAAD,CAAWA,QAAQ,aAAnB,6MAYZ,kBACE,GAAM,OADR,OAGA,kBACE,GAAM,aADR,aAGA,YAAC,IAAD,CAAOyB,GAAIb,IAAWZ,QAAQ,gB,iNAKlCH,EAAW6B,gBAAiB","file":"component---docs-4-0-components-c-collapse-mdx-827e7117989fb32d9aee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react-pro/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport { CButton, CCard, CCardBody, CCol, CCollapse, CContainer, CRow } from '../../../src/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`The collapse component is used to show and hide content. Buttons or anchors are used as triggers that are mapped to specific elements you toggle. Collapsing an element will animate the `}<inlineCode parentName=\"p\">{`height`}</inlineCode>{` from its current value to `}<inlineCode parentName=\"p\">{`0`}</inlineCode>{`. Given how CSS handles animations, you cannot use `}<inlineCode parentName=\"p\">{`padding`}</inlineCode>{` on a `}<inlineCode parentName=\"p\">{`.collapse`}</inlineCode>{` element. Instead, use the class as an independent wrapping element.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`You can use a link or a button component.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [visible, setVisible] = useState(false)\\n  return (\\n    <>\\n      <CButton href=\\\"#\\\" onClick={() => setVisible(!visible)}>\\n        Link\\n      </CButton>\\n      <CButton onClick={() => setVisible(!visible)}>Button</CButton>\\n      <CCollapse visible={visible}>\\n        <CCard className=\\\"mt-3\\\">\\n          <CCardBody>\\n            Anim pariatur cliche reprehenderit, enim eiusmod high life\\n            accusamus terry richardson ad squid. Nihil anim keffiyeh\\n            helvetica, craft beer labore wes anderson cred nesciunt sapiente\\n            ea proident.\\n          </CCardBody>\\n        </CCard>\\n      </CCollapse>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CCard,\n      CCardBody,\n      CCol,\n      CCollapse,\n      CContainer,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visible, setVisible] = useState(false);\n        return <>\n        <CButton href=\"#\" onClick={() => setVisible(!visible)} mdxType=\"CButton\">Link</CButton>\n        <CButton onClick={() => setVisible(!visible)} mdxType=\"CButton\">Button</CButton>\n        <CCollapse visible={visible} mdxType=\"CCollapse\">\n          <CCard className=\"mt-3\" mdxType=\"CCard\">\n            <CCardBody mdxType=\"CCardBody\">\n              Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson\n              ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt\n              sapiente ea proident.\n            </CCardBody>\n          </CCard>\n        </CCollapse>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"multiple-targets\"\n    }}>{`Multiple targets`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`<CButton>`}</inlineCode>{` can show and hide multiple elements.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [visibleA, setVisibleA] = useState(false)\\n  const [visibleB, setVisibleB] = useState(false)\\n  return (\\n    <>\\n      <CButton onClick={() => setVisibleA(!visibleA)}>\\n        Toggle first element\\n      </CButton>\\n      <CButton onClick={() => setVisibleB(!visibleB)}>\\n        Toggle second element\\n      </CButton>\\n      <CButton\\n        onClick={() => {\\n          setVisibleA(!visibleA)\\n          setVisibleB(!visibleB)\\n        }}\\n      >\\n        Toggle both elements\\n      </CButton>\\n      <CRow>\\n        <CCol xs={6}>\\n          <CCollapse visible={visibleA}>\\n            <CCard className=\\\"mt-3\\\">\\n              <CCardBody>\\n                Anim pariatur cliche reprehenderit, enim eiusmod high life\\n                accusamus terry richardson ad squid. Nihil anim keffiyeh\\n                helvetica, craft beer labore wes anderson cred nesciunt\\n                sapiente ea proident.\\n              </CCardBody>\\n            </CCard>\\n          </CCollapse>\\n        </CCol>\\n        <CCol xs={6}>\\n          <CCollapse visible={visibleB}>\\n            <CCard className=\\\"mt-3\\\">\\n              <CCardBody>\\n                Anim pariatur cliche reprehenderit, enim eiusmod high life\\n                accusamus terry richardson ad squid. Nihil anim keffiyeh\\n                helvetica, craft beer labore wes anderson cred nesciunt\\n                sapiente ea proident.\\n              </CCardBody>\\n            </CCard>\\n          </CCollapse>\\n        </CCol>\\n      </CRow>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      CButton,\n      CCard,\n      CCardBody,\n      CCol,\n      CCollapse,\n      CContainer,\n      CRow,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [visibleA, setVisibleA] = useState(false);\n        const [visibleB, setVisibleB] = useState(false);\n        return <>\n        <CButton onClick={() => setVisibleA(!visibleA)} mdxType=\"CButton\">Toggle first element</CButton>\n        <CButton onClick={() => setVisibleB(!visibleB)} mdxType=\"CButton\">Toggle second element</CButton>\n        <CButton onClick={() => {\n            setVisibleA(!visibleA);\n            setVisibleB(!visibleB);\n          }} mdxType=\"CButton\">\n          Toggle both elements\n        </CButton>\n        <CRow mdxType=\"CRow\">\n          <CCol xs={6} mdxType=\"CCol\">\n            <CCollapse visible={visibleA} mdxType=\"CCollapse\">\n              <CCard className=\"mt-3\" mdxType=\"CCard\">\n                <CCardBody mdxType=\"CCardBody\">\n                  Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\n                  richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson\n                  cred nesciunt sapiente ea proident.\n                </CCardBody>\n              </CCard>\n            </CCollapse>\n          </CCol>\n          <CCol xs={6} mdxType=\"CCol\">\n            <CCollapse visible={visibleB} mdxType=\"CCollapse\">\n              <CCard className=\"mt-3\" mdxType=\"CCard\">\n                <CCardBody mdxType=\"CCardBody\">\n                  Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry\n                  richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson\n                  cred nesciunt sapiente ea proident.\n                </CCardBody>\n              </CCard>\n            </CCollapse>\n          </CCol>\n        </CRow>\n      </>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"ccollapse\"\n    }}>{`CCollapse`}</h3>\n    <Props of={CCollapse} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}