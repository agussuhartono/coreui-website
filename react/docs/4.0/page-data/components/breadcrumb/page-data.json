{
    "componentChunkName": "component---src-docs-templates-docs-tsx",
    "path": "/components/breadcrumb/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"2de4e7df-aaa1-583f-a431-3b6aec6acaab","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"React Breadcrumb Component\",\n  \"name\": \"Breadcrumb\",\n  \"description\": \"React breadcrumb navigation component which indicates the current location within a navigational hierarchy that automatically adds separators.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/breadcrumb\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Example\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#example\",\n    \"aria-label\": \"example permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"The breadcrumb navigation provides links back to each previous page the user navigated through and shows the current location in a website or an application. You don\\u2019t have to add separators, because they automatically added in CSS through ::before and content.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CBreadcrumb, {\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\")), mdx(CBreadcrumb, {\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\"), mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Library\")), mdx(CBreadcrumb, {\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\"), mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Library\"), mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Data\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CBreadcrumb>\\n  <CBreadcrumbItem active>Home</CBreadcrumbItem>\\n</CBreadcrumb>\\n\\n<CBreadcrumb>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>\\n\\n<CBreadcrumb>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem href=\\\"#\\\">Library</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Data</CBreadcrumbItem>\\n</CBreadcrumb>\\n\")), mdx(\"h2\", {\n    \"id\": \"dividers\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Dividers\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#dividers\",\n    \"aria-label\": \"dividers permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Dividers are automatically added in CSS through \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/::before\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"::before\")), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/content\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"content\")), \". They can be changed by modifying a local CSS custom property \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--coreui-breadcrumb-divider\"), \", or through the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$breadcrumb-divider\"), \" Sass variable \\u2014 and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$breadcrumb-divider-flipped\"), \" for its RTL counterpart, if needed. We default to our Sass variable, which is set as a fallback to the custom property. This way, you get a global divider that you can override without recompiling CSS at any time.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CBreadcrumb, {\n    style: {\n      \"--cui-breadcrumb-divider\": \"'>'\"\n    },\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\"), mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Library\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CBreadcrumb style={{\\\"--cui-breadcrumb-divider\\\": \\\"'>'\\\"}}>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>\\n\")), mdx(\"p\", null, \"When modifying via Sass, the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://sass-lang.com/documentation/modules/string#quote\"\n  }, \"quote\"), \" function is required to generate the quotes around a string. For example, using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \">\"), \" as the divider, you can use this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"$breadcrumb-divider: quote(\\\">\\\");\\n\")), mdx(\"p\", null, \"It's also possible to use an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"embedded SVG icon\"), \". Apply it via our CSS custom property, or use the Sass variable.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CBreadcrumb, {\n    style: {\n      \"--cui-breadcrumb-divider\": \"url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);\"\n    },\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\"), mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Library\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CBreadcrumb style={{\\\"--cui-breadcrumb-divider\\\": \\\"url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);\\\"}}>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"$breadcrumb-divider: url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' \\nwidth='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E\\\");\\n\")), mdx(\"p\", null, \"You can also remove the divider setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--cui-breadcrumb-divider: '';\"), \" (empty strings in CSS custom properties counts as a value), or setting the Sass variable to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$breadcrumb-divider: none;\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CBreadcrumb, {\n    style: {\n      \"--cui-breadcrumb-divider\": \"'';\"\n    },\n    mdxType: \"CBreadcrumb\"\n  }, mdx(CBreadcrumbItem, {\n    href: \"#\",\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Home\"), mdx(CBreadcrumbItem, {\n    active: true,\n    mdxType: \"CBreadcrumbItem\"\n  }, \"Library\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CBreadcrumb style={{\\\"--cui-breadcrumb-divider\\\": \\\"'';\\\"}}>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-scss\"\n  }, \"$breadcrumb-divider: none;\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Accessibility\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#accessibility\",\n    \"aria-label\": \"accessibility permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Since breadcrumbs provide navigation, it's useful to add a significant label such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label=\\\"breadcrumb\\\"\"), \" to explain the type of navigation implemented in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<nav>\"), \" element. You should also add an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-current=\\\"page\\\"\"), \" to the last item of the set to show that it represents the current page. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CoreUI for React.js automatically add all of this labels to breadcrumb's components.\"), \" \"), mdx(\"p\", null, \"For more information, see the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.w3.org/TR/wai-aria-practices/#breadcrumb\"\n  }, \"WAI-ARIA Authoring Practices for the breadcrumb pattern\"), \".\"), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cbreadcrumb\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CBreadcrumb\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cbreadcrumb\",\n    \"aria-label\": \"cbreadcrumb permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CBreadcrumb } from '@coreui/react'\\n// or\\nimport CBreadcrumb from '@coreui/react/src/components/breadcrumb/CBreadcrumb'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"cbreadcrumbitem\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CBreadcrumbItem\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cbreadcrumbitem\",\n    \"aria-label\": \"cbreadcrumbitem permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CBreadcrumbItem } from '@coreui/react'\\n// or\\nimport CBreadcrumbItem from '@coreui/react/src/components/breadcrumb/CBreadcrumbItem'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"active\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the active state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"href\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"The \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"href\"), \" attribute for the inner \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"<CLink>\"), \" component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Breadcrumb Component","description":"React breadcrumb navigation component which indicates the current location within a navigational hierarchy that automatically adds separators.","route":"/components/breadcrumb"},"tableOfContents":{"items":[{"url":"#example","title":"Example"},{"url":"#dividers","title":"Dividers"},{"url":"#accessibility","title":"Accessibility"},{"url":"#api","title":"API","items":[{"url":"#cbreadcrumb","title":"CBreadcrumb"},{"url":"#cbreadcrumbitem","title":"CBreadcrumbItem"}]}]}}},"pageContext":{"id":"2de4e7df-aaa1-583f-a431-3b6aec6acaab"}},
    "staticQueryHashes": ["4202924991"]}