{
    "componentChunkName": "component---src-docs-templates-docs-tsx",
    "path": "/forms/validation/",
    "result": {"data":{"site":{"siteMetadata":{"title":"CoreUI for React.js"}},"mdx":{"id":"3ad1bc60-bfea-53fc-a2e1-6ef413a33701","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar CustomStylesExample = function CustomStylesExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      validated = _useState2[0],\n      setValidated = _useState2[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustom01\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationCustom01\",\n    defaultValue: \"Mark\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustom02\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationCustom02\",\n    defaultValue: \"Otto\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustomUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationCustomUsername\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please choose a username.\"))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustom03\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationCustom03\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustom04\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormSelect, {\n    id: \"validationCustom04\",\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true\n  }, \"Choose...\"), mdx(\"option\", null, \"...\")), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationCustom05\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationCustom05\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid zip.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"You must agree before submitting.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")));\n};\n\nvar BrowserDefaultsExample = function BrowserDefaultsExample() {\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      validated = _useState4[0],\n      setValidated = _useState4[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    validated: validated,\n    onSubmit: handleSubmit,\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefault01\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault01\",\n    defaultValue: \"Mark\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefault02\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault02\",\n    defaultValue: \"Otto\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefaultUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend02\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefaultUsername\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend02\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please choose a username.\"))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefault03\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault03\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefault04\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormSelect, {\n    id: \"validationDefault04\",\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true\n  }, \"Choose...\"), mdx(\"option\", null, \"...\")), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationDefault05\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationDefault05\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid zip.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"You must agree before submitting.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")));\n};\n\nvar TooltipsExample = function TooltipsExample() {\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      validated = _useState6[0],\n      setValidated = _useState6[1];\n\n  var handleSubmit = function handleSubmit(event) {\n    var form = event.currentTarget;\n\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n  };\n\n  return mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    noValidate: true,\n    validated: validated,\n    onSubmit: handleSubmit,\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltip01\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationTooltip01\",\n    defaultValue: \"Mark\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    tooltip: true,\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltip02\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationTooltip02\",\n    defaultValue: \"Otto\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    tooltip: true,\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltipUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationTooltipUsername\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    tooltip: true,\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please choose a username.\"))), mdx(CCol, {\n    md: 6,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltip03\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationTooltip03\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    tooltip: true,\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltip04\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormSelect, {\n    id: \"validationTooltip04\",\n    required: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true,\n    value: \"\"\n  }, \"Choose...\"), mdx(\"option\", null, \"...\")), mdx(CFormFeedback, {\n    tooltip: true,\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTooltip05\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationTooltip05\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    tooltip: true,\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid zip.\")), mdx(CCol, {\n    xs: 12,\n    className: \"position-relative\",\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")));\n};\n\nvar _frontmatter = {\n  \"title\": \"React Form Validation\",\n  \"name\": \"Validation\",\n  \"description\": \"Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.\",\n  \"menu\": \"Forms\",\n  \"route\": \"/forms/validation\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  CustomStylesExample: CustomStylesExample,\n  BrowserDefaultsExample: BrowserDefaultsExample,\n  TooltipsExample: TooltipsExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-styles\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom styles\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#custom-styles\",\n    \"aria-label\": \"custom styles permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"For custom CoreUI form validation messages, you'll need to add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noValidate\"), \" boolean property to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CForm>\"), \". This disables the browser default feedback tooltips, but still provides access to the form validation APIs in JavaScript. Try to submit the form below; our JavaScript will intercept the submit button and relay feedback to you. When attempting to submit, you'll see the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":invalid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":valid\"), \" styles applied to your form controls.\"), mdx(\"p\", null, \"Custom feedback styles apply custom colors, borders, focus styles, and background icons to better communicate feedback.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CustomStylesExample, {\n    mdxType: \"CustomStylesExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [validated, setValidated] = useState(false)\\nconst handleSubmit = (event) => {\\n  const form = event.currentTarget\\n  if (form.checkValidity() === false) {\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n  setValidated(true)\\n}\\nreturn (\\n  <CForm\\n    className=\\\"row g-3 needs-validation\\\"\\n    noValidate\\n    validated={validated}\\n    onSubmit={handleSubmit}\\n  >\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationCustom01\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationCustom01\\\" defaultValue=\\\"Mark\\\" required />\\n      <CFormFeedback valid>Looks good!</CFormFeedback>\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationCustom02\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationCustom02\\\" defaultValue=\\\"Otto\\\" required />\\n      <CFormFeedback valid>Looks good!</CFormFeedback>\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationCustomUsername\\\">Username</CFormLabel>\\n      <CInputGroup className=\\\"has-validation\\\">\\n        <CInputGroupText id=\\\"inputGroupPrepend\\\">@</CInputGroupText>\\n        <CFormInput\\n          type=\\\"text\\\"\\n          id=\\\"validationCustomUsername\\\"\\n          defaultValue=\\\"\\\"\\n          aria-describedby=\\\"inputGroupPrepend\\\"\\n          required\\n        />\\n        <CFormFeedback invalid>Please choose a username.</CFormFeedback>\\n      </CInputGroup>\\n    </CCol>\\n    <CCol md={6}>\\n      <CFormLabel htmlFor=\\\"validationCustom03\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationCustom03\\\" required />\\n      <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormLabel htmlFor=\\\"validationCustom04\\\">City</CFormLabel>\\n      <CFormSelect id=\\\"validationCustom04\\\">\\n        <option disabled>Choose...</option>\\n        <option>...</option>\\n      </CFormSelect>\\n      <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormLabel htmlFor=\\\"validationCustom05\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationCustom05\\\" required />\\n      <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\\n    </CCol>\\n    <CCol xs={12}>\\n      <CFormCheck\\n        type=\\\"checkbox\\\"\\n        id=\\\"invalidCheck\\\"\\n        label=\\\"Agree to terms and conditions\\\"\\n        required\\n      />\\n      <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\\n    </CCol>\\n    <CCol xs={12}>\\n      <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n        Submit form\\n      </CButton>\\n    </CCol>\\n  </CForm>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"browser-defaults\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Browser defaults\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#browser-defaults\",\n    \"aria-label\": \"browser defaults permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Not interested in custom validation feedback messages or writing JavaScript to change form behaviors? All good, you can use the browser defaults. Try submitting the form below. Depending on your browser and OS, you'll see a slightly different style of feedback.\"), mdx(\"p\", null, \"While these feedback styles cannot be styled with CSS, you can still customize the feedback text through JavaScript.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(BrowserDefaultsExample, {\n    mdxType: \"BrowserDefaultsExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [validated, setValidated] = useState(false)\\nconst handleSubmit = (event) => {\\n  const form = event.currentTarget\\n  if (form.checkValidity() === false) {\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n  setValidated(true)\\n}\\nreturn (\\n  <CForm className=\\\"row g-3 needs-validation\\\" validated={validated} onSubmit={handleSubmit}>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationDefault01\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationDefault01\\\" defaultValue=\\\"Mark\\\" required />\\n      <CFormFeedback valid>Looks good!</CFormFeedback>\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationDefault02\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationDefault02\\\" defaultValue=\\\"Otto\\\" required />\\n      <CFormFeedback valid>Looks good!</CFormFeedback>\\n    </CCol>\\n    <CCol md={4}>\\n      <CFormLabel htmlFor=\\\"validationDefaultUsername\\\">Username</CFormLabel>\\n      <CInputGroup className=\\\"has-validation\\\">\\n        <CInputGroupText id=\\\"inputGroupPrepend02\\\">@</CInputGroupText>\\n        <CFormInput\\n          type=\\\"text\\\"\\n          id=\\\"validationDefaultUsername\\\"\\n          defaultValue=\\\"\\\"\\n          aria-describedby=\\\"inputGroupPrepend02\\\"\\n          required\\n        />\\n        <CFormFeedback invalid>Please choose a username.</CFormFeedback>\\n      </CInputGroup>\\n    </CCol>\\n    <CCol md={6}>\\n      <CFormLabel htmlFor=\\\"validationDefault03\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationDefault03\\\" required />\\n      <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormLabel htmlFor=\\\"validationDefault04\\\">City</CFormLabel>\\n      <CFormSelect id=\\\"validationDefault04\\\">\\n        <option disabled>Choose...</option>\\n        <option>...</option>\\n      </CFormSelect>\\n      <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n    </CCol>\\n    <CCol md={3}>\\n      <CFormLabel htmlFor=\\\"validationDefault05\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationDefault05\\\" required />\\n      <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\\n    </CCol>\\n    <CCol xs={12}>\\n      <CFormCheck\\n        type=\\\"checkbox\\\"\\n        id=\\\"invalidCheck\\\"\\n        label=\\\"Agree to terms and conditions\\\"\\n        required\\n      />\\n      <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\\n    </CCol>\\n    <CCol xs={12}>\\n      <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n        Submit form\\n      </CButton>\\n    </CCol>\\n  </CForm>\\n)\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Server side\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#server-side\",\n    \"aria-label\": \"server side permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"We recommend using client-side validation, but in case you require server-side validation, you can indicate invalid and valid form fields with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"invalid\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"valid\"), \" boolean properties.\"), mdx(\"p\", null, \"For invalid fields, ensure that the invalid feedback/error message is associated with the relevant form field using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-describedby\"), \" (noting that this attribute allows more than one \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" to be referenced, in case the field already points to additional form text).\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    className: \"row g-3 needs-validation\",\n    mdxType: \"CForm\"\n  }, mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServer01\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer01\",\n    defaultValue: \"Mark\",\n    valid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServer02\",\n    mdxType: \"CFormLabel\"\n  }, \"Email\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer02\",\n    defaultValue: \"Otto\",\n    valid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    valid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Looks good!\")), mdx(CCol, {\n    md: 4,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServerUsername\",\n    mdxType: \"CFormLabel\"\n  }, \"Username\"), mdx(CInputGroup, {\n    className: \"has-validation\",\n    mdxType: \"CInputGroup\"\n  }, mdx(CInputGroupText, {\n    id: \"inputGroupPrepend03\",\n    mdxType: \"CInputGroupText\"\n  }, \"@\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServerUsername\",\n    defaultValue: \"\",\n    \"aria-describedby\": \"inputGroupPrepend03\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please choose a username.\"))), mdx(CCol, {\n    md: 6,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServer03\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer03\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServer04\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormSelect, {\n    id: \"validationServer04\",\n    invalid: true,\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", {\n    disabled: true\n  }, \"Choose...\"), mdx(\"option\", null, \"...\")), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid city.\")), mdx(CCol, {\n    md: 3,\n    mdxType: \"CCol\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationServer05\",\n    mdxType: \"CFormLabel\"\n  }, \"City\"), mdx(CFormInput, {\n    type: \"text\",\n    id: \"validationServer05\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please provide a valid zip.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CFormCheck, {\n    type: \"checkbox\",\n    id: \"invalidCheck\",\n    label: \"Agree to terms and conditions\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"You must agree before submitting.\")), mdx(CCol, {\n    xs: 12,\n    mdxType: \"CCol\"\n  }, mdx(CButton, {\n    color: \"primary\",\n    type: \"submit\",\n    mdxType: \"CButton\"\n  }, \"Submit form\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm className=\\\"row g-3 needs-validation\\\">\\n  <CCol md={4}>\\n    <CFormLabel htmlFor=\\\"validationServer01\\\">Email</CFormLabel>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationServer01\\\" defaultValue=\\\"Mark\\\" valid required />\\n    <CFormFeedback valid>Looks good!</CFormFeedback>\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormLabel htmlFor=\\\"validationServer02\\\">Email</CFormLabel>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationServer02\\\" defaultValue=\\\"Otto\\\" valid required />\\n    <CFormFeedback valid>Looks good!</CFormFeedback>\\n  </CCol>\\n  <CCol md={4}>\\n    <CFormLabel htmlFor=\\\"validationServerUsername\\\">Username</CFormLabel>\\n    <CInputGroup className=\\\"has-validation\\\">\\n      <CInputGroupText id=\\\"inputGroupPrepend03\\\">@</CInputGroupText>\\n      <CFormInput\\n        type=\\\"text\\\"\\n        id=\\\"validationServerUsername\\\"\\n        defaultValue=\\\"\\\"\\n        aria-describedby=\\\"inputGroupPrepend03\\\"\\n        invalid\\n        required\\n      />\\n      <CFormFeedback invalid>Please choose a username.</CFormFeedback>\\n    </CInputGroup>\\n  </CCol>\\n  <CCol md={6}>\\n    <CFormLabel htmlFor=\\\"validationServer03\\\">City</CFormLabel>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationServer03\\\" invalid required />\\n    <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormLabel htmlFor=\\\"validationServer04\\\">City</CFormLabel>\\n    <CFormSelect id=\\\"validationServer04\\\" invalid>\\n      <option disabled>Choose...</option>\\n      <option>...</option>\\n    </CFormSelect>\\n    <CFormFeedback invalid>Please provide a valid city.</CFormFeedback>\\n  </CCol>\\n  <CCol md={3}>\\n    <CFormLabel htmlFor=\\\"validationServer05\\\">City</CFormLabel>\\n    <CFormInput type=\\\"text\\\" id=\\\"validationServer05\\\" invalid required />\\n    <CFormFeedback invalid>Please provide a valid zip.</CFormFeedback>\\n  </CCol>\\n  <CCol xs={12}>\\n    <CFormCheck\\n      type=\\\"checkbox\\\"\\n      id=\\\"invalidCheck\\\"\\n      label=\\\"Agree to terms and conditions\\\"\\n      invalid\\n      required\\n    />\\n    <CFormFeedback invalid>You must agree before submitting.</CFormFeedback>\\n  </CCol>\\n  <CCol xs={12}>\\n    <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n      Submit form\\n    </CButton>\\n  </CCol>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"supported-elements\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Supported elements\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#supported-elements\",\n    \"aria-label\": \"supported elements permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Validation styles are available for the following form controls and components:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormCheck>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormInput>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormSelect>\"), \"s\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"<CFormTextarea>\"), \"s\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CForm, {\n    validated: true,\n    mdxType: \"CForm\"\n  }, mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"validationTextarea\",\n    className: \"form-label\",\n    mdxType: \"CFormLabel\"\n  }, \"Textarea\"), mdx(CFormInput, {\n    component: \"textarea\",\n    id: \"validationTextarea\",\n    placeholder: \"Required example textarea\",\n    invalid: true,\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Please enter a message in the textarea.\")), mdx(CFormCheck, {\n    className: \"mb-3\",\n    id: \"validationFormCheck1\",\n    label: \"Check this checkbox\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Example invalid feedback text\"), mdx(CFormCheck, {\n    type: \"radio\",\n    name: \"radio-stacked\",\n    id: \"validationFormCheck2\",\n    label: \"Check this checkbox\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormCheck, {\n    className: \"mb-3\",\n    type: \"radio\",\n    name: \"radio-stacked\",\n    id: \"validationFormCheck3\",\n    label: \"Or toggle this other radio\",\n    required: true,\n    mdxType: \"CFormCheck\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"More example invalid feedback text\"), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormSelect, {\n    required: true,\n    \"aria-label\": \"select example\",\n    mdxType: \"CFormSelect\"\n  }, mdx(\"option\", null, \"Open this select menu\"), mdx(\"option\", {\n    value: \"1\"\n  }, \"One\"), mdx(\"option\", {\n    value: \"2\"\n  }, \"Two\"), mdx(\"option\", {\n    value: \"3\"\n  }, \"Three\")), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Example invalid select feedback\")), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CFormInput, {\n    type: \"file\",\n    id: \"validationTextarea\",\n    \"aria-label\": \"file example\",\n    required: true,\n    mdxType: \"CFormInput\"\n  }), mdx(CFormFeedback, {\n    invalid: true,\n    mdxType: \"CFormFeedback\"\n  }, \"Example invalid form file feedback\")), mdx(\"div\", {\n    className: \"mb-3\"\n  }, mdx(CButton, {\n    type: \"submit\",\n    color: \"primary\",\n    disabled: true,\n    mdxType: \"CButton\"\n  }, \"Submit form\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CForm validated={true}>\\n  <div className=\\\"mb-3\\\">\\n    <CFormLabel htmlFor=\\\"validationTextarea\\\" className=\\\"form-label\\\">\\n      Textarea\\n    </CFormLabel>\\n    <CFormInput\\n      component=\\\"textarea\\\"\\n      id=\\\"validationTextarea\\\"\\n      placeholder=\\\"Required example textarea\\\"\\n      invalid\\n      required\\n    ></CFormInput>\\n    <CFormFeedback invalid>Please enter a message in the textarea.</CFormFeedback>\\n  </div>\\n\\n  <CFormCheck className=\\\"mb-3\\\" id=\\\"validationFormCheck1\\\" label=\\\"Check this checkbox\\\" required />\\n  <CFormFeedback invalid>Example invalid feedback text</CFormFeedback>\\n\\n  <CFormCheck\\n    type=\\\"radio\\\"\\n    name=\\\"radio-stacked\\\"\\n    id=\\\"validationFormCheck2\\\"\\n    label=\\\"Check this checkbox\\\"\\n    required\\n  />\\n\\n  <CFormCheck\\n    className=\\\"mb-3\\\"\\n    type=\\\"radio\\\"\\n    name=\\\"radio-stacked\\\"\\n    id=\\\"validationFormCheck3\\\"\\n    label=\\\"Or toggle this other radio\\\"\\n    required\\n  />\\n  <CFormFeedback invalid>More example invalid feedback text</CFormFeedback>\\n\\n  <div className=\\\"mb-3\\\">\\n    <CFormSelect required aria-label=\\\"select example\\\">\\n      <option>Open this select menu</option>\\n      <option value=\\\"1\\\">One</option>\\n      <option value=\\\"2\\\">Two</option>\\n      <option value=\\\"3\\\">Three</option>\\n    </CFormSelect>\\n    <CFormFeedback invalid>Example invalid select feedback</CFormFeedback>\\n  </div>\\n\\n  <div className=\\\"mb-3\\\">\\n    <CFormInput type=\\\"file\\\" id=\\\"validationTextarea\\\" aria-label=\\\"file example\\\" required />\\n    <CFormFeedback invalid>Example invalid form file feedback</CFormFeedback>\\n  </div>\\n\\n  <div className=\\\"mb-3\\\">\\n    <CButton type=\\\"submit\\\" color=\\\"primary\\\" disabled>\\n      Submit form\\n    </CButton>\\n  </div>\\n</CForm>\\n\")), mdx(\"h2\", {\n    \"id\": \"tooltips\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Tooltips\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#tooltips\",\n    \"aria-label\": \"tooltips permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"If your form layout allows it, you can swap the text for the tooltip to display validation feedback in a styled tooltip. Be sure to have a parent with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position: relative\"), \" on it for tooltip positioning. In the example below, our column classes have this already, but your project may require an alternative setup.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(TooltipsExample, {\n    mdxType: \"TooltipsExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [validated, setValidated] = useState(false)\\nconst handleSubmit = (event) => {\\n  const form = event.currentTarget\\n  if (form.checkValidity() === false) {\\n    event.preventDefault()\\n    event.stopPropagation()\\n  }\\n  setValidated(true)\\n}\\nreturn (\\n  <CForm\\n    className=\\\"row g-3 needs-validation\\\"\\n    noValidate\\n    validated={validated}\\n    onSubmit={handleSubmit}\\n  >\\n    <CCol md={4} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltip01\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationTooltip01\\\" defaultValue=\\\"Mark\\\" required />\\n      <CFormFeedback tooltip valid>\\n        Looks good!\\n      </CFormFeedback>\\n    </CCol>\\n    <CCol md={4} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltip02\\\">Email</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationTooltip02\\\" defaultValue=\\\"Otto\\\" required />\\n      <CFormFeedback tooltip valid>\\n        Looks good!\\n      </CFormFeedback>\\n    </CCol>\\n    <CCol md={4} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltipUsername\\\">Username</CFormLabel>\\n      <CInputGroup className=\\\"has-validation\\\">\\n        <CInputGroupText id=\\\"inputGroupPrepend\\\">@</CInputGroupText>\\n        <CFormInput\\n          type=\\\"text\\\"\\n          id=\\\"validationTooltipUsername\\\"\\n          defaultValue=\\\"\\\"\\n          aria-describedby=\\\"inputGroupPrepend\\\"\\n          required\\n        />\\n        <CFormFeedback tooltip invalid>\\n          Please choose a username.\\n        </CFormFeedback>\\n      </CInputGroup>\\n    </CCol>\\n    <CCol md={6} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltip03\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationTooltip03\\\" required />\\n      <CFormFeedback tooltip invalid>\\n        Please provide a valid city.\\n      </CFormFeedback>\\n    </CCol>\\n    <CCol md={3} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltip04\\\">City</CFormLabel>\\n      <CFormSelect id=\\\"validationTooltip04\\\" required>\\n        <option disabled value=\\\"\\\">\\n          Choose...\\n        </option>\\n        <option>...</option>\\n      </CFormSelect>\\n      <CFormFeedback tooltip invalid>\\n        Please provide a valid city.\\n      </CFormFeedback>\\n    </CCol>\\n    <CCol md={3} className=\\\"position-relative\\\">\\n      <CFormLabel htmlFor=\\\"validationTooltip05\\\">City</CFormLabel>\\n      <CFormInput type=\\\"text\\\" id=\\\"validationTooltip05\\\" required />\\n      <CFormFeedback tooltip invalid>\\n        Please provide a valid zip.\\n      </CFormFeedback>\\n    </CCol>\\n    <CCol xs={12} className=\\\"position-relative\\\">\\n      <CButton color=\\\"primary\\\" type=\\\"submit\\\">\\n        Submit form\\n      </CButton>\\n    </CCol>\\n  </CForm>\\n)\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"React Form Validation","description":"Provide valuable, actionable feedback to your users with HTML5 form validation, via browser default behaviors or custom styles and JavaScript.","route":"/forms/validation"},"tableOfContents":{"items":[{"url":"#custom-styles","title":"Custom styles"},{"url":"#browser-defaults","title":"Browser defaults"},{"url":"#server-side","title":"Server side"},{"url":"#supported-elements","title":"Supported elements"},{"url":"#tooltips","title":"Tooltips"}]}}},"pageContext":{"id":"3ad1bc60-bfea-53fc-a2e1-6ef413a33701"}},
    "staticQueryHashes": ["4202924991"]}