{"version":3,"sources":["webpack:///../docs/4.0/components/CSpinner.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","CSpinner","CButton","color","variant","size","disabled","component","aria-hidden","of","isMDXComponent"],"mappings":"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","file":"component---docs-4-0-components-c-spinner-mdx-7346e58fc19799026744.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react-pro/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CSpinner, CButton } from '../../../src/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"about\"\n    }}>{`About`}</h2>\n    <p>{`CoreUI \"spinners\" can be used to show the loading state in your projects. They're built only with HTML and CSS, meaning you don't need any JavaScript to create them. You will, however, need some custom JavaScript to toggle their visibility. Their appearance, alignment, and sizing can be easily customized with our amazing utility classes.`}</p>\n    <p>{`For accessibility purposes, each loader here includes `}<inlineCode parentName=\"p\">{`role=\"status\"`}</inlineCode>{` and a nested `}<inlineCode parentName=\"p\">{`<span className=\"visually-hidden\">Loading...</span>`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"border-spinner\"\n    }}>{`Border spinner`}</h2>\n    <p>{`Use the border spinners for a lightweight loading indicator.`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<CSpinner />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CSpinner mdxType=\"CSpinner\" />\n    </Playground>\n    <h3 {...{\n      \"id\": \"colors\"\n    }}>{`Colors`}</h3>\n    <p>{`The border spinner uses `}<inlineCode parentName=\"p\">{`currentColor`}</inlineCode>{` for its `}<inlineCode parentName=\"p\">{`border-color`}</inlineCode>{`. You can use any of our text color utilities on the standard spinner.`}</p>\n    <Playground __position={1} __code={'<CSpinner color=\\\"primary\\\" />\\n<CSpinner color=\\\"secondary\\\" />\\n<CSpinner color=\\\"success\\\" />\\n<CSpinner color=\\\"danger\\\" />\\n<CSpinner color=\\\"warning\\\" />\\n<CSpinner color=\\\"info\\\" />\\n<CSpinner color=\\\"light\\\" />\\n<CSpinner color=\\\"dark\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CSpinner color=\"primary\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"secondary\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"success\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"danger\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"warning\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"info\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"light\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"dark\" mdxType=\"CSpinner\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"growing-spinner\"\n    }}>{`Growing spinner`}</h2>\n    <p>{`If you don't fancy a border spinner, switch to the grow spinner. While it doesn't technically spin, it does repeatedly grow!`}</p>\n    <Playground __position={2} __code={'<CSpinner variant=\\\"grow\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CSpinner variant=\"grow\" mdxType=\"CSpinner\" />\n    </Playground>\n    <p>{`Once again, this spinner is built with `}<inlineCode parentName=\"p\">{`currentColor`}</inlineCode>{`, so you can easily change its appearance. Here it is in blue, along with the supported variants.`}</p>\n    <Playground __position={3} __code={'<CSpinner color=\\\"primary\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"secondary\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"success\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"danger\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"warning\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"info\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"light\\\" variant=\\\"grow\\\" />\\n<CSpinner color=\\\"dark\\\" variant=\\\"grow\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CSpinner color=\"primary\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"secondary\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"success\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"danger\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"warning\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"info\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"light\" variant=\"grow\" mdxType=\"CSpinner\" />\n  <CSpinner color=\"dark\" variant=\"grow\" mdxType=\"CSpinner\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"size\"\n    }}>{`Size`}</h2>\n    <p>{`Add `}<inlineCode parentName=\"p\">{`size=\"sm\"`}</inlineCode>{`property\\` to make a smaller spinner that can quickly be used within other components.`}</p>\n    <Playground __position={4} __code={'<CSpinner size=\\\"sm\\\" />\\n<CSpinner size=\\\"sm\\\" variant=\\\"grow\\\" />'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CSpinner size=\"sm\" mdxType=\"CSpinner\" />\n  <CSpinner size=\"sm\" variant=\"grow\" mdxType=\"CSpinner\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"buttons\"\n    }}>{`Buttons`}</h2>\n    <p>{`Use spinners within buttons to indicate an action is currently processing or taking place. You may also swap the text out of the spinner element and utilize button text as needed.`}</p>\n    <Playground __position={5} __code={'<CButton disabled>\\n  <CSpinner component=\\\"span\\\" size=\\\"sm\\\" aria-hidden=\\\"true\\\" />\\n</CButton>\\n<CButton disabled>\\n  <CSpinner component=\\\"span\\\" size=\\\"sm\\\" aria-hidden=\\\"true\\\" />\\n  Loading...\\n</CButton>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CButton disabled mdxType=\"CButton\">\n    <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" mdxType=\"CSpinner\" />\n  </CButton>\n  <CButton disabled mdxType=\"CButton\">\n    <CSpinner component=\"span\" size=\"sm\" aria-hidden=\"true\" mdxType=\"CSpinner\" />\n    Loading...\n  </CButton>\n    </Playground>\n    <Playground __position={6} __code={'<CButton disabled>\\n  <CSpinner component=\\\"span\\\" size=\\\"sm\\\" variant=\\\"grow\\\" aria-hidden=\\\"true\\\" />\\n</CButton>\\n<CButton disabled>\\n  <CSpinner component=\\\"span\\\" size=\\\"sm\\\" variant=\\\"grow\\\" aria-hidden=\\\"true\\\" />\\n  Loading...\\n</CButton>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CSpinner,\n      CButton,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CButton disabled mdxType=\"CButton\">\n    <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" mdxType=\"CSpinner\" />\n  </CButton>\n  <CButton disabled mdxType=\"CButton\">\n    <CSpinner component=\"span\" size=\"sm\" variant=\"grow\" aria-hidden=\"true\" mdxType=\"CSpinner\" />\n    Loading...\n  </CButton>\n    </Playground>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"cspinner\"\n    }}>{`CSpinner`}</h3>\n    <Props of={CSpinner} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}