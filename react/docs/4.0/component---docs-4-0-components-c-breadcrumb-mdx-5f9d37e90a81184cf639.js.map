{"version":3,"sources":["webpack:///../docs/4.0/components/CBreadcrumb.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","CBreadcrumb","CBreadcrumbItem","active","href","parentName","style","of","isMDXComponent"],"mappings":"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","file":"component---docs-4-0-components-c-breadcrumb-mdx-5f9d37e90a81184cf639.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/lukaszholeczek/CoreUI/@coreui/react-pro/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CBreadcrumb, CBreadcrumbItem } from '../../../src/index.ts';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <p>{`The breadcrumb navigation provides links back to each previous page the user navigated through and shows the current location in a website or an application. You don’t have to add separators, because they automatically added in CSS through ::before and content.`}</p>\n    <Playground __position={0} __code={'<CBreadcrumb>\\n  <CBreadcrumbItem active>Home</CBreadcrumbItem>\\n</CBreadcrumb>\\n<CBreadcrumb>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>\\n<CBreadcrumb>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem href=\\\"#\\\">Library</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Data</CBreadcrumbItem>\\n</CBreadcrumb>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CBreadcrumb,\n      CBreadcrumbItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CBreadcrumb mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n  </CBreadcrumb>\n  <CBreadcrumb mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Library</CBreadcrumbItem>\n  </CBreadcrumb>\n  <CBreadcrumb mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Library</CBreadcrumbItem>\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Data</CBreadcrumbItem>\n  </CBreadcrumb>\n    </Playground>\n    <h2 {...{\n      \"id\": \"dividers\"\n    }}>{`Dividers`}</h2>\n    <p>{`Dividers are automatically added in CSS through `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/::before\"\n      }}><inlineCode parentName=\"a\">{`::before`}</inlineCode></a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/content\"\n      }}><inlineCode parentName=\"a\">{`content`}</inlineCode></a>{`. They can be changed by modifying a local CSS custom property `}<inlineCode parentName=\"p\">{`--coreui-breadcrumb-divider`}</inlineCode>{`, or through the `}<inlineCode parentName=\"p\">{`$breadcrumb-divider`}</inlineCode>{` Sass variable — and `}<inlineCode parentName=\"p\">{`$breadcrumb-divider-flipped`}</inlineCode>{` for its RTL counterpart, if needed. We default to our Sass variable, which is set as a fallback to the custom property. This way, you get a global divider that you can override without recompiling CSS at any time.`}</p>\n    <Playground __position={1} __code={'<CBreadcrumb style={{ \\'--cui-breadcrumb-divider\\': \\\"\\'>\\'\\\" }}>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CBreadcrumb,\n      CBreadcrumbItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CBreadcrumb style={{\n        \"--cui-breadcrumb-divider\": \"'>'\"\n      }} mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Library</CBreadcrumbItem>\n  </CBreadcrumb>\n    </Playground>\n    <p>{`When modifying via Sass, the `}<a parentName=\"p\" {...{\n        \"href\": \"https://sass-lang.com/documentation/modules/string#quote\"\n      }}>{`quote`}</a>{` function is required to generate the quotes around a string. For example, using `}<inlineCode parentName=\"p\">{`>`}</inlineCode>{` as the divider, you can use this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$breadcrumb-divider: quote(\">\");\n`}</code></pre>\n    <p>{`It's also possible to use an `}<strong parentName=\"p\">{`embedded SVG icon`}</strong>{`. Apply it via our CSS custom property, or use the Sass variable.`}</p>\n    <Playground __position={2} __code={'<CBreadcrumb\\n  style={{\\n    \\'--cui-breadcrumb-divider\\':\\n      \\\"url(&#34;data:image/svg+xml,%3Csvg xmlns=\\'http://www.w3.org/2000/svg\\' width=\\'8\\' height=\\'8\\'%3E%3Cpath d=\\'M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z\\' fill=\\'currentColor\\'/%3E%3C/svg%3E&#34;);\\\",\\n  }}\\n>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CBreadcrumb,\n      CBreadcrumbItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CBreadcrumb style={{\n        \"--cui-breadcrumb-divider\": \"url(&#34;data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E&#34;);\"\n      }} mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Library</CBreadcrumbItem>\n  </CBreadcrumb>\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$breadcrumb-divider: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' \nwidth='8' height='8'%3E%3Cpath d='M2.5 0L1 1.5 3.5 4 1 6.5 2.5 8l4-4-4-4z' fill='currentColor'/%3E%3C/svg%3E\");\n`}</code></pre>\n    <p>{`You can also remove the divider setting `}<inlineCode parentName=\"p\">{`--cui-breadcrumb-divider: '';`}</inlineCode>{` (empty strings in CSS custom properties counts as a value), or setting the Sass variable to `}<inlineCode parentName=\"p\">{`$breadcrumb-divider: none;`}</inlineCode>{`.`}</p>\n    <Playground __position={3} __code={'<CBreadcrumb style={{ \\'--cui-breadcrumb-divider\\': \\\"\\'\\';\\\" }}>\\n  <CBreadcrumbItem href=\\\"#\\\">Home</CBreadcrumbItem>\\n  <CBreadcrumbItem active>Library</CBreadcrumbItem>\\n</CBreadcrumb>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CBreadcrumb,\n      CBreadcrumbItem,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <CBreadcrumb style={{\n        \"--cui-breadcrumb-divider\": \"'';\"\n      }} mdxType=\"CBreadcrumb\">\n    <CBreadcrumbItem href=\"#\" mdxType=\"CBreadcrumbItem\">Home</CBreadcrumbItem>\n    <CBreadcrumbItem active mdxType=\"CBreadcrumbItem\">Library</CBreadcrumbItem>\n  </CBreadcrumb>\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$breadcrumb-divider: none;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"accessibility\"\n    }}>{`Accessibility`}</h2>\n    <p>{`Since breadcrumbs provide navigation, it's useful to add a significant label such as `}<inlineCode parentName=\"p\">{`aria-label=\"breadcrumb\"`}</inlineCode>{` to explain the type of navigation implemented in the `}<inlineCode parentName=\"p\">{`<nav>`}</inlineCode>{` element. You should also add an `}<inlineCode parentName=\"p\">{`aria-current=\"page\"`}</inlineCode>{` to the last item of the set to show that it represents the current page. `}<strong parentName=\"p\">{`CoreUI for React.js automatically add all of this labels to breadcrumb's components.`}</strong>{` `}</p>\n    <p>{`For more information, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.w3.org/TR/wai-aria-practices/#breadcrumb\"\n      }}>{`WAI-ARIA Authoring Practices for the breadcrumb pattern`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"api\"\n    }}>{`API`}</h2>\n    <h3 {...{\n      \"id\": \"cbreadcrumb\"\n    }}>{`CBreadcrumb`}</h3>\n    <Props of={CBreadcrumb} mdxType=\"Props\" />\n    <h3 {...{\n      \"id\": \"cbreadcrumbitem\"\n    }}>{`CBreadcrumbItem`}</h3>\n    <Props of={CBreadcrumbItem} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}