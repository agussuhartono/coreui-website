(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{YrbN:function(e,o,t){"use strict";t.r(o),t.d(o,"_frontmatter",(function(){return u})),t.d(o,"default",(function(){return s}));var a=t("Fcif"),n=t("+I+c"),c=t("mXGw"),i=t("/FXl"),l=t("BIGe"),d=t("ZFoC"),b=t("bzer"),r=(t("aD51"),["components"]),u={};void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/4.0/forms/CFormCheck.mdx"}});var m={_frontmatter:u},C=l.a;function s(e){var o,t,s,p,h,f,k,y,F,x,_,O,j,D,g,R,w,T=e.components,L=Object(n.a)(e,r);return Object(i.b)(C,Object(a.a)({},m,L,{components:T,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"approach"},"Approach"),Object(i.b)("p",null,"Browser default checkboxes and radios are replaced with the help of ",Object(i.b)("inlineCode",{parentName:"p"},"<CFormCheck>"),". Checkboxes are for selecting one or several options in a list, while radios are for selecting one option from many."),Object(i.b)("h2",{id:"checks"},"Checks"),Object(i.b)(d.c,{__position:0,__code:'<CFormCheck id="flexCheckDefault" label="Default checkbox" />\n<CFormCheck id="flexCheckChecked" label="Checked checkbox" defaultChecked />',__scope:(o={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},o.DefaultLayout=l.a,o._frontmatter=u,o),mdxType:"Playground"},Object(i.b)(b.V,{id:"flexCheckDefault",label:"Default checkbox",mdxType:"CFormCheck"}),Object(i.b)(b.V,{id:"flexCheckChecked",label:"Checked checkbox",defaultChecked:!0,mdxType:"CFormCheck"})),Object(i.b)("h2",{id:"indeterminate"},"Indeterminate"),Object(i.b)("p",null,"Checkboxes can utilize the ",Object(i.b)("inlineCode",{parentName:"p"},":indeterminate")," pseudo class when manually set via JavaScript (there is no available HTML attribute for specifying it)."),Object(i.b)(d.c,{__position:1,__code:'() => {\n  const checkboxRef = useRef(null)\n  useEffect(() => {\n    checkboxRef.current.indeterminate = true\n  })\n  return (\n    <CFormCheck\n      id="flexCheckIndeterminate"\n      label="Indeterminate checkbox"\n      ref={checkboxRef}\n    />\n  )\n}',__scope:(t={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},t.DefaultLayout=l.a,t._frontmatter=u,t),mdxType:"Playground"},(function(){var e=Object(c.useRef)(null);return Object(c.useEffect)((function(){e.current.indeterminate=!0})),Object(i.b)(b.V,{id:"flexCheckIndeterminate",label:"Indeterminate checkbox",ref:e,mdxType:"CFormCheck"})})),Object(i.b)("h3",{id:"disabled"},"Disabled"),Object(i.b)("p",null,"Add the ",Object(i.b)("inlineCode",{parentName:"p"},"disabled")," attribute and the associated ",Object(i.b)("inlineCode",{parentName:"p"},"<label>"),"s are automatically styled to match with a lighter color to help indicate the input's state."),Object(i.b)(d.c,{__position:2,__code:'<CFormCheck label="Disabled checkbox" disabled />\n<CFormCheck label="Disabled checked checkbox" defaultChecked disabled />',__scope:(s={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},s.DefaultLayout=l.a,s._frontmatter=u,s),mdxType:"Playground"},Object(i.b)(b.V,{label:"Disabled checkbox",disabled:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{label:"Disabled checked checkbox",defaultChecked:!0,disabled:!0,mdxType:"CFormCheck"})),Object(i.b)("h2",{id:"radios"},"Radios"),Object(i.b)("p",null,"Add the ",Object(i.b)("inlineCode",{parentName:"p"},"disabled")," attribute and the associated ",Object(i.b)("inlineCode",{parentName:"p"},"<label>"),"s are automatically styled to match with a lighter color to help indicate the input's state."),Object(i.b)(d.c,{__position:3,__code:'<CFormCheck\n  type="radio"\n  name="flexRadioDefault"\n  id="flexRadioDefault1"\n  label="Default radio"\n/>\n<CFormCheck\n  type="radio"\n  name="flexRadioDefault"\n  id="flexRadioDefault2"\n  label="Checked radio"\n  defaultChecked\n/>',__scope:(p={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},p.DefaultLayout=l.a,p._frontmatter=u,p),mdxType:"Playground"},Object(i.b)(b.V,{type:"radio",name:"flexRadioDefault",id:"flexRadioDefault1",label:"Default radio",mdxType:"CFormCheck"}),Object(i.b)(b.V,{type:"radio",name:"flexRadioDefault",id:"flexRadioDefault2",label:"Checked radio",defaultChecked:!0,mdxType:"CFormCheck"})),Object(i.b)("h3",{id:"disabled-1"},"Disabled"),Object(i.b)(d.c,{__position:4,__code:'<CFormCheck\n  type="radio"\n  name="flexRadioDisabled"\n  id="flexRadioDisabled"\n  label="Disabled radio"\n  disabled\n/>\n<CFormCheck\n  type="radio"\n  name="flexRadioDisabled"\n  id="flexRadioCheckedDisabled"\n  label="Disabled checked radio"\n  defaultChecked\n  disabled\n/>',__scope:(h={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},h.DefaultLayout=l.a,h._frontmatter=u,h),mdxType:"Playground"},Object(i.b)(b.V,{type:"radio",name:"flexRadioDisabled",id:"flexRadioDisabled",label:"Disabled radio",disabled:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{type:"radio",name:"flexRadioDisabled",id:"flexRadioCheckedDisabled",label:"Disabled checked radio",defaultChecked:!0,disabled:!0,mdxType:"CFormCheck"})),Object(i.b)("h2",{id:"switches"},"Switches"),Object(i.b)("p",null,"A switch has the markup of a custom checkbox but uses the ",Object(i.b)("inlineCode",{parentName:"p"},"switch")," boolean properly to render a toggle switch. Switches also support the ",Object(i.b)("inlineCode",{parentName:"p"},"disabled")," attribute."),Object(i.b)(d.c,{__position:5,__code:'<CFormSwitch\n  label="Default switch checkbox input"\n  id="formSwitchCheckDefault"\n/>\n<CFormSwitch\n  label="Checked switch checkbox input"\n  id="formSwitchCheckChecked"\n  defaultChecked\n/>\n<CFormSwitch\n  label="Disabled switch checkbox input"\n  id="formSwitchCheckDisabled"\n  disabled\n/>\n<CFormSwitch\n  label="Disabled checked switch checkbox input"\n  id="formSwitchCheckCheckedDisabled"\n  defaultChecked\n  disabled\n/>',__scope:(f={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},f.DefaultLayout=l.a,f._frontmatter=u,f),mdxType:"Playground"},Object(i.b)(b.cb,{label:"Default switch checkbox input",id:"formSwitchCheckDefault",mdxType:"CFormSwitch"}),Object(i.b)(b.cb,{label:"Checked switch checkbox input",id:"formSwitchCheckChecked",defaultChecked:!0,mdxType:"CFormSwitch"}),Object(i.b)(b.cb,{label:"Disabled switch checkbox input",id:"formSwitchCheckDisabled",disabled:!0,mdxType:"CFormSwitch"}),Object(i.b)(b.cb,{label:"Disabled checked switch checkbox input",id:"formSwitchCheckCheckedDisabled",defaultChecked:!0,disabled:!0,mdxType:"CFormSwitch"})),Object(i.b)("h3",{id:"sizes"},"Sizes"),Object(i.b)(d.c,{__position:6,__code:'<CFormSwitch\n  label="Default switch checkbox input"\n  id="formSwitchCheckDefault"\n/>\n<CFormSwitch\n  size="lg"\n  label="Large switch checkbox input"\n  id="formSwitchCheckDefaultLg"\n/>\n<CFormSwitch\n  size="xl"\n  label="Extra large switch checkbox input"\n  id="formSwitchCheckDefaultXL"\n/>',__scope:(k={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},k.DefaultLayout=l.a,k._frontmatter=u,k),mdxType:"Playground"},Object(i.b)(b.cb,{label:"Default switch checkbox input",id:"formSwitchCheckDefault",mdxType:"CFormSwitch"}),Object(i.b)(b.cb,{size:"lg",label:"Large switch checkbox input",id:"formSwitchCheckDefaultLg",mdxType:"CFormSwitch"}),Object(i.b)(b.cb,{size:"xl",label:"Extra large switch checkbox input",id:"formSwitchCheckDefaultXL",mdxType:"CFormSwitch"})),Object(i.b)("h2",{id:"default-stacked"},"Default (stacked)"),Object(i.b)("p",null,"By default, any number of checkboxes and radios that are immediate sibling will be vertically stacked and appropriately spaced."),Object(i.b)(d.c,{__position:7,__code:'<CFormCheck id="defaultCheck1" label="Default checkbox" />\n<CFormCheck id="defaultCheck2" label="Disabled checkbox" disabled />',__scope:(y={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},y.DefaultLayout=l.a,y._frontmatter=u,y),mdxType:"Playground"},Object(i.b)(b.V,{id:"defaultCheck1",label:"Default checkbox",mdxType:"CFormCheck"}),Object(i.b)(b.V,{id:"defaultCheck2",label:"Disabled checkbox",disabled:!0,mdxType:"CFormCheck"})),Object(i.b)(d.c,{__position:8,__code:'<CFormCheck\n  type="radio"\n  name="exampleRadios"\n  id="exampleRadios1"\n  value="option1"\n  label="Default radio"\n  defaultChecked\n/>\n<CFormCheck\n  type="radio"\n  name="exampleRadios"\n  id="exampleRadios2"\n  value="option2"\n  label="Second default radio"\n/>\n<CFormCheck\n  type="radio"\n  name="exampleRadios"\n  id="exampleRadios3"\n  value="option3"\n  label="Disabled radio"\n  disabled\n/>',__scope:(F={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},F.DefaultLayout=l.a,F._frontmatter=u,F),mdxType:"Playground"},Object(i.b)(b.V,{type:"radio",name:"exampleRadios",id:"exampleRadios1",value:"option1",label:"Default radio",defaultChecked:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{type:"radio",name:"exampleRadios",id:"exampleRadios2",value:"option2",label:"Second default radio",mdxType:"CFormCheck"}),Object(i.b)(b.V,{type:"radio",name:"exampleRadios",id:"exampleRadios3",value:"option3",label:"Disabled radio",disabled:!0,mdxType:"CFormCheck"})),Object(i.b)("h2",{id:"inline"},"Inline"),Object(i.b)("p",null,"Group checkboxes or radios on the same horizontal row by adding ",Object(i.b)("inlineCode",{parentName:"p"},"inline")," boolean property to any ",Object(i.b)("inlineCode",{parentName:"p"},"<CFormCheck>"),"."),Object(i.b)(d.c,{__position:9,__code:'<CFormCheck inline id="inlineCheckbox1" value="option1" label="1" />\n<CFormCheck inline id="inlineCheckbox2" value="option2" label="2" />\n<CFormCheck\n  inline\n  id="inlineCheckbox3"\n  value="option3"\n  label="3 (disabled)"\n  disabled\n/>',__scope:(x={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},x.DefaultLayout=l.a,x._frontmatter=u,x),mdxType:"Playground"},Object(i.b)(b.V,{inline:!0,id:"inlineCheckbox1",value:"option1",label:"1",mdxType:"CFormCheck"}),Object(i.b)(b.V,{inline:!0,id:"inlineCheckbox2",value:"option2",label:"2",mdxType:"CFormCheck"}),Object(i.b)(b.V,{inline:!0,id:"inlineCheckbox3",value:"option3",label:"3 (disabled)",disabled:!0,mdxType:"CFormCheck"})),Object(i.b)(d.c,{__position:10,__code:'<CFormCheck\n  inline\n  type="radio"\n  name="inlineRadioOptions"\n  id="inlineCheckbox1"\n  value="option1"\n  label="1"\n/>\n<CFormCheck\n  inline\n  type="radio"\n  name="inlineRadioOptions"\n  id="inlineCheckbox2"\n  value="option2"\n  label="2"\n/>\n<CFormCheck\n  inline\n  type="radio"\n  name="inlineRadioOptions"\n  id="inlineCheckbox3"\n  value="option3"\n  label="3 (disabled)"\n  disabled\n/>',__scope:(_={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},_.DefaultLayout=l.a,_._frontmatter=u,_),mdxType:"Playground"},Object(i.b)(b.V,{inline:!0,type:"radio",name:"inlineRadioOptions",id:"inlineCheckbox1",value:"option1",label:"1",mdxType:"CFormCheck"}),Object(i.b)(b.V,{inline:!0,type:"radio",name:"inlineRadioOptions",id:"inlineCheckbox2",value:"option2",label:"2",mdxType:"CFormCheck"}),Object(i.b)(b.V,{inline:!0,type:"radio",name:"inlineRadioOptions",id:"inlineCheckbox3",value:"option3",label:"3 (disabled)",disabled:!0,mdxType:"CFormCheck"})),Object(i.b)("h2",{id:"without-labels"},"Without labels"),Object(i.b)("p",null,"Remember to still provide some form of accessible name for assistive technologies (for instance, using ",Object(i.b)("inlineCode",{parentName:"p"},"aria-label"),")."),Object(i.b)(d.c,{__position:11,__code:'<div>\n  <CFormCheck id="checkboxNoLabel" value="" aria-label="..." />\n</div>\n<div>\n  <CFormCheck\n    type="radio"\n    name="radioNoLabel"\n    id="radioNoLabel"\n    value=""\n    aria-label="..."\n  />\n</div>',__scope:(O={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},O.DefaultLayout=l.a,O._frontmatter=u,O),mdxType:"Playground"},Object(i.b)("div",null,Object(i.b)(b.V,{id:"checkboxNoLabel",value:"","aria-label":"...",mdxType:"CFormCheck"})),Object(i.b)("div",null,Object(i.b)(b.V,{type:"radio",name:"radioNoLabel",id:"radioNoLabel",value:"","aria-label":"...",mdxType:"CFormCheck"}))),Object(i.b)("h2",{id:"toggle-buttons"},"Toggle buttons"),Object(i.b)("p",null,"Create button-like checkboxes and radio buttons by using ",Object(i.b)("inlineCode",{parentName:"p"},"button")," boolean property on the ",Object(i.b)("inlineCode",{parentName:"p"},"<CFormCheck>")," component. These toggle buttons can further be grouped in a button group if needed."),Object(i.b)("h3",{id:"checkbox-toggle-buttons"},"Checkbox toggle buttons"),Object(i.b)(d.c,{__position:12,__code:'<CFormCheck\n  button={{ color: \'primary\' }}\n  id="btn-check"\n  autoComplete="off"\n  label="Single toggle"\n/>',__scope:(j={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},j.DefaultLayout=l.a,j._frontmatter=u,j),mdxType:"Playground"},Object(i.b)(b.V,{button:{color:"primary"},id:"btn-check",autoComplete:"off",label:"Single toggle",mdxType:"CFormCheck"})),Object(i.b)(d.c,{__position:13,__code:'<CFormCheck\n  button={{ color: \'primary\' }}\n  id="btn-check-2"\n  autoComplete="off"\n  label="Checked"\n  defaultChecked\n/>',__scope:(D={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},D.DefaultLayout=l.a,D._frontmatter=u,D),mdxType:"Playground"},Object(i.b)(b.V,{button:{color:"primary"},id:"btn-check-2",autoComplete:"off",label:"Checked",defaultChecked:!0,mdxType:"CFormCheck"})),Object(i.b)(d.c,{__position:14,__code:'<CFormCheck\n  button={{ color: \'primary\' }}\n  id="btn-check-3"\n  autoComplete="off"\n  label="Disabled"\n  disabled\n/>',__scope:(g={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},g.DefaultLayout=l.a,g._frontmatter=u,g),mdxType:"Playground"},Object(i.b)(b.V,{button:{color:"primary"},id:"btn-check-3",autoComplete:"off",label:"Disabled",disabled:!0,mdxType:"CFormCheck"})),Object(i.b)("h3",{id:"radio-toggle-buttons"},"Radio toggle buttons"),Object(i.b)(d.c,{__position:15,__code:'<CFormCheck\n  button={{ color: \'secondary\' }}\n  type="radio"\n  name="options"\n  id="option1"\n  autoComplete="off"\n  label="Checked"\n  defaultChecked\n/>\n<CFormCheck\n  button={{ color: \'secondary\' }}\n  type="radio"\n  name="options"\n  id="option2"\n  autoComplete="off"\n  label="Radio"\n/>\n<CFormCheck\n  button={{ color: \'secondary\' }}\n  type="radio"\n  name="options"\n  id="option3"\n  autoComplete="off"\n  label="Radio"\n  disabled\n/>\n<CFormCheck\n  button={{ color: \'secondary\' }}\n  type="radio"\n  name="options"\n  id="option4"\n  autoComplete="off"\n  label="Radio"\n/>',__scope:(R={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},R.DefaultLayout=l.a,R._frontmatter=u,R),mdxType:"Playground"},Object(i.b)(b.V,{button:{color:"secondary"},type:"radio",name:"options",id:"option1",autoComplete:"off",label:"Checked",defaultChecked:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{button:{color:"secondary"},type:"radio",name:"options",id:"option2",autoComplete:"off",label:"Radio",mdxType:"CFormCheck"}),Object(i.b)(b.V,{button:{color:"secondary"},type:"radio",name:"options",id:"option3",autoComplete:"off",label:"Radio",disabled:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{button:{color:"secondary"},type:"radio",name:"options",id:"option4",autoComplete:"off",label:"Radio",mdxType:"CFormCheck"})),Object(i.b)("h3",{id:"outlined-styles"},"Outlined styles"),Object(i.b)("p",null,"Different variants of button, such at the various outlined styles, are supported."),Object(i.b)(d.c,{__position:16,__code:'<div>\n  <CFormCheck\n    button={{ color: \'primary\', variant: \'outline\' }}\n    id="btn-check-outlined"\n    autoComplete="off"\n    label="Single toggle"\n  />\n</div>\n<div>\n  <CFormCheck\n    button={{ color: \'secondary\', variant: \'outline\' }}\n    id="btn-check-2-outlined"\n    autoComplete="off"\n    label="Checked"\n    defaultChecked\n  />\n</div>\n<div>\n  <CFormCheck\n    button={{ color: \'success\', variant: \'outline\' }}\n    type="radio"\n    name="options-outlined"\n    id="success-outlined"\n    autoComplete="off"\n    label="Radio"\n    defaultChecked\n  />\n  <CFormCheck\n    button={{ color: \'danger\', variant: \'outline\' }}\n    type="radio"\n    name="options-outlined"\n    id="danger-outlined"\n    autoComplete="off"\n    label="Radio"\n  />\n</div>',__scope:(w={props:L,DefaultLayout:l.a,useEffect:c.useEffect,useRef:c.useRef,Playground:d.c,Props:d.d,CButton:b.n,CForm:b.U,CFormCheck:b.V,CFormLabel:b.Z,CFormSwitch:b.cb,CFormText:b.db},w.DefaultLayout=l.a,w._frontmatter=u,w),mdxType:"Playground"},Object(i.b)("div",null,Object(i.b)(b.V,{button:{color:"primary",variant:"outline"},id:"btn-check-outlined",autoComplete:"off",label:"Single toggle",mdxType:"CFormCheck"})),Object(i.b)("div",null,Object(i.b)(b.V,{button:{color:"secondary",variant:"outline"},id:"btn-check-2-outlined",autoComplete:"off",label:"Checked",defaultChecked:!0,mdxType:"CFormCheck"})),Object(i.b)("div",null,Object(i.b)(b.V,{button:{color:"success",variant:"outline"},type:"radio",name:"options-outlined",id:"success-outlined",autoComplete:"off",label:"Radio",defaultChecked:!0,mdxType:"CFormCheck"}),Object(i.b)(b.V,{button:{color:"danger",variant:"outline"},type:"radio",name:"options-outlined",id:"danger-outlined",autoComplete:"off",label:"Radio",mdxType:"CFormCheck"}))),Object(i.b)("h2",{id:"api"},"API"),Object(i.b)("h3",{id:"cformcheck"},"CFormCheck"),Object(i.b)(d.d,{of:b.V,mdxType:"Props"}),Object(i.b)("h3",{id:"cformswitch"},"CFormSwitch"),Object(i.b)(d.d,{of:b.cb,mdxType:"Props"}))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/4.0/forms/CFormCheck.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-4-0-forms-c-form-check-mdx-27b4c6c48ff7a1df8c12.js.map