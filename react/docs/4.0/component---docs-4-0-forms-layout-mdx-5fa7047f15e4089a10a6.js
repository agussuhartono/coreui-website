(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{MGLC:function(e,o,t){"use strict";t.r(o),t.d(o,"_frontmatter",(function(){return b})),t.d(o,"default",(function(){return d}));var n=t("Fcif"),l=t("+I+c"),a=(t("mXGw"),t("/FXl")),r=t("BIGe"),m=t("ZFoC"),i=t("bzer"),p=(t("aD51"),["components"]),b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/4.0/forms/Layout.mdx"}});var C={_frontmatter:b},c=r.a;function d(e){var o,t,d,s,u,y,F,h,O,x=e.components,j=Object(l.a)(e,p);return Object(a.b)(c,Object(n.a)({},C,j,{components:x,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"forms"},"Forms"),Object(a.b)("p",null,"Every group of form fields should reside in a ",Object(a.b)("inlineCode",{parentName:"p"},"<CForm>")," element. CoreUI provides no default styling for the ",Object(a.b)("inlineCode",{parentName:"p"},"<CForm>")," element, but there are some powerful browser features that are provided by default."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"New to browser forms? Consider reviewing ",Object(a.b)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form"},"the MDN form docs")," for an overview and complete list of available attributes."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"<CButton>"),"s within a ",Object(a.b)("inlineCode",{parentName:"li"},"<CForm>")," default to ",Object(a.b)("inlineCode",{parentName:"li"},'type="submit"'),", so strive to be specific and always include a ",Object(a.b)("inlineCode",{parentName:"li"},"type"),"."),Object(a.b)("li",{parentName:"ul"},"You can disable every form element within a form with the ",Object(a.b)("inlineCode",{parentName:"li"},"disabled")," attribute on the ",Object(a.b)("inlineCode",{parentName:"li"},"<CForm>"),".")),Object(a.b)("p",null,"Since CoreUI applies ",Object(a.b)("inlineCode",{parentName:"p"},"display: block")," and ",Object(a.b)("inlineCode",{parentName:"p"},"width: 100%")," to almost all our form controls, forms will by default stack vertically. Additional classes can be used to vary this layout on a per-form basis."),Object(a.b)("h2",{id:"utilities"},"Utilities"),Object(a.b)("p",null,Object(a.b)("a",{parentName:"p",href:"https://coreui.io/docs/utilities/spacing/"},"Margin utilities")," are the easiest way to add some structure to forms. They provide basic grouping of labels, controls, optional form text, and form validation messaging. We recommend sticking to ",Object(a.b)("inlineCode",{parentName:"p"},"margin-bottom")," utilities, and using a single direction throughout the form for consistency."),Object(a.b)("h2",{id:"form-grid"},"Form grid"),Object(a.b)("p",null,"More complex forms can be built using our grid classes. Use these for form layouts that require multiple columns, varied widths, and additional alignment options."),Object(a.b)(m.c,{__position:0,__code:'<CRow>\n  <CCol xs>\n    <CFormInput placeholder="First name" aria-label="First name" />\n  </CCol>\n  <CCol xs>\n    <CFormInput placeholder="Last name" aria-label="Last name" />\n  </CCol>\n</CRow>',__scope:(o={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},o.DefaultLayout=r.a,o._frontmatter=b,o),mdxType:"Playground"},Object(a.b)(i.Ub,{mdxType:"CRow"},Object(a.b)(i.J,{xs:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"First name","aria-label":"First name",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"Last name","aria-label":"Last name",mdxType:"CFormInput"})))),Object(a.b)("h2",{id:"gutters"},"Gutters"),Object(a.b)("p",null,"By adding ",Object(a.b)("a",{parentName:"p",href:"https://coreui.io/docs/layout/gutters/"},"gutter modifier classes"),", you can have control over the gutter width in as well the inline as block direction."),Object(a.b)(m.c,{__position:1,__code:'<CRow className="g-3">\n  <CCol xs>\n    <CFormInput placeholder="First name" aria-label="First name" />\n  </CCol>\n  <CCol xs>\n    <CFormInput placeholder="Last name" aria-label="Last name" />\n  </CCol>\n</CRow>',__scope:(t={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},t.DefaultLayout=r.a,t._frontmatter=b,t),mdxType:"Playground"},Object(a.b)(i.Ub,{className:"g-3",mdxType:"CRow"},Object(a.b)(i.J,{xs:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"First name","aria-label":"First name",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"Last name","aria-label":"Last name",mdxType:"CFormInput"})))),Object(a.b)("p",null,"More complex layouts can also be created with the grid system."),Object(a.b)(m.c,{__position:2,__code:'<CForm className="row g-3">\n  <CCol md={6}>\n    <CFormLabel htmlFor="inputEmail4">Email</CFormLabel>\n    <CFormInput type="email" id="inputEmail4" />\n  </CCol>\n  <CCol md={6}>\n    <CFormLabel htmlFor="inputPassword4">Password</CFormLabel>\n    <CFormInput type="password" id="inputPassword4" />\n  </CCol>\n  <CCol xs={12}>\n    <CFormLabel htmlFor="inputAddress">Address</CFormLabel>\n    <CFormInput id="inputAddress" placeholder="1234 Main St" />\n  </CCol>\n  <CCol xs={12}>\n    <CFormLabel htmlFor="inputAddress2">Address 2</CFormLabel>\n    <CFormInput\n      id="inputAddress2"\n      placeholder="Apartment, studio, or floor"\n    />\n  </CCol>\n  <CCol md={6}>\n    <CFormLabel htmlFor="inputCity">City</CFormLabel>\n    <CFormInput id="inputCity" />\n  </CCol>\n  <CCol md={4}>\n    <CFormLabel htmlFor="inputState">State</CFormLabel>\n    <CFormSelect id="inputState">\n      <option>Choose...</option>\n      <option>...</option>\n    </CFormSelect>\n  </CCol>\n  <CCol md={2}>\n    <CFormLabel htmlFor="inputZip">Zip</CFormLabel>\n    <CFormInput id="inputZip" />\n  </CCol>\n  <CCol xs={12}>\n    <CFormCheck type="checkbox" id="gridCheck" label="Check me out" />\n  </CCol>\n  <CCol xs={12}>\n    <CButton type="submit">Sign in</CButton>\n  </CCol>\n</CForm>',__scope:(d={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},d.DefaultLayout=r.a,d._frontmatter=b,d),mdxType:"Playground"},Object(a.b)(i.U,{className:"row g-3",mdxType:"CForm"},Object(a.b)(i.J,{md:6,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputEmail4",mdxType:"CFormLabel"},"Email"),Object(a.b)(i.Y,{type:"email",id:"inputEmail4",mdxType:"CFormInput"})),Object(a.b)(i.J,{md:6,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputPassword4",mdxType:"CFormLabel"},"Password"),Object(a.b)(i.Y,{type:"password",id:"inputPassword4",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputAddress",mdxType:"CFormLabel"},"Address"),Object(a.b)(i.Y,{id:"inputAddress",placeholder:"1234 Main St",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputAddress2",mdxType:"CFormLabel"},"Address 2"),Object(a.b)(i.Y,{id:"inputAddress2",placeholder:"Apartment, studio, or floor",mdxType:"CFormInput"})),Object(a.b)(i.J,{md:6,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputCity",mdxType:"CFormLabel"},"City"),Object(a.b)(i.Y,{id:"inputCity",mdxType:"CFormInput"})),Object(a.b)(i.J,{md:4,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputState",mdxType:"CFormLabel"},"State"),Object(a.b)(i.bb,{id:"inputState",mdxType:"CFormSelect"},Object(a.b)("option",null,"Choose..."),Object(a.b)("option",null,"..."))),Object(a.b)(i.J,{md:2,mdxType:"CCol"},Object(a.b)(i.Z,{htmlFor:"inputZip",mdxType:"CFormLabel"},"Zip"),Object(a.b)(i.Y,{id:"inputZip",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.V,{type:"checkbox",id:"gridCheck",label:"Check me out",mdxType:"CFormCheck"})),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.n,{type:"submit",mdxType:"CButton"},"Sign in")))),Object(a.b)("h2",{id:"horizontal-form"},"Horizontal form"),Object(a.b)("p",null,"Create horizontal forms with the grid by adding the ",Object(a.b)("inlineCode",{parentName:"p"},".row")," class to form groups and using the ",Object(a.b)("inlineCode",{parentName:"p"},".col-*-*")," classes to specify the width of your labels and controls. Be sure to add ",Object(a.b)("inlineCode",{parentName:"p"},".col-form-label")," to your ",Object(a.b)("inlineCode",{parentName:"p"},"<CFormLabel>"),"s as well so they're vertically centered with their associated form controls."),Object(a.b)("p",null,"At times, you maybe need to use margin or padding utilities to create that perfect alignment you need. For example, we've removed the ",Object(a.b)("inlineCode",{parentName:"p"},"padding-top")," on our stacked radio inputs label to better align the text baseline."),Object(a.b)(m.c,{__position:3,__code:'<CForm>\n  <CRow className="mb-3">\n    <CFormLabel htmlFor="inputEmail3" className="col-sm-2 col-form-label">\n      Email\n    </CFormLabel>\n    <CCol sm={10}>\n      <CFormInput type="email" id="inputEmail3" />\n    </CCol>\n  </CRow>\n  <CRow className="mb-3">\n    <CFormLabel htmlFor="inputPassword3" className="col-sm-2 col-form-label">\n      Password\n    </CFormLabel>\n    <CCol sm={10}>\n      <CFormInput type="password" id="inputPassword3" />\n    </CCol>\n  </CRow>\n  <fieldset className="row mb-3">\n    <legend className="col-form-label col-sm-2 pt-0">Radios</legend>\n    <CCol sm={10}>\n      <CFormCheck\n        type="radio"\n        name="gridRadios"\n        id="gridRadios1"\n        value="option1"\n        label="First radio"\n        defaultChecked\n      />\n      <CFormCheck\n        type="radio"\n        name="gridRadios"\n        id="gridRadios2"\n        value="option2"\n        label="Second radio"\n      />\n      <CFormCheck\n        type="radio"\n        name="gridRadios"\n        id="gridRadios3"\n        value="option3"\n        label="Third disabled radio"\n        disabled\n      />\n    </CCol>\n  </fieldset>\n  <CRow className="mb-3">\n    <div className="col-sm-10 offset-sm-2">\n      <CFormCheck type="checkbox" id="gridCheck1" label="Example checkbox" />\n    </div>\n  </CRow>\n  <CButton type="submit">Sign in</CButton>\n</CForm>',__scope:(s={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},s.DefaultLayout=r.a,s._frontmatter=b,s),mdxType:"Playground"},Object(a.b)(i.U,{mdxType:"CForm"},Object(a.b)(i.Ub,{className:"mb-3",mdxType:"CRow"},Object(a.b)(i.Z,{htmlFor:"inputEmail3",className:"col-sm-2 col-form-label",mdxType:"CFormLabel"},"Email"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.Y,{type:"email",id:"inputEmail3",mdxType:"CFormInput"}))),Object(a.b)(i.Ub,{className:"mb-3",mdxType:"CRow"},Object(a.b)(i.Z,{htmlFor:"inputPassword3",className:"col-sm-2 col-form-label",mdxType:"CFormLabel"},"Password"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.Y,{type:"password",id:"inputPassword3",mdxType:"CFormInput"}))),Object(a.b)("fieldset",{className:"row mb-3"},Object(a.b)("legend",{className:"col-form-label col-sm-2 pt-0"},"Radios"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.V,{type:"radio",name:"gridRadios",id:"gridRadios1",value:"option1",label:"First radio",defaultChecked:!0,mdxType:"CFormCheck"}),Object(a.b)(i.V,{type:"radio",name:"gridRadios",id:"gridRadios2",value:"option2",label:"Second radio",mdxType:"CFormCheck"}),Object(a.b)(i.V,{type:"radio",name:"gridRadios",id:"gridRadios3",value:"option3",label:"Third disabled radio",disabled:!0,mdxType:"CFormCheck"}))),Object(a.b)(i.Ub,{className:"mb-3",mdxType:"CRow"},Object(a.b)("div",{className:"col-sm-10 offset-sm-2"},Object(a.b)(i.V,{type:"checkbox",id:"gridCheck1",label:"Example checkbox",mdxType:"CFormCheck"}))),Object(a.b)(i.n,{type:"submit",mdxType:"CButton"},"Sign in"))),Object(a.b)("h3",{id:"horizontal-form-label-sizing"},"Horizontal form label sizing"),Object(a.b)("p",null,"Be sure to use ",Object(a.b)("inlineCode",{parentName:"p"},".col-form-label-sm")," or ",Object(a.b)("inlineCode",{parentName:"p"},".col-form-label-lg")," to your ",Object(a.b)("inlineCode",{parentName:"p"},"<CFormLabel>"),"s or ",Object(a.b)("inlineCode",{parentName:"p"},"<legend>"),"s to correctly follow the size of ",Object(a.b)("inlineCode",{parentName:"p"},".form-control-lg")," and ",Object(a.b)("inlineCode",{parentName:"p"},".form-control-sm"),"."),Object(a.b)(m.c,{__position:4,__code:'<CRow className="mb-3">\n  <CFormLabel\n    htmlFor="colFormLabelSm"\n    className="col-sm-2 col-form-label col-form-label-sm"\n  >\n    Email\n  </CFormLabel>\n  <CCol sm={10}>\n    <CFormInput\n      type="email"\n      className="form-control form-control-sm"\n      id="colFormLabelSm"\n      placeholder="col-form-label-sm"\n    />\n  </CCol>\n</CRow>\n<CRow className="mb-3">\n  <CFormLabel htmlFor="colFormLabel" className="col-sm-2 col-form-label">\n    Email\n  </CFormLabel>\n  <CCol sm={10}>\n    <CFormInput type="email" id="colFormLabel" placeholder="col-form-label" />\n  </CCol>\n</CRow>\n<CRow>\n  <CFormLabel\n    htmlFor="colFormLabelLg"\n    className="col-sm-2 col-form-label col-form-label-lg"\n  >\n    Email\n  </CFormLabel>\n  <CCol sm={10}>\n    <CFormInput\n      type="email"\n      className="form-control form-control-lg"\n      id="colFormLabelLg"\n      placeholder="col-form-label-lg"\n    />\n  </CCol>\n</CRow>',__scope:(u={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},u.DefaultLayout=r.a,u._frontmatter=b,u),mdxType:"Playground"},Object(a.b)(i.Ub,{className:"mb-3",mdxType:"CRow"},Object(a.b)(i.Z,{htmlFor:"colFormLabelSm",className:"col-sm-2 col-form-label col-form-label-sm",mdxType:"CFormLabel"},"Email"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.Y,{type:"email",className:"form-control form-control-sm",id:"colFormLabelSm",placeholder:"col-form-label-sm",mdxType:"CFormInput"}))),Object(a.b)(i.Ub,{className:"mb-3",mdxType:"CRow"},Object(a.b)(i.Z,{htmlFor:"colFormLabel",className:"col-sm-2 col-form-label",mdxType:"CFormLabel"},"Email"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.Y,{type:"email",id:"colFormLabel",placeholder:"col-form-label",mdxType:"CFormInput"}))),Object(a.b)(i.Ub,{mdxType:"CRow"},Object(a.b)(i.Z,{htmlFor:"colFormLabelLg",className:"col-sm-2 col-form-label col-form-label-lg",mdxType:"CFormLabel"},"Email"),Object(a.b)(i.J,{sm:10,mdxType:"CCol"},Object(a.b)(i.Y,{type:"email",className:"form-control form-control-lg",id:"colFormLabelLg",placeholder:"col-form-label-lg",mdxType:"CFormInput"})))),Object(a.b)("h2",{id:"column-sizing"},"Column sizing"),Object(a.b)("p",null,"As shown in the previous examples, our grid system allows you to place any number of ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol>"),"s within a ",Object(a.b)("inlineCode",{parentName:"p"},"<CRow>"),". They'll split the available width equally between them. You may also pick a subset of your columns to take up more or less space, while the remaining ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol>"),"s equally split the rest, with specific column classes like ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol sm={7} >"),"."),Object(a.b)(m.c,{__position:5,__code:'<CRow className="g-3">\n  <CCol sm={7}>\n    <CFormInput placeholder="City" aria-label="City" />\n  </CCol>\n  <CCol sm>\n    <CFormInput placeholder="State" aria-label="State" />\n  </CCol>\n  <CCol sm>\n    <CFormInput placeholder="Zip" aria-label="Zip" />\n  </CCol>\n</CRow>',__scope:(y={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},y.DefaultLayout=r.a,y._frontmatter=b,y),mdxType:"Playground"},Object(a.b)(i.Ub,{className:"g-3",mdxType:"CRow"},Object(a.b)(i.J,{sm:7,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"City","aria-label":"City",mdxType:"CFormInput"})),Object(a.b)(i.J,{sm:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"State","aria-label":"State",mdxType:"CFormInput"})),Object(a.b)(i.J,{sm:!0,mdxType:"CCol"},Object(a.b)(i.Y,{placeholder:"Zip","aria-label":"Zip",mdxType:"CFormInput"})))),Object(a.b)("h2",{id:"auto-sizing"},"Auto-sizing"),Object(a.b)("p",null,"The example below uses a flexbox utility to vertically center the contents and changes ",Object(a.b)("inlineCode",{parentName:"p"},"<CCol>")," to ",Object(a.b)("inlineCode",{parentName:"p"},'<CCol xs="auto">')," so that your columns only take up as much space as needed. Put another way, the column sizes itself based on the contents."),Object(a.b)(m.c,{__position:6,__code:'<CForm className="row gy-2 gx-3 align-items-center">\n  <CCol xs="auto">\n    <CFormLabel className="visually-hidden" htmlFor="autoSizingInput">\n      Name\n    </CFormLabel>\n    <CFormInput id="autoSizingInput" placeholder="Jane Doe" />\n  </CCol>\n  <CCol xs="auto">\n    <CFormLabel className="visually-hidden" htmlFor="autoSizingInputGroup">\n      Username\n    </CFormLabel>\n    <CInputGroup>\n      <CInputGroupText>@</CInputGroupText>\n      <CFormInput id="autoSizingInputGroup" placeholder="Username" />\n    </CInputGroup>\n  </CCol>\n  <CCol xs="auto">\n    <CFormLabel className="visually-hidden" htmlFor="autoSizingSelect">\n      Preference\n    </CFormLabel>\n    <CFormSelect id="autoSizingSelect">\n      <option>Choose...</option>\n      <option value="1">One</option>\n      <option value="2">Two</option>\n      <option value="3">Three</option>\n    </CFormSelect>\n  </CCol>\n  <CCol xs="auto">\n    <CFormCheck type="checkbox" id="autoSizingCheck" label="Remember me" />\n  </CCol>\n  <CCol xs="auto">\n    <CButton type="submit">Submit</CButton>\n  </CCol>\n</CForm>',__scope:(F={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},F.DefaultLayout=r.a,F._frontmatter=b,F),mdxType:"Playground"},Object(a.b)(i.U,{className:"row gy-2 gx-3 align-items-center",mdxType:"CForm"},Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"autoSizingInput",mdxType:"CFormLabel"},"Name"),Object(a.b)(i.Y,{id:"autoSizingInput",placeholder:"Jane Doe",mdxType:"CFormInput"})),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"autoSizingInputGroup",mdxType:"CFormLabel"},"Username"),Object(a.b)(i.mb,{mdxType:"CInputGroup"},Object(a.b)(i.nb,{mdxType:"CInputGroupText"},"@"),Object(a.b)(i.Y,{id:"autoSizingInputGroup",placeholder:"Username",mdxType:"CFormInput"}))),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"autoSizingSelect",mdxType:"CFormLabel"},"Preference"),Object(a.b)(i.bb,{id:"autoSizingSelect",mdxType:"CFormSelect"},Object(a.b)("option",null,"Choose..."),Object(a.b)("option",{value:"1"},"One"),Object(a.b)("option",{value:"2"},"Two"),Object(a.b)("option",{value:"3"},"Three"))),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.V,{type:"checkbox",id:"autoSizingCheck",label:"Remember me",mdxType:"CFormCheck"})),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.n,{type:"submit",mdxType:"CButton"},"Submit")))),Object(a.b)("p",null,"You can then remix that once again with size-specific column classes."),Object(a.b)(m.c,{__position:7,__code:'<CForm className="row gx-3 gy-2 align-items-center">\n  <CCol sm={3}>\n    <CFormLabel className="visually-hidden" htmlFor="specificSizeInputName">\n      Name\n    </CFormLabel>\n    <CFormInput id="specificSizeInputName" placeholder="Jane Doe" />\n  </CCol>\n  <CCol sm={3}>\n    <CFormLabel\n      className="visually-hidden"\n      htmlFor="specificSizeInputGroupUsername"\n    >\n      Username\n    </CFormLabel>\n    <CInputGroup>\n      <CInputGroupText>@</CInputGroupText>\n      <CFormInput\n        id="specificSizeInputGroupUsername"\n        placeholder="Username"\n      />\n    </CInputGroup>\n  </CCol>\n  <CCol sm={3}>\n    <CFormLabel className="visually-hidden" htmlFor="specificSizeSelect">\n      Preference\n    </CFormLabel>\n    <CFormSelect id="specificSizeSelect">\n      <option>Choose...</option>\n      <option value="1">One</option>\n      <option value="2">Two</option>\n      <option value="3">Three</option>\n    </CFormSelect>\n  </CCol>\n  <CCol xs="auto">\n    <CFormCheck type="checkbox" id="autoSizingCheck2" label="Remember me" />\n  </CCol>\n  <CCol xs="auto">\n    <CButton type="submit">Submit</CButton>\n  </CCol>\n</CForm>',__scope:(h={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},h.DefaultLayout=r.a,h._frontmatter=b,h),mdxType:"Playground"},Object(a.b)(i.U,{className:"row gx-3 gy-2 align-items-center",mdxType:"CForm"},Object(a.b)(i.J,{sm:3,mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"specificSizeInputName",mdxType:"CFormLabel"},"Name"),Object(a.b)(i.Y,{id:"specificSizeInputName",placeholder:"Jane Doe",mdxType:"CFormInput"})),Object(a.b)(i.J,{sm:3,mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"specificSizeInputGroupUsername",mdxType:"CFormLabel"},"Username"),Object(a.b)(i.mb,{mdxType:"CInputGroup"},Object(a.b)(i.nb,{mdxType:"CInputGroupText"},"@"),Object(a.b)(i.Y,{id:"specificSizeInputGroupUsername",placeholder:"Username",mdxType:"CFormInput"}))),Object(a.b)(i.J,{sm:3,mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"specificSizeSelect",mdxType:"CFormLabel"},"Preference"),Object(a.b)(i.bb,{id:"specificSizeSelect",mdxType:"CFormSelect"},Object(a.b)("option",null,"Choose..."),Object(a.b)("option",{value:"1"},"One"),Object(a.b)("option",{value:"2"},"Two"),Object(a.b)("option",{value:"3"},"Three"))),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.V,{type:"checkbox",id:"autoSizingCheck2",label:"Remember me",mdxType:"CFormCheck"})),Object(a.b)(i.J,{xs:"auto",mdxType:"CCol"},Object(a.b)(i.n,{type:"submit",mdxType:"CButton"},"Submit")))),Object(a.b)("h2",{id:"inline-forms"},"Inline forms"),Object(a.b)("p",null,"Use the ",Object(a.b)("inlineCode",{parentName:"p"},'<CCol xs="auto">')," class to create horizontal layouts. By adding ",Object(a.b)("a",{parentName:"p",href:"https://coreui.io/docs/layout/gutters/"},"gutter modifier classes"),", we will have gutters in horizontal and vertical directions. The ",Object(a.b)("inlineCode",{parentName:"p"},".align-items-center")," aligns the form elements to the middle, making the ",Object(a.b)("inlineCode",{parentName:"p"},"<CFormCheck>")," align properly."),Object(a.b)(m.c,{__position:8,__code:'<CForm className="row row-cols-lg-auto g-3 align-items-center">\n  <CCol xs={12}>\n    <CFormLabel\n      className="visually-hidden"\n      htmlFor="inlineFormInputGroupUsername"\n    >\n      Username\n    </CFormLabel>\n    <CInputGroup>\n      <CInputGroupText>@</CInputGroupText>\n      <CFormInput id="inlineFormInputGroupUsername" placeholder="Username" />\n    </CInputGroup>\n  </CCol>\n  <CCol xs={12}>\n    <CFormLabel className="visually-hidden" htmlFor="inlineFormSelectPref">\n      Preference\n    </CFormLabel>\n    <CFormSelect id="inlineFormSelectPref">\n      <option>Choose...</option>\n      <option value="1">One</option>\n      <option value="2">Two</option>\n      <option value="3">Three</option>\n    </CFormSelect>\n  </CCol>\n  <CCol xs={12}>\n    <CFormCheck type="checkbox" id="inlineFormCheck" label="Remember me" />\n  </CCol>\n  <CCol xs={12}>\n    <CButton type="submit">Submit</CButton>\n  </CCol>\n</CForm>',__scope:(O={props:j,DefaultLayout:r.a,Playground:m.c,Props:m.d,CButton:i.n,CDropdown:i.M,CDropdownDivider:i.N,CDropdownHeader:i.O,CDropdownItem:i.P,CDropdownItemPlain:i.Q,CDropdownMenu:i.R,CDropdownToggle:i.S,CForm:i.U,CFormCheck:i.V,CFormInput:i.Y,CFormLabel:i.Z,CFormSelect:i.bb,CInputGroup:i.mb,CInputGroupText:i.nb,CCol:i.J,CRow:i.Ub},O.DefaultLayout=r.a,O._frontmatter=b,O),mdxType:"Playground"},Object(a.b)(i.U,{className:"row row-cols-lg-auto g-3 align-items-center",mdxType:"CForm"},Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"inlineFormInputGroupUsername",mdxType:"CFormLabel"},"Username"),Object(a.b)(i.mb,{mdxType:"CInputGroup"},Object(a.b)(i.nb,{mdxType:"CInputGroupText"},"@"),Object(a.b)(i.Y,{id:"inlineFormInputGroupUsername",placeholder:"Username",mdxType:"CFormInput"}))),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.Z,{className:"visually-hidden",htmlFor:"inlineFormSelectPref",mdxType:"CFormLabel"},"Preference"),Object(a.b)(i.bb,{id:"inlineFormSelectPref",mdxType:"CFormSelect"},Object(a.b)("option",null,"Choose..."),Object(a.b)("option",{value:"1"},"One"),Object(a.b)("option",{value:"2"},"Two"),Object(a.b)("option",{value:"3"},"Three"))),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.V,{type:"checkbox",id:"inlineFormCheck",label:"Remember me",mdxType:"CFormCheck"})),Object(a.b)(i.J,{xs:12,mdxType:"CCol"},Object(a.b)(i.n,{type:"submit",mdxType:"CButton"},"Submit")))))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/4.0/forms/Layout.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-4-0-forms-layout-mdx-5fa7047f15e4089a10a6.js.map