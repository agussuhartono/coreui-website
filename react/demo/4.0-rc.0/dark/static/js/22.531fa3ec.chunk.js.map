{"version":3,"sources":["views/components/base/accordion/Accordion.js"],"names":["Accordion","activeKey","setActiveKey","useState","activeKey2","setActiveKey2","xs","name","href","className","collapsed","onClick","visible","flush"],"mappings":"2KAAA,4CA2LeA,UA3KG,KAChB,MAAOC,EAAWC,GAAgBC,mBAAS,IACpCC,EAAYC,GAAiBF,mBAAS,GAE7C,OACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAMG,GAAI,GAAV,SACE,cAAC,IAAD,CAAaC,KAAK,YAAYC,KAAK,2BAErC,eAAC,IAAD,CAAMF,GAAI,GAAV,UACE,eAAC,IAAD,CAAOG,UAAU,OAAjB,UACE,cAAC,IAAD,UACE,uDAEF,eAAC,IAAD,WACE,mBAAGA,UAAU,6BAAb,kFAGA,cAAC,IAAD,CAAaD,KAAK,uBAAlB,SACE,eAAC,IAAD,WACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEE,UAAyB,IAAdT,EACXU,QAAS,IAAyBT,EAAJ,IAAdD,EAA+B,EAAkB,GAFnE,iCAOF,cAAC,IAAD,CAAoBW,QAAuB,IAAdX,EAA7B,SACE,eAAC,IAAD,WACE,8EADF,8WAM6C,mDAN7C,uDAWJ,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACES,UAAyB,IAAdT,EACXU,QAAS,IAAyBT,EAAJ,IAAdD,EAA+B,EAAkB,GAFnE,iCAOF,cAAC,IAAD,CAAoBW,QAAuB,IAAdX,EAA7B,SACE,eAAC,IAAD,WACE,+EADF,8WAM6C,mDAN7C,uDAWJ,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACES,UAAyB,IAAdT,EACXU,QAAS,IAAyBT,EAAJ,IAAdD,EAA+B,EAAkB,GAFnE,iCAOF,cAAC,IAAD,CAAoBW,QAAuB,IAAdX,EAA7B,SACE,eAAC,IAAD,WACE,8EADF,8WAM6C,mDAN7C,kEAeZ,eAAC,IAAD,CAAOQ,UAAU,OAAjB,UACE,eAAC,IAAD,WACE,qDADF,IACmC,6CAEnC,eAAC,IAAD,WACE,oBAAGA,UAAU,6BAAb,iBACM,yCADN,0BAC+C,oDAD/C,6GAKA,cAAC,IAAD,CAAaD,KAAK,6BAAlB,SACE,eAAC,IAAD,CAAYK,OAAK,EAAjB,UACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEH,UAA0B,IAAfN,EACXO,QAAS,IAA0BN,EAAJ,IAAfD,EAAiC,EAAmB,GAFtE,iCAOF,cAAC,IAAD,CAAoBQ,QAAwB,IAAfR,EAA7B,SACE,eAAC,IAAD,WACE,8EADF,8WAM6C,mDAN7C,uDAWJ,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEM,UAA0B,IAAfN,EACXO,QAAS,IAA0BN,EAAJ,IAAfD,EAAiC,EAAmB,GAFtE,iCAOF,cAAC,IAAD,CAAoBQ,QAAwB,IAAfR,EAA7B,SACE,eAAC,IAAD,WACE,+EADF,8WAM6C,mDAN7C,uDAWJ,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEM,UAA0B,IAAfN,EACXO,QAAS,IAA0BN,EAAJ,IAAfD,EAAiC,EAAmB,GAFtE,iCAOF,cAAC,IAAD,CAAoBQ,QAAwB,IAAfR,EAA7B,SACE,eAAC,IAAD,WACE,8EADF,8WAM6C,mDAN7C","file":"static/js/22.531fa3ec.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CAccordion,\n  CAccordionBody,\n  CAccordionButton,\n  CAccordionCollapse,\n  CAccordionHeader,\n  CAccordionItem,\n} from '@coreui/react-pro'\nimport { DocsCallout, DocsExample } from 'src/components'\n\nconst Accordion = () => {\n  const [activeKey, setActiveKey] = useState(0)\n  const [activeKey2, setActiveKey2] = useState(0)\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <DocsCallout name=\"Accordion\" href=\"components/accordion\" />\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Click the accordions below to expand/collapse the accordion content.\n            </p>\n            <DocsExample href=\"components/accordion\">\n              <CAccordion>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 1}\n                      onClick={() => (activeKey === 1 ? setActiveKey(0) : setActiveKey(1))}\n                    >\n                      Accordion Item #1\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 1}>\n                    <CAccordionBody>\n                      <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 2}\n                      onClick={() => (activeKey === 2 ? setActiveKey(0) : setActiveKey(2))}\n                    >\n                      Accordion Item #2\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 2}>\n                    <CAccordionBody>\n                      <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 3}\n                      onClick={() => (activeKey === 3 ? setActiveKey(0) : setActiveKey(3))}\n                    >\n                      Accordion Item #3\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 3}>\n                    <CAccordionBody>\n                      <strong>This is the third item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n              </CAccordion>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong> <small>Flush</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add <code>flush</code> to remove the default <code>background-color</code>, some\n              borders, and some rounded corners to render accordions edge-to-edge with their parent\n              container.\n            </p>\n            <DocsExample href=\"components/accordion#flush\">\n              <CAccordion flush>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 1}\n                      onClick={() => (activeKey2 === 1 ? setActiveKey2(0) : setActiveKey2(1))}\n                    >\n                      Accordion Item #1\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 1}>\n                    <CAccordionBody>\n                      <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 2}\n                      onClick={() => (activeKey2 === 2 ? setActiveKey2(0) : setActiveKey2(2))}\n                    >\n                      Accordion Item #2\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 2}>\n                    <CAccordionBody>\n                      <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 3}\n                      onClick={() => (activeKey2 === 3 ? setActiveKey2(0) : setActiveKey2(3))}\n                    >\n                      Accordion Item #3\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 3}>\n                    <CAccordionBody>\n                      <strong>This is the third item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n              </CAccordion>\n            </DocsExample>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Accordion\n"],"sourceRoot":""}