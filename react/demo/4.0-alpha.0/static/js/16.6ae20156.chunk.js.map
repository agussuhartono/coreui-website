{"version":3,"sources":["reusable/DocsCallout.js","reusable/DocsLink.js","reusable/Example.js","reusable/ProBadge.js","views/components/base/accordion/Accordion.js"],"names":["DocsCallout","props","href","name","plural","slice","_href","packageJson","config","coreui_library_short_version","color","className","target","React","memo","DocsLink","text","rest","rel","Example","children","variant","active","visible","ProBadge","attributes","Accordion","activeKey","setActiveKey","useState","activeKey2","setActiveKey2","xs","collapsed","onClick","flush"],"mappings":"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","file":"static/js/16.6ae20156.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CCallout, CLink } from '@coreui/react-pro'\n\nimport packageJson from '../../package.json'\n\nconst DocsCallout = (props) => {\n  const { href, name } = props\n\n  const plural = name.slice(-1) === 's' ? true : false\n\n  const _href = `https://coreui.io/react/docs/${packageJson.config.coreui_library_short_version}/${href}`\n\n  return (\n    <CCallout color=\"info\" className=\"bg-white\">\n      A React {name} component {plural ? 'have' : 'has'} been created as a native React.js version\n      of Bootstrap {name}. {name} {plural ? 'are' : 'is'} delivered with some new features,\n      variants, and unique design that matches CoreUI Design System requirements.\n      <br />\n      <br />\n      For more information please visit our official{' '}\n      <CLink href={_href} target=\"_blank\">\n        documentation of CoreUI Components Library for React.js\n      </CLink>\n      .\n    </CCallout>\n  )\n}\n\nDocsCallout.propTypes = {\n  href: PropTypes.string,\n  name: PropTypes.string,\n}\n\nexport default React.memo(DocsCallout)\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CLink } from '@coreui/react-pro'\n\nconst DocsLink = (props) => {\n  const { href, name, text, ...rest } = props\n\n  const _href = name ? `https://coreui.io/react/docs/components/${name}` : href\n\n  return (\n    <div className=\"float-end\">\n      <CLink\n        {...rest}\n        href={_href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n        className=\"card-header-action\"\n      >\n        <small className=\"text-medium-emphasis\">{text || 'docs'}</small>\n      </CLink>\n    </div>\n  )\n}\n\nDocsLink.propTypes = {\n  href: PropTypes.string,\n  name: PropTypes.string,\n  text: PropTypes.string,\n}\n\nexport default React.memo(DocsLink)\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CNav, CNavItem, CNavLink, CTabContent, CTabPane } from '@coreui/react-pro'\nimport CIcon from '@coreui/icons-react'\n\nimport packageJson from '../../package.json'\n\nconst Example = (props) => {\n  const { children, href } = props\n\n  const _href = `https://coreui.io/react/docs/${packageJson.config.coreui_library_short_version}/${href}`\n\n  return (\n    <div className=\"example\">\n      <CNav variant=\"underline\">\n        <CNavItem>\n          <CNavLink href=\"#\" active>\n            <CIcon name=\"cil-media-play\" className=\"me-2\" />\n            Preview\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink href={_href} target=\"_blank\">\n            <CIcon name=\"cil-code\" className=\"me-2\" />\n            Code\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      <CTabContent className=\"rounded-bottom\">\n        <CTabPane className=\"p-3 preview\" visible>\n          {children}\n        </CTabPane>\n      </CTabContent>\n    </div>\n  )\n}\n\nExample.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string,\n}\n\nexport default React.memo(Example)\n","import React from 'react'\nimport { CBadge } from '@coreui/react-pro'\nimport PropTypes from 'prop-types'\n\nconst ProBadge = (props) => {\n  let { children, ...attributes } = { ...props }\n  return (\n    <CBadge\n      href=\"https://coreui.io/pro/react/\"\n      color=\"danger\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      {...attributes}\n    >\n      {children ? children : 'CoreUI Pro Component'}\n    </CBadge>\n  )\n}\n\nProBadge.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default React.memo(ProBadge)\n","import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CAccordion,\n  CAccordionBody,\n  CAccordionButton,\n  CAccordionCollapse,\n  CAccordionHeader,\n  CAccordionItem,\n} from '@coreui/react-pro'\nimport { DocsCallout, Example } from 'src/reusable'\n\nconst Accordion = () => {\n  const [activeKey, setActiveKey] = useState(0)\n  const [activeKey2, setActiveKey2] = useState(0)\n\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <DocsCallout name=\"Accordion\" href=\"components/accordion\" />\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Click the accordions below to expand/collapse the accordion content.\n            </p>\n            <Example href=\"components/accordion\">\n              <CAccordion>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 1}\n                      onClick={() => (activeKey === 1 ? setActiveKey(0) : setActiveKey(1))}\n                    >\n                      Accordion Item #1\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 1}>\n                    <CAccordionBody>\n                      <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 2}\n                      onClick={() => (activeKey === 2 ? setActiveKey(0) : setActiveKey(2))}\n                    >\n                      Accordion Item #2\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 2}>\n                    <CAccordionBody>\n                      <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey !== 3}\n                      onClick={() => (activeKey === 3 ? setActiveKey(0) : setActiveKey(3))}\n                    >\n                      Accordion Item #3\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey === 3}>\n                    <CAccordionBody>\n                      <strong>This is the third item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n              </CAccordion>\n            </Example>\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Accordion</strong> <small>Flush</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Add <code>flush</code> to remove the default <code>background-color</code>, some\n              borders, and some rounded corners to render accordions edge-to-edge with their parent\n              container.\n            </p>\n            <Example href=\"components/accordion#flush\">\n              <CAccordion flush>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 1}\n                      onClick={() => (activeKey2 === 1 ? setActiveKey2(0) : setActiveKey2(1))}\n                    >\n                      Accordion Item #1\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 1}>\n                    <CAccordionBody>\n                      <strong>This is the first item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 2}\n                      onClick={() => (activeKey2 === 2 ? setActiveKey2(0) : setActiveKey2(2))}\n                    >\n                      Accordion Item #2\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 2}>\n                    <CAccordionBody>\n                      <strong>This is the second item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n                <CAccordionItem>\n                  <CAccordionHeader>\n                    <CAccordionButton\n                      collapsed={activeKey2 !== 3}\n                      onClick={() => (activeKey2 === 3 ? setActiveKey2(0) : setActiveKey2(3))}\n                    >\n                      Accordion Item #3\n                    </CAccordionButton>\n                  </CAccordionHeader>\n                  <CAccordionCollapse visible={activeKey2 === 3}>\n                    <CAccordionBody>\n                      <strong>This is the third item&#39;s accordion body.</strong> It is hidden by\n                      default, until the collapse plugin adds the appropriate classes that we use to\n                      style each element. These classes control the overall appearance, as well as\n                      the showing and hiding via CSS transitions. You can modify any of this with\n                      custom CSS or overriding our default variables. It&#39;s also worth noting\n                      that just about any HTML can go within the <code>.accordion-body</code>,\n                      though the transition does limit overflow.\n                    </CAccordionBody>\n                  </CAccordionCollapse>\n                </CAccordionItem>\n              </CAccordion>\n            </Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Accordion\n"],"sourceRoot":""}