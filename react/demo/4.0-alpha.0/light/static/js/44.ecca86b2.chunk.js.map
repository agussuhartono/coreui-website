{"version":3,"sources":["reusable/DocsCallout.js","reusable/DocsLink.js","reusable/Example.js","reusable/ProBadge.js","views/components/notifications/toasts/Toasts.js"],"names":["DocsCallout","props","href","name","plural","slice","_href","packageJson","config","coreui_library_short_version","color","className","target","React","memo","DocsLink","text","rest","rel","Example","children","variant","active","visible","ProBadge","attributes","ExampleToast","toast","addToast","useState","toaster","useRef","exampleToast","title","close","width","height","xmlns","preserveAspectRatio","focusable","role","fill","onClick","ref","push","placement","Toasts","xs","autohide","type","size","component","CButton","white"],"mappings":"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","file":"static/js/44.ecca86b2.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CCallout, CLink } from '@coreui/react-pro'\n\nimport packageJson from '../../package.json'\n\nconst DocsCallout = (props) => {\n  const { href, name } = props\n\n  const plural = name.slice(-1) === 's' ? true : false\n\n  const _href = `https://coreui.io/react/docs/${packageJson.config.coreui_library_short_version}/${href}`\n\n  return (\n    <CCallout color=\"info\" className=\"bg-white\">\n      A React {name} component {plural ? 'have' : 'has'} been created as a native React.js version\n      of Bootstrap {name}. {name} {plural ? 'are' : 'is'} delivered with some new features,\n      variants, and unique design that matches CoreUI Design System requirements.\n      <br />\n      <br />\n      For more information please visit our official{' '}\n      <CLink href={_href} target=\"_blank\">\n        documentation of CoreUI Components Library for React.js\n      </CLink>\n      .\n    </CCallout>\n  )\n}\n\nDocsCallout.propTypes = {\n  href: PropTypes.string,\n  name: PropTypes.string,\n}\n\nexport default React.memo(DocsCallout)\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CLink } from '@coreui/react-pro'\n\nconst DocsLink = (props) => {\n  const { href, name, text, ...rest } = props\n\n  const _href = name ? `https://coreui.io/react/docs/components/${name}` : href\n\n  return (\n    <div className=\"float-end\">\n      <CLink\n        {...rest}\n        href={_href}\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n        className=\"card-header-action\"\n      >\n        <small className=\"text-medium-emphasis\">{text || 'docs'}</small>\n      </CLink>\n    </div>\n  )\n}\n\nDocsLink.propTypes = {\n  href: PropTypes.string,\n  name: PropTypes.string,\n  text: PropTypes.string,\n}\n\nexport default React.memo(DocsLink)\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CNav, CNavItem, CNavLink, CTabContent, CTabPane } from '@coreui/react-pro'\nimport CIcon from '@coreui/icons-react'\n\nimport packageJson from '../../package.json'\n\nconst Example = (props) => {\n  const { children, href } = props\n\n  const _href = `https://coreui.io/react/docs/${packageJson.config.coreui_library_short_version}/${href}`\n\n  return (\n    <div className=\"example\">\n      <CNav variant=\"underline\">\n        <CNavItem>\n          <CNavLink href=\"#\" active>\n            <CIcon name=\"cil-media-play\" className=\"me-2\" />\n            Preview\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink href={_href} target=\"_blank\">\n            <CIcon name=\"cil-code\" className=\"me-2\" />\n            Code\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      <CTabContent className=\"rounded-bottom\">\n        <CTabPane className=\"p-3 preview\" visible>\n          {children}\n        </CTabPane>\n      </CTabContent>\n    </div>\n  )\n}\n\nExample.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string,\n}\n\nexport default React.memo(Example)\n","import React from 'react'\nimport { CBadge } from '@coreui/react-pro'\nimport PropTypes from 'prop-types'\n\nconst ProBadge = (props) => {\n  let { children, ...attributes } = { ...props }\n  return (\n    <CBadge\n      href=\"https://coreui.io/pro/react/\"\n      color=\"danger\"\n      target=\"_blank\"\n      rel=\"noreferrer noopener\"\n      {...attributes}\n    >\n      {children ? children : 'CoreUI Pro Component'}\n    </CBadge>\n  )\n}\n\nProBadge.propTypes = {\n  children: PropTypes.node,\n}\n\nexport default React.memo(ProBadge)\n","import React, { useRef, useState } from 'react'\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CButton,\n  CRow,\n  CCol,\n  CToast,\n  CToastBody,\n  CToastClose,\n  CToastHeader,\n  CToaster,\n} from '@coreui/react-pro'\nimport { DocsCallout, Example } from 'src/reusable'\n\nconst ExampleToast = () => {\n  const [toast, addToast] = useState(0)\n  const toaster = useRef()\n  const exampleToast = (\n    <CToast title=\"CoreUI for React.js\">\n      <CToastHeader close>\n        <svg\n          className=\"rounded me-2\"\n          width=\"20\"\n          height=\"20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          preserveAspectRatio=\"xMidYMid slice\"\n          focusable=\"false\"\n          role=\"img\"\n        >\n          <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n        </svg>\n        <strong className=\"me-auto\">CoreUI for React.js</strong>\n        <small>7 min ago</small>\n      </CToastHeader>\n      <CToastBody>Hello, world! This is a toast message.</CToastBody>\n    </CToast>\n  )\n  return (\n    <>\n      <CButton onClick={() => addToast(exampleToast)}>Send a toast</CButton>\n      <CToaster ref={toaster} push={toast} placement=\"top-end\" />\n    </>\n  )\n}\n\nconst Toasts = () => {\n  return (\n    <CRow>\n      <CCol xs={12}>\n        <DocsCallout name=\"Toast\" href=\"components/toast\" />\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Basic</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Toasts are as flexible as you need and have very little required markup. At a minimum,\n              we require a single element to contain your “toasted” content and strongly encourage a\n              dismiss button.\n            </p>\n            <Example href=\"components/toast\">\n              <CToast title=\"CoreUI for React.js\" autohide={false}>\n                <CToastHeader close>\n                  <svg\n                    className=\"rounded me-2\"\n                    width=\"20\"\n                    height=\"20\"\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    preserveAspectRatio=\"xMidYMid slice\"\n                    focusable=\"false\"\n                    role=\"img\"\n                  >\n                    <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                  </svg>\n                  <strong className=\"me-auto\">CoreUI for React.js</strong>\n                  <small>7 min ago</small>\n                </CToastHeader>\n                <CToastBody>Hello, world! This is a toast message.</CToastBody>\n              </CToast>\n            </Example>\n            <Example href=\"components/toast\">{ExampleToast()}</Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Translucent</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Toasts are slightly translucent to blend in with what&#39;s below them.\n            </p>\n            <Example href=\"components/toast#translucent\">\n              <div className=\"bg-dark p-3\">\n                <CToast title=\"CoreUI for React.js\" autohide={false}>\n                  <CToastHeader close>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n              </div>\n            </Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Stacking</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              You can stack toasts by wrapping them in a toast container, which will vertically add\n              some spacing.\n            </p>\n            <Example href=\"components/toast#stacking\">\n              <CToaster>\n                <CToast title=\"CoreUI for React.js\" autohide={false}>\n                  <CToastHeader close>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n                <CToast title=\"CoreUI for React.js\" autohide={false}>\n                  <CToastHeader close>\n                    <svg\n                      className=\"rounded me-2\"\n                      width=\"20\"\n                      height=\"20\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      preserveAspectRatio=\"xMidYMid slice\"\n                      focusable=\"false\"\n                      role=\"img\"\n                    >\n                      <rect width=\"100%\" height=\"100%\" fill=\"#007aff\"></rect>\n                    </svg>\n                    <strong className=\"me-auto\">CoreUI for React.js</strong>\n                    <small>7 min ago</small>\n                  </CToastHeader>\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                </CToast>\n              </CToaster>\n            </Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Custom content</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Customize your toasts by removing sub-components, tweaking them with{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/api\">utilities</a>, or by adding your\n              own markup. Here we&#39;ve created a simpler toast by removing the default{' '}\n              <code>&lt;CToastHeader&gt;</code>, adding a custom hide icon from{' '}\n              <a href=\"https://icons.coreui.io\">CoreUI Icons</a>, and using some{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/flex\">flexbox utilities</a> to adjust\n              the layout.\n            </p>\n            <Example href=\"components/toast#custom-content\">\n              <CToast autohide={false} className=\"align-items-center\">\n                <div className=\"d-flex\">\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                  <CToastClose className=\"me-2 m-auto\" />\n                </div>\n              </CToast>\n            </Example>\n            <p className=\"text-medium-emphasis small\">\n              Alternatively, you can also add additional controls and components to toasts.\n            </p>\n            <Example href=\"components/toast#custom-content\">\n              <CToast autohide={false}>\n                <CToastBody>\n                  Hello, world! This is a toast message.\n                  <div className=\"mt-2 pt-2 border-top\">\n                    <CButton type=\"button\" color=\"primary\" size=\"sm\">\n                      Take action\n                    </CButton>\n                    <CToastClose component={CButton} color=\"secondary\" size=\"sm\" className=\"ms-1\">\n                      Close\n                    </CToastClose>\n                  </div>\n                </CToastBody>\n              </CToast>\n            </Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n      <CCol xs={12}>\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <strong>React Toast</strong> <small>Custom content</small>\n          </CCardHeader>\n          <CCardBody>\n            <p className=\"text-medium-emphasis small\">\n              Building on the above example, you can create different toast color schemes with our{' '}\n              <a href=\"https://coreui.io/docs/4.0/utilities/colors\">color</a> and{' '}\n              <a href=\"https://coreui.io/docs/4.0//utilities/background\">background</a> utilities.\n              Here we&#39;ve set <code>color=&#34;primary&#34;</code> and added{' '}\n              <code>.text-white</code> class to the <code>&lt;Ctoast&gt;</code>, and then set{' '}\n              <code>white</code> property to our close button. For a crisp edge, we remove the\n              default border with <code>.border-0</code>.\n            </p>\n            <Example href=\"components/toast#color-schemes\">\n              <CToast autohide={false} color=\"primary\" className=\"text-white align-items-center\">\n                <div className=\"d-flex\">\n                  <CToastBody>Hello, world! This is a toast message.</CToastBody>\n                  <CToastClose className=\"me-2 m-auto\" white />\n                </div>\n              </CToast>\n            </Example>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Toasts\n"],"sourceRoot":""}