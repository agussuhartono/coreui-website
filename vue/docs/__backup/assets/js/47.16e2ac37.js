(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{727:function(e,t,n){"use strict";n.r(t);var o=n(0),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("Api",{attrs:{props:[["type","'input'","String","Type of the input. Not applicable to CFormTextarea component."],["plaintext","false","Boolean","Sets element to plaintext. If set it will trigger also readonly property functionality."],["readonly","false","Boolean","Sets readonly attribute."],["lazy","400","Boolean/Number","slot_lazy"]],events:[["update:value","event object","Emitted depending on lazy propery."],["input","event object","Emitted on every input event."],["change","event object","Emitted on every change event."]]},scopedSlots:e._u([{key:"slot_lazy",fn:function(){return[e._v("\n    Determines when value is synchronized with parent component.\n    "),n("li",[e._v("False - only on input change event.")]),e._v(" "),n("li",[e._v("True - on every keypress (might be performance hit in some situations).")]),e._v(" "),n("li",[e._v("Number - after number of miliseconds, when user stop typing.")]),e._v("\n    Despite this prop setting you can still use input and change events independently.\n  ")]},proxy:!0}])})}),[],!1,null,null,null);t.default=i.exports}}]);