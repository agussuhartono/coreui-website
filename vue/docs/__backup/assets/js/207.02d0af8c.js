(window.webpackJsonp=window.webpackJsonp||[]).push([[207],{2417:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"toast"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toast"}},[t._v("#")]),t._v(" Toast")]),t._v(" "),e("h2",{attrs:{id:"usage"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),e("CodeExample",{attrs:{filename:"toast/Toast"}}),t._v(" "),e("h2",{attrs:{id:"features"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[t._v("#")]),t._v(" Features")]),t._v(" "),e("ul",[e("li",[t._v("Chose from 8 fixed CToaster component positions or display toasts staticly,")]),t._v(" "),e("li",[t._v("Optionally hide toasts automatically after specified time, which resets on toast hover.")])]),t._v(" "),e("h2",{attrs:{id:"shared-props"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#shared-props"}},[t._v("#")]),t._v(" shared props")]),t._v(" "),e("p",[t._v("These props are shared by both components. Once defined in CToaster, they are inherited by CToast children components. This allows to avoid redundant prop definition in CToast components. Props defined in CToast have precedens over CToaster props.\n"),e("ApiExecutor",{attrs:{filename:"ToasterShared"}})],1),t._v(" "),e("h2",{attrs:{id:"ctoaster-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ctoaster-api"}},[t._v("#")]),t._v(" CToaster API")]),t._v(" "),e("ApiExecutor",{attrs:{filename:"Toaster"}}),t._v(" "),e("h2",{attrs:{id:"ctoast-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ctoast-api"}},[t._v("#")]),t._v(" CToast API")]),t._v(" "),e("ApiExecutor",{attrs:{filename:"Toast"}})],1)}),[],!1,null,null,null);a.default=r.exports}}]);