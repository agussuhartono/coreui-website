(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{753:function(e,n,t){"use strict";t.r(n);var o=t(0),s=Object(o.a)({},(function(){var e=this,n=e.$createElement;return(e._self._c||n)("Api",{attrs:{props:[["name","undefined","String","Sets text of the dropdown label."],["route","undefined","String","Base route of items wrapped by component. Route is needed to determine sidebar behavior on route change. Route must have at least one character when passed."],["icon","undefined","String/Object","slot_icon"],["fontIcon","undefined","String","slot_fontIcon"],["show","undefined","Boolean","Sets the state of the dropdown. Add .sync modifier to track dropdown state."],["items","undefined","Array","slot_items"]],slots:[["default","elements defined in 'items' prop","Content of the dropdown. Rendered inside 'ul' tag."]],events:[["item-clicked","event","emitted when one of the items is clicked."],["update:show","true/false","emitted when dropdown is toggled."]]},scopedSlots:e._u([{key:"slot_icon",fn:function(){return[e._v("\n    Use if you want to add icon as CIcon component. Available options:\n    - string - if you need to pass only CIcon 'name' prop,\n    - object - if you want to pass more of CIcon props/ attributes\n  ")]},proxy:!0},{key:"slot_fontIcon",fn:function(){return[e._v("\n    Use if you want to add css font icon. Value of prop are css classes of the icon.\n  ")]},proxy:!0},{key:"slot_items",fn:function(){return[e._v("\n    Prop can be used instead of default slot. \n    Each element of the array represents one CSidebarNavItem component - \n    element is object where every key are representing props.\n  ")]},proxy:!0}])})}),[],!1,null,null,null);n.default=s.exports}}]);