(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{680:function(e,n,t){"use strict";t.r(n);var o={data:function(){return{code:":options=\"[\n  'Option1', \n  { value: 'Option2', label: 'Custom label'}, \n  { value:'Option3', label: 'Other custom label', props: { desription: 'description text' }}\n]\""}}},i=t(0),a=Object(i.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Api",{attrs:{props:[["options","undefined","Array(required)","slot_options"],["checked","undefined","String","slot_checked"],["name","undefined","String","Sets name attribute of CInputRadio components. If not passed, it would be generated automatically."],["custom","false","Boolean","Enables custom styling of CInputRadio components."],["inline","false","Boolean","Enables inline styling of CInputRadio components."]],events:[["update:checked","(value, event object)","Emitted on change. Set .sync modifier on checked prop to receive changes automatically."]]},scopedSlots:e._u([{key:"slot_options",fn:function(){return[e._v("\n    Array where each item represens CInputRadio component.\n\n    Item might be specified in two ways:"),t("br"),e._v(" "),t("ul",[t("li",[e._v("\n    String: both value and label of input will be equal to string."),t("br")]),e._v(" "),t("li",[e._v("\n    Object: item is object with following keys available as column configuration:\n    "),t("ul",[t("li",[e._v("value (required) (String) - input value.")]),e._v(" "),t("li",[e._v("label (required) (String) - input label.")]),e._v(" "),t("li",[e._v("props (Object) - additional props which will be passed to CInputRadio instance")])])])]),e._v(" "),t("CodeBlock",{attrs:{code:e.code,language:"js"}})]},proxy:!0},{key:"slot_checked",fn:function(){return[e._v("\n    Prop which indicates state of the element. \n    Radio input is checked when its value is equal to this prop.\n    Set .sync modifier to receive state changes.\n  ")]},proxy:!0}])})}),[],!1,null,null,null);n.default=a.exports}}]);