"use strict";(self.webpackChunk_coreui_vue_pro=self.webpackChunk_coreui_vue_pro||[]).push([[7830],{4061:(t,e,d)=>{d.r(e),d.d(e,{data:()=>r});const r={key:"v-0758a6a2",path:"/api/form/CFormCheck.api.html",title:"",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"CFormCheck",slug:"cformcheck",children:[]}],filePathRelative:"api/form/CFormCheck.api.md",git:{updatedTime:1630266473e3,contributors:[{name:"Łukasz Holeczek",email:"lukasz@holeczek.pl",commits:3}]}}},3241:(t,e,d)=>{d.r(e),d.d(e,{default:()=>o});const r=(0,d(6252).uE)('<h3 id="cformcheck" tabindex="-1">CFormCheck <a class="anchor-link" href="#cformcheck" aria-hidden="true">#</a></h3><h4 id="props" tabindex="-1">Props <a class="anchor-link" href="#props" aria-hidden="true">#</a></h4><table class="table table-striped"><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td><code>button</code></td><td>Create button-like checkboxes and radio buttons.</td><td>shape({<br> /<strong><br> _ Sets the color context of the component to one of CoreUI’s themed colors.<br> _<br> _ @values &#39;primary&#39; | &#39;secondary&#39; | &#39;success&#39; | &#39;danger&#39; | &#39;warning&#39; | &#39;info&#39; | &#39;dark&#39; | &#39;light&#39; | string<br> _/<br> color: Color,<br> /</strong><br> _ Select the shape of the component.<br> _<br> _ @values &#39;rounded&#39; | &#39;rounded-top&#39; | &#39;rounded-end&#39; | &#39;rounded-bottom&#39; | &#39;rounded-start&#39; | &#39;rounded-circle&#39; | &#39;rounded-pill&#39; | &#39;rounded-0&#39; | &#39;rounded-1&#39; | &#39;rounded-2&#39; | &#39;rounded-3&#39; | string<br> _/<br> shape: Shape,<br> /<strong><br> _ Size the component small or large.<br> _<br> _ @values &#39;sm&#39; | &#39;lg&#39;<br> _/<br> size: {<br> type: String,<br> default: undefined,<br> required: false,<br> validator: (value: string) =&gt; {<br> return [&#39;sm&#39;, &#39;lg&#39;].includes(value)<br> },<br> },<br> /</strong><br> _ Set the button variant to an outlined button or a ghost button.<br> _/<br> variant: {<br> type: String,<br> default: undefined,<br> required: false,<br> validator: (value: string) =&gt; {<br> return [&#39;outline&#39;, &#39;ghost&#39;].includes(value)<br> },<br> },<br>})</td><td>-</td><td></td></tr><tr><td><code>id</code></td><td>The id global attribute defines an identifier (ID) that must be unique in the whole document.</td><td>string</td><td>-</td><td>undefined</td></tr><tr><td><code>inline</code></td><td>Group checkboxes or radios on the same horizontal row by adding.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><code>invalid</code></td><td>Set component validation state to invalid.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><code>label</code></td><td>The element represents a caption for a component.</td><td>string</td><td>-</td><td>undefined</td></tr><tr><td><code>type</code></td><td>Specifies the type of component.<br><code>@default</code> &#39;checkbox&#39;</td><td>string</td><td><code>&#39;checkbox&#39;</code>, <code>&#39;radio&#39;</code></td><td>&#39;checkbox&#39;</td></tr><tr><td><code>valid</code></td><td>Set component validation state to valid.</td><td>boolean</td><td>-</td><td></td></tr></tbody></table><hr>',4),o={render:function(t,e){return r}}}}]);