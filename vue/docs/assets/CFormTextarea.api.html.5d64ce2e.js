import{_ as t,e as d}from"./app.401dbaff.js";const e={},a=d(`<h3 id="cformtextarea" tabindex="-1">CFormTextarea <a class="anchor-link" href="#cformtextarea" aria-hidden="true">#</a></h3><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CFormTextarea <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coreui/vue&#39;</span>
<span class="token comment">// or</span>
<span class="token keyword">import</span> CFormTextarea <span class="token keyword">from</span> <span class="token string">&#39;@coreui/vue/src/components/form/CFormTextarea&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="props" tabindex="-1">Props <a class="anchor-link" href="#props" aria-hidden="true">#</a></h4><table class="table table-striped table-api"><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td><strong>disabled</strong></td><td>Toggle the disabled state for the component.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>feedback</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Provide valuable, actionable feedback.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>feedback-invalid</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Provide valuable, actionable feedback.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>feedback-valid</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Provide valuable, actionable invalid feedback when using standard HTML form validation which applied two CSS pseudo-classes, <code>:invalid</code> and <code>:valid</code>.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>floating-label</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Provide valuable, actionable valid feedback when using standard HTML form validation which applied two CSS pseudo-classes, <code>:invalid</code> and <code>:valid</code>.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>id</strong></td><td>The id global attribute defines an identifier (ID) that must be unique in the whole document.</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>invalid</strong></td><td>Set component validation state to invalid.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>label</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Add a caption for a component.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>model-value</strong></td><td>The default name for a value passed using v-model.</td><td>string</td><td>-</td><td>-</td></tr><tr><td><strong>plain-text</strong></td><td>Render the component styled as plain text. Removes the default form field styling and preserve the correct margin and padding. Recommend to use only along side <code>readonly</code>.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>readonly</strong></td><td>Toggle the readonly state for the component.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>text</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Add helper text to the component.false</td><td>string</td><td>-</td><td></td></tr><tr><td><strong>tooltip-feedback</strong> <br><div class="badge bg-primary">4.3.0+</div></td><td>Display validation feedback in a styled tooltip.false</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>valid</strong></td><td>Set component validation state to valid.</td><td>boolean</td><td>-</td><td></td></tr></tbody></table><h4 id="events" tabindex="-1">Events <a class="anchor-link" href="#events" aria-hidden="true">#</a></h4><table class="table table-striped table-api"><thead><tr><th>Event name</th><th>Description</th><th>Properties</th></tr></thead><tbody><tr><td><strong>change</strong></td><td>Event occurs when the element loses focus, after the content has been changed.</td><td></td></tr><tr><td><strong>input</strong></td><td>Event occurs immediately after the value of a component has changed.</td><td></td></tr><tr><td><strong>update-model-value</strong></td><td>Emit the new value whenever there\u2019s an input or change event.</td><td></td></tr></tbody></table>`,6);function n(r,s){return a}var i=t(e,[["render",n],["__file","CFormTextarea.api.html.vue"]]);export{i as default};
