"use strict";(self.webpackChunk_coreui_vue_pro=self.webpackChunk_coreui_vue_pro||[]).push([[6699],{9634:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-fa1d6ed6",path:"/forms/range.html",title:"Vue Range Component",lang:"en-US",frontmatter:{title:"Vue Range Component",name:"Range",description:"Vue range component. Use our custom range inputs for consistent cross-browser styling and built-in customization."},excerpt:"",headers:[{level:2,title:"Overview",slug:"overview",children:[]},{level:2,title:"Disabled",slug:"disabled",children:[]},{level:2,title:"Min and max",slug:"min-and-max",children:[]},{level:2,title:"Steps",slug:"steps",children:[]},{level:2,title:"API",slug:"api",children:[{level:3,title:"CFormRange",slug:"cformrange",children:[]}]}],filePathRelative:"forms/range.md",git:{updatedTime:1630266473e3,contributors:[{name:"Łukasz Holeczek",email:"lukasz@holeczek.pl",commits:1}]}}},7914:(a,n,s)=>{s.r(n),s.d(n,{default:()=>f});var t=s(6252);const e=(0,t._)("h2",{id:"overview",tabindex:"-1"},[(0,t.Uk)("Overview "),(0,t._)("a",{class:"anchor-link",href:"#overview","aria-hidden":"true"},"#")],-1),o=(0,t._)("p",null,[(0,t.Uk)("Create custom "),(0,t._)("code",null,'<input type="range">'),(0,t.Uk)(" controls with "),(0,t._)("code",null,"<CFormRange>"),(0,t.Uk)('. The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only Edge Legacy and Firefox supports "filling" their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.')],-1),p={class:"docs-example border rounded-top p-4"},l=(0,t.Uk)("Example range"),u=(0,t.uE)('<div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormLabel</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Example range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CFormLabel</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormRange</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="disabled" tabindex="-1">Disabled <a class="anchor-link" href="#disabled" aria-hidden="true">#</a></h2><p>Add the <code>disabled</code> boolean attribute on an input to give it a grayed out appearance and remove pointer events.</p>',3),c={class:"docs-example border rounded-top p-4"},r=(0,t.Uk)("Disabled range"),i=(0,t.uE)('<div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormLabel</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>disabledRange<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Disabled range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CFormLabel</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormRange</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>disabledRange<span class="token punctuation">&quot;</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="min-and-max" tabindex="-1">Min and max <a class="anchor-link" href="#min-and-max" aria-hidden="true">#</a></h2><p>Range inputs have implicit values for <code>min</code> and <code>max</code>—<code>0</code> and <code>100</code>, respectively. You may specify new values for those using the <code>min</code> and <code>max</code> attributes.</p>',3),d={class:"docs-example border rounded-top p-4"},m=(0,t.Uk)("Example range"),k=(0,t.uE)('<div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormLabel</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Example range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CFormLabel</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormRange</span> <span class="token attr-name">:min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="steps" tabindex="-1">Steps <a class="anchor-link" href="#steps" aria-hidden="true">#</a></h2><p>By default, range inputs &quot;snap&quot; to integer values. To change this, you can specify a <code>step</code> value. In the example below, we double the number of steps by using <code>:step=&quot;0.5&quot;</code>.</p>',3),g={class:"docs-example border rounded-top p-4"},b=(0,t.Uk)("Example range"),h=(0,t.uE)('<div class="language-vue ext-vue line-numbers-mode"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormLabel</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Example range<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CFormLabel</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CFormRange</span> <span class="token attr-name">:min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:max</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:step</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.5<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customRange3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="api" tabindex="-1">API <a class="anchor-link" href="#api" aria-hidden="true">#</a></h2><h3 id="cformrange" tabindex="-1">CFormRange <a class="anchor-link" href="#cformrange" aria-hidden="true">#</a></h3><div class="language-jsx ext-jsx line-numbers-mode"><pre class="language-jsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CFormRange <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@coreui/vue&#39;</span>\n<span class="token comment">// or</span>\n<span class="token keyword">import</span> CFormRange <span class="token keyword">from</span> <span class="token string">&#39;@coreui/vue/src/components/form/CFormRange&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="props" tabindex="-1">Props <a class="anchor-link" href="#props" aria-hidden="true">#</a></h4><table class="table table-striped table-api"><thead><tr><th>Prop name</th><th>Description</th><th>Type</th><th>Values</th><th>Default</th></tr></thead><tbody><tr><td><strong>disabled</strong></td><td>Toggle the disabled state for the component.</td><td>boolean</td><td>-</td><td>-</td></tr><tr><td><strong>max</strong></td><td>Specifies the maximum value for the component.</td><td>number</td><td>-</td><td>-</td></tr><tr><td><strong>min</strong></td><td>Specifies the minimum value for the component.</td><td>number</td><td>-</td><td>-</td></tr><tr><td><strong>readonly</strong></td><td>Toggle the readonly state for the component.</td><td>boolean</td><td>-</td><td></td></tr><tr><td><strong>steps</strong></td><td>Specifies the interval between legal numbers in the component.</td><td>number</td><td>-</td><td>-</td></tr><tr><td><strong>value</strong></td><td>The <code>value</code> attribute of component.<br><code>@controllable</code> onChange</td><td>number</td><td>-</td><td>-</td></tr></tbody></table>',6),v={},f=(0,s(3744).Z)(v,[["render",function(a,n){const s=(0,t.up)("CFormLabel"),v=(0,t.up)("CFormRange");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,o,(0,t._)("div",p,[(0,t.Wm)(s,{for:"customRange1"},{default:(0,t.w5)((()=>[l])),_:1}),(0,t.Wm)(v,{id:"customRange1"})]),u,(0,t._)("div",c,[(0,t.Wm)(s,{for:"disabledRange"},{default:(0,t.w5)((()=>[r])),_:1}),(0,t.Wm)(v,{id:"disabledRange",disabled:""})]),i,(0,t._)("div",d,[(0,t.Wm)(s,{for:"customRange2"},{default:(0,t.w5)((()=>[m])),_:1}),(0,t.Wm)(v,{min:0,max:5,defaultValue:"3",id:"customRange2"})]),k,(0,t._)("div",g,[(0,t.Wm)(s,{for:"customRange3"},{default:(0,t.w5)((()=>[b])),_:1}),(0,t.Wm)(v,{min:0,max:5,step:.5,defaultValue:"3",id:"customRange3"},null,8,["step"])]),h],64)}]])}}]);