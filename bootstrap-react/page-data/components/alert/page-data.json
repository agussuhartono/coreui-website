{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/components/alert/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bootstrap React"}},"mdx":{"id":"2a2eae30-5e2d-5f0c-a98c-35457e0c93f0","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar LiveExample = function LiveExample() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setVisible = _useState2[1];\n\n  return mdx(React.Fragment, null, mdx(CAlert, {\n    color: \"primary\",\n    dismissible: true,\n    visible: visible,\n    onClose: function onClose() {\n      return setVisible(false);\n    },\n    mdxType: \"CAlert\"\n  }, \"A simple primary alert\\u2014check it out!\"), mdx(CButton, {\n    color: \"primary\",\n    onClick: function onClick() {\n      return setVisible(true);\n    },\n    mdxType: \"CButton\"\n  }, \"Show live alert\"));\n};\n\nvar _frontmatter = {\n  \"title\": \"Alert Component\",\n  \"name\": \"Bootstrap React Alert\",\n  \"description\": \"Bootstrap React Alert component gives contextual feedback information for common user operations. The alert component is delivered with a bunch of usable and adjustable alert messages.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/alert\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar Callout = makeShortcode(\"Callout\");\nvar layoutProps = {\n  LiveExample: LiveExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Examples\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"React Alert is prepared for any length of text, as well as an optional close button. For a styling, use one of the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"required\"), \" contextual \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" props (e.g., \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"primary\"), \"). For inline dismissal, use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"#dismissing\"\n  }, \"dismissing prop\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"primary\",\n    mdxType: \"CAlert\"\n  }, \"A simple primary alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"secondary\",\n    mdxType: \"CAlert\"\n  }, \"A simple secondary alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"success\",\n    mdxType: \"CAlert\"\n  }, \"A simple success alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"danger\",\n    mdxType: \"CAlert\"\n  }, \"A simple danger alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"warning\",\n    mdxType: \"CAlert\"\n  }, \"A simple warning alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"info\",\n    mdxType: \"CAlert\"\n  }, \"A simple info alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"light\",\n    mdxType: \"CAlert\"\n  }, \"A simple light alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"dark\",\n    mdxType: \"CAlert\"\n  }, \"A simple dark alert\\u2014check it out!\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"primary\\\">\\n  A simple primary alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"secondary\\\">\\n  A simple secondary alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"success\\\">\\n  A simple success alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"danger\\\">\\n  A simple danger alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"warning\\\">\\n  A simple warning alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"info\\\">\\n  A simple info alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"light\\\">\\n  A simple light alert\\u2014check it out!\\n</CAlert>\\n<CAlert color=\\\"dark\\\">\\n  A simple dark alert\\u2014check it out!\\n</CAlert>\\n\")), mdx(Callout, {\n    color: \"info\",\n    mdxType: \"Callout\"\n  }, mdx(\"h5\", null, \"Conveying meaning to assistive technologies\"), mdx(\"p\", null, \"Using color to add meaning only provides a visual indication, which will not be conveyed to users of assistive technologies \\u2013 such as screen readers. Ensure that information denoted by the color is either obvious from the content itself (e.g. the visible text), or is included through alternative means, such as additional text hidden with the `.visually-hidden` class.\")), mdx(\"h3\", {\n    \"id\": \"live-example\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Live example\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#live-example\",\n    \"aria-label\": \"live example permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Click the button below to show an alert (hidden with inline styles to start), then dismiss (and destroy) it with the built-in close button.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(LiveExample, {\n    mdxType: \"LiveExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [visible, setVisible] = useState(false)\\nreturn (\\n  <>\\n    <CAlert color=\\\"primary\\\" dismissible visible={visible} onClose={() => setVisible(false)}>A simple primary alert\\u2014check it out!</CAlert>\\n    <CButton color=\\\"primary\\\" onClick={() => setVisible(true)}>Show live alert</CButton>\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"link-color\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Link color\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#link-color\",\n    \"aria-label\": \"link color permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CAlertLink>\"), \" component to immediately give matching colored links inside any alert.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"primary\",\n    mdxType: \"CAlert\"\n  }, \"A simple primary alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"secondary\",\n    mdxType: \"CAlert\"\n  }, \"A simple secondary alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"success\",\n    mdxType: \"CAlert\"\n  }, \"A simple success alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"danger\",\n    mdxType: \"CAlert\"\n  }, \"A simple danger alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"warning\",\n    mdxType: \"CAlert\"\n  }, \"A simple warning alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"info\",\n    mdxType: \"CAlert\"\n  }, \"A simple info alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"light\",\n    mdxType: \"CAlert\"\n  }, \"A simple light alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\"), mdx(CAlert, {\n    color: \"dark\",\n    mdxType: \"CAlert\"\n  }, \"A simple dark alert with \", mdx(CAlertLink, {\n    href: \"#\",\n    mdxType: \"CAlertLink\"\n  }, \"an example link\"), \". Give it a click if you like.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"primary\\\">\\n  A simple primary alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"secondary\\\">\\n  A simple secondary alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"success\\\">\\n  A simple success alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"danger\\\">\\n  A simple danger alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"warning\\\">\\n  A simple warning alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"info\\\">\\n  A simple info alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"light\\\">\\n  A simple light alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n<CAlert color=\\\"dark\\\">\\n  A simple dark alert with <CAlertLink href=\\\"#\\\">an example link</CAlertLink>. Give it a click if you like.\\n</CAlert>\\n\")), mdx(\"h3\", {\n    \"id\": \"additional-content\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Additional content\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#additional-content\",\n    \"aria-label\": \"additional content permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Alert can also incorporate supplementary components \", \"&\", \" elements like heading, paragraph, and divider.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"success\",\n    mdxType: \"CAlert\"\n  }, mdx(CAlertHeading, {\n    tag: \"h4\",\n    mdxType: \"CAlertHeading\"\n  }, \"Well done!\"), mdx(\"p\", null, \"Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.\"), mdx(\"hr\", null), mdx(\"p\", {\n    className: \"mb-0\"\n  }, \"Whenever you need to, be sure to use margin utilities to keep things nice and tidy.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"success\\\">\\n  <CAlertHeading tag=\\\"h4\\\">Well done!</CAlertHeading>\\n  <p>Aww yeah, you successfully read this important alert message. This example text is going to run a bit longer so that you can see how spacing within an alert works with this kind of content.</p>\\n  <hr />\\n  <p className=\\\"mb-0\\\">Whenever you need to, be sure to use margin utilities to keep things nice and tidy.</p>\\n</CAlert>\\n\")), mdx(\"h3\", {\n    \"id\": \"icons\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Icons\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#icons\",\n    \"aria-label\": \"icons permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Similarly, you can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https//coreui.io/docs/4.0/utilities/flex%22\"\n  }, \"flexbox utilities\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://icons.coreui.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"CoreUI Icons\"), \" to create alerts with icons. Depending on your icons and content, you may want to add more utilities or custom styles.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"primary\",\n    className: \"d-flex align-items-center\",\n    mdxType: \"CAlert\"\n  }, mdx(\"svg\", {\n    className: \"flex-shrink-0 me-2\",\n    width: \"24\",\n    height: \"24\",\n    viewBox: \"0 0 512 512\"\n  }, mdx(\"rect\", {\n    width: \"32\",\n    height: \"176\",\n    x: \"240\",\n    y: \"176\",\n    fill: \"var(--ci-primary-color, currentColor)\",\n    className: \"ci-primary\"\n  }), mdx(\"rect\", {\n    width: \"32\",\n    height: \"32\",\n    x: \"240\",\n    y: \"384\",\n    fill: \"var(--ci-primary-color, currentColor)\",\n    className: \"ci-primary\"\n  }), mdx(\"path\", {\n    fill: \"var(--ci-primary-color, currentColor)\",\n    d: \"M274.014,16H237.986L16,445.174V496H496V445.174ZM464,464H48V452.959L256,50.826,464,452.959Z\",\n    className: \"ci-primary\"\n  })), mdx(\"div\", null, \"An example alert with an icon\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"primary\\\" className=\\\"d-flex align-items-center\\\">\\n  <svg className=\\\"flex-shrink-0 me-2\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 512 512\\\">\\n    <rect width=\\\"32\\\" height=\\\"176\\\" x=\\\"240\\\" y=\\\"176\\\" fill=\\\"var(--ci-primary-color, currentColor)\\\" className=\\\"ci-primary\\\"></rect><rect width=\\\"32\\\" height=\\\"32\\\" x=\\\"240\\\" y=\\\"384\\\" fill=\\\"var(--ci-primary-color, currentColor)\\\" className=\\\"ci-primary\\\"></rect><path fill=\\\"var(--ci-primary-color, currentColor)\\\" d=\\\"M274.014,16H237.986L16,445.174V496H496V445.174ZM464,464H48V452.959L256,50.826,464,452.959Z\\\" className=\\\"ci-primary\\\"></path>\\n  </svg>\\n  <div>\\n    An example alert with an icon\\n  </div>\\n</CAlert>\\n\")), mdx(\"p\", null, \"Need more than one icon for your alerts? Consider using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://icons.coreui.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"CoreUI Icons\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"primary\",\n    className: \"d-flex align-items-center\",\n    mdxType: \"CAlert\"\n  }, mdx(CIcon, {\n    icon: cilInfo,\n    className: \"flex-shrink-0 me-2\",\n    width: 24,\n    height: 24,\n    mdxType: \"CIcon\"\n  }), mdx(\"div\", null, \"An example alert with an icon\")), mdx(CAlert, {\n    color: \"success\",\n    className: \"d-flex align-items-center\",\n    mdxType: \"CAlert\"\n  }, mdx(CIcon, {\n    icon: cilCheckCircle,\n    className: \"flex-shrink-0 me-2\",\n    width: 24,\n    height: 24,\n    mdxType: \"CIcon\"\n  }), mdx(\"div\", null, \"An example success alert with an icon\")), mdx(CAlert, {\n    color: \"warning\",\n    className: \"d-flex align-items-center\",\n    mdxType: \"CAlert\"\n  }, mdx(CIcon, {\n    icon: cilWarning,\n    className: \"flex-shrink-0 me-2\",\n    width: 24,\n    height: 24,\n    mdxType: \"CIcon\"\n  }), mdx(\"div\", null, \"An example warning alert with an icon\")), mdx(CAlert, {\n    color: \"danger\",\n    className: \"d-flex align-items-center\",\n    mdxType: \"CAlert\"\n  }, mdx(CIcon, {\n    icon: cilBurn,\n    className: \"flex-shrink-0 me-2\",\n    width: 24,\n    height: 24,\n    mdxType: \"CIcon\"\n  }), mdx(\"div\", null, \"An example danger alert with an icon\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"primary\\\" className=\\\"d-flex align-items-center\\\">\\n  <CIcon icon={cilInfo} className=\\\"flex-shrink-0 me-2\\\" width={24} height={24} />\\n  <div>\\n    An example alert with an icon\\n  </div>\\n</CAlert>\\n<CAlert color=\\\"success\\\" className=\\\"d-flex align-items-center\\\">\\n  <CIcon icon={cilCheckCircle} className=\\\"flex-shrink-0 me-2\\\" width={24} height={24} />\\n  <div>\\n    An example success alert with an icon\\n  </div>\\n</CAlert>\\n<CAlert color=\\\"warning\\\" className=\\\"d-flex align-items-center\\\">\\n  <CIcon icon={cilWarning} className=\\\"flex-shrink-0 me-2\\\" width={24} height={24} />\\n  <div>\\n    An example warning alert with an icon\\n  </div>\\n</CAlert>\\n<CAlert color=\\\"danger\\\" className=\\\"d-flex align-items-center\\\">\\n  <CIcon icon={cilBurn} className=\\\"flex-shrink-0 me-2\\\" width={24} height={24} />\\n  <div>\\n    An example danger alert with an icon\\n  </div>\\n</CAlert>\\n\")), mdx(\"h3\", {\n    \"id\": \"solid\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Solid\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#solid\",\n    \"aria-label\": \"solid permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant=\\\"solid\\\"\"), \" to change contextual colors to solid.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"primary\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid primary alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"secondary\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid secondary alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"success\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid success alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"danger\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid danger alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"warning\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid warning alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"info\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid info alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"light\",\n    variant: \"solid\",\n    className: \"text-high-emphasis\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid light alert\\u2014check it out!\"), mdx(CAlert, {\n    color: \"dark\",\n    variant: \"solid\",\n    mdxType: \"CAlert\"\n  }, \"A simple solid dark alert\\u2014check it out!\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert color=\\\"primary\\\" variant=\\\"solid\\\">A simple solid primary alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"secondary\\\" variant=\\\"solid\\\">A simple solid secondary alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"success\\\" variant=\\\"solid\\\">A simple solid success alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"danger\\\" variant=\\\"solid\\\">A simple solid danger alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"warning\\\" variant=\\\"solid\\\">A simple solid warning alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"info\\\" variant=\\\"solid\\\">A simple solid info alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"light\\\" variant=\\\"solid\\\" className=\\\"text-high-emphasis\\\">A simple solid light alert\\u2014check it out!</CAlert>\\n<CAlert color=\\\"dark\\\" variant=\\\"solid\\\">A simple solid dark alert\\u2014check it out!</CAlert>\\n\")), mdx(\"h3\", {\n    \"id\": \"dismissing\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Dismissing\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#dismissing\",\n    \"aria-label\": \"dismissing permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Alerts can also be easily dismissed. Just add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dismissible\"), \" prop.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CAlert, {\n    color: \"warning\",\n    dismissible: true,\n    onClose: function onClose() {\n      alert(\"👋 Well, hi there! Thanks for dismissing me.\");\n    },\n    mdxType: \"CAlert\"\n  }, mdx(\"strong\", null, \"Go right ahead\"), \" and click that dimiss over there on the right.\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CAlert\\n  color=\\\"warning\\\"\\n  dismissible\\n  onClose={() => {\\n    alert(\\\"\\uD83D\\uDC4B Well, hi there! Thanks for dismissing me.\\\");\\n  }}\\n>\\n  <strong>Go right ahead</strong> and click that dimiss over there on the right.\\n</CAlert>\\n\")), mdx(Callout, {\n    color: \"warning\",\n    mdxType: \"Callout\"\n  }, mdx(\"p\", null, \"When an alert is dismissed, the element is completely removed from the page structure. If a keyboard user dismisses the alert using the close button, their focus will suddenly be lost and, depending on the browser, reset to the start of the page/document.\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"calert\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAlert\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#calert\",\n    \"aria-label\": \"calert permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAlert } from '@coreui/bootstrap-react'\\n// or\\nimport CAlert from '@coreui/bootstrap-react/src/components/alert/CAlert'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"color\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets the color context of the component to one of Bootstrap React\\u2019s themed colors.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'primary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'secondary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'success'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'danger'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'warning'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'info'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'dark'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'light'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"primary\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"dismissible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Optionally add a close button to alert and allow it to self dismiss.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onClose\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be closed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"() => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Set the alert variant to a solid.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the visibility of component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\"))))), mdx(\"h3\", {\n    \"id\": \"calertheading\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAlertHeading\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#calertheading\",\n    \"aria-label\": \"calertheading permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAlertHeading } from '@coreui/bootstrap-react'\\n// or\\nimport CAlertHeading from '@coreui/bootstrap-react/src/components/alert/CAlertHeading'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"calertlink\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CAlertLink\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#calertlink\",\n    \"aria-label\": \"calertlink permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CAlertLink } from '@coreui/bootstrap-react'\\n// or\\nimport CAlertLink from '@coreui/bootstrap-react/src/components/alert/CAlertLink'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Alert Component","name":"Bootstrap React Alert","description":"Bootstrap React Alert component gives contextual feedback information for common user operations. The alert component is delivered with a bunch of usable and adjustable alert messages.","route":"/components/alert"},"tableOfContents":{"items":[{"url":"#examples","title":"Examples","items":[{"url":"#live-example","title":"Live example"},{"url":"#link-color","title":"Link color"},{"url":"#additional-content","title":"Additional content"},{"url":"#icons","title":"Icons"},{"url":"#solid","title":"Solid"},{"url":"#dismissing","title":"Dismissing"}]},{"url":"#api","title":"API","items":[{"url":"#calert","title":"CAlert"},{"url":"#calertheading","title":"CAlertHeading"},{"url":"#calertlink","title":"CAlertLink"}]}]}}},"pageContext":{"id":"2a2eae30-5e2d-5f0c-a98c-35457e0c93f0"}},
    "staticQueryHashes": ["4202924991"]}