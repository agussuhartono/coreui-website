{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/components/toast/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bootstrap React"}},"mdx":{"id":"52ec256c-9e92-5b93-a133-8a5c3ff2eba1","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar BasicExample = function BasicExample() {\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      toast = _useState2[0],\n      addToast = _useState2[1];\n\n  var toaster = useRef();\n  var exampleToast = mdx(CToast, {\n    title: \"Bootstrap React\",\n    mdxType: \"CToast\"\n  }, mdx(CToastHeader, {\n    close: true,\n    mdxType: \"CToastHeader\"\n  }, mdx(\"svg\", {\n    className: \"rounded me-2\",\n    width: \"20\",\n    height: \"20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid slice\",\n    focusable: \"false\",\n    role: \"img\"\n  }, mdx(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#007aff\"\n  })), mdx(\"strong\", {\n    className: \"me-auto\"\n  }, \"Bootstrap React\"), mdx(\"small\", null, \"7 min ago\")), mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\"));\n  return mdx(React.Fragment, null, mdx(CButton, {\n    onClick: function onClick() {\n      return addToast(exampleToast);\n    },\n    mdxType: \"CButton\"\n  }, \"Send a toast\"), mdx(CToaster, {\n    ref: toaster,\n    push: toast,\n    placement: \"top-end\",\n    mdxType: \"CToaster\"\n  }));\n};\n\nvar _frontmatter = {\n  \"title\": \"Toast Component\",\n  \"name\": \"Bootstrap React Toast\",\n  \"description\": \"Push notifications to your visitors with a Bootstrap React Toast, a lightweight and easily customizable alert message.\",\n  \"menu\": \"Components\",\n  \"route\": \"/components/toast\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  BasicExample: BasicExample,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"React toasts are lightweight notifications designed to mimic the push notifications that have been popularized by mobile and desktop operating systems. They\\u2019re built with flexbox, so they\\u2019re easy to align and position.\"), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overview\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Things to know when using the toast plugin:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Toasts are opt-in for performance reasons, so \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"you must initialize them yourself\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Toasts will automatically hide if you do not specify \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"autohide: false\"), \".\")), mdx(\"h2\", {\n    \"id\": \"examples\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Examples\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#examples\",\n    \"aria-label\": \"examples permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"basic\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Basic\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#basic\",\n    \"aria-label\": \"basic permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"To encourage extensible and predictable toasts, we recommend a header and body. Toast headers use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"display: flex\"), \", allowing easy alignment of content thanks to our margin and flexbox utilities.\"), mdx(\"p\", null, \"Toasts are as flexible as you need and have very little required markup. At a minimum, we require a single element to contain your \\\"toasted\\\" content and strongly encourage a dismiss button.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CToast, {\n    title: \"Bootstrap React\",\n    animation: false,\n    autohide: false,\n    visible: true,\n    mdxType: \"CToast\"\n  }, mdx(CToastHeader, {\n    close: true,\n    mdxType: \"CToastHeader\"\n  }, mdx(\"svg\", {\n    className: \"rounded me-2\",\n    width: \"20\",\n    height: \"20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid slice\",\n    focusable: \"false\",\n    role: \"img\"\n  }, mdx(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#007aff\"\n  })), mdx(\"strong\", {\n    className: \"me-auto\"\n  }, \"Bootstrap React\"), mdx(\"small\", null, \"7 min ago\")), mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToast title=\\\"Bootstrap React\\\" autohide={false} visible={true}>\\n  <CToastHeader close>\\n    <svg\\n      className=\\\"rounded me-2\\\"\\n      width=\\\"20\\\"\\n      height=\\\"20\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      preserveAspectRatio=\\\"xMidYMid slice\\\"\\n      focusable=\\\"false\\\"\\n      role=\\\"img\\\"\\n    >\\n      <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007aff\\\"></rect>\\n    </svg>\\n    <strong className=\\\"me-auto\\\">Bootstrap React</strong>\\n    <small>7 min ago</small>\\n  </CToastHeader>\\n  <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n</CToast>\\n\")), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(BasicExample, {\n    mdxType: \"BasicExample\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"const [toast, addToast] = useState(0)\\nconst toaster = useRef()\\nconst exampleToast = (\\n  <CToast title=\\\"Bootstrap React\\\">\\n    <CToastHeader close>\\n      <svg\\n        className=\\\"rounded me-2\\\"\\n        width=\\\"20\\\"\\n        height=\\\"20\\\"\\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n        preserveAspectRatio=\\\"xMidYMid slice\\\"\\n        focusable=\\\"false\\\"\\n        role=\\\"img\\\"\\n      >\\n        <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007aff\\\"></rect>\\n      </svg>\\n      <strong className=\\\"me-auto\\\">Bootstrap React</strong>\\n      <small>7 min ago</small>\\n    </CToastHeader>\\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n  </CToast>\\n)\\nreturn (\\n  <>\\n    <CButton onClick={() => addToast(exampleToast)}>Send a toast</CButton>\\n    <CToaster ref={toaster} push={toast} placement=\\\"top-end\\\" />\\n  </>\\n)\\n\")), mdx(\"h3\", {\n    \"id\": \"translucent\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Translucent\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#translucent\",\n    \"aria-label\": \"translucent permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Toasts are slightly translucent to blend in with what's below them.\"), mdx(Example, {\n    className: \"bg-dark border-0\",\n    mdxType: \"Example\"\n  }, mdx(CToast, {\n    title: \"Bootstrap React\",\n    autohide: false,\n    visible: true,\n    mdxType: \"CToast\"\n  }, mdx(CToastHeader, {\n    close: true,\n    mdxType: \"CToastHeader\"\n  }, mdx(\"svg\", {\n    className: \"rounded me-2\",\n    width: \"20\",\n    height: \"20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid slice\",\n    focusable: \"false\",\n    role: \"img\"\n  }, mdx(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#007aff\"\n  })), mdx(\"strong\", {\n    className: \"me-auto\"\n  }, \"Bootstrap React\"), mdx(\"small\", null, \"7 min ago\")), mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToast title=\\\"Bootstrap React\\\" autohide={false} visible={true}>\\n  <CToastHeader close>\\n    <svg\\n      className=\\\"rounded me-2\\\"\\n      width=\\\"20\\\"\\n      height=\\\"20\\\"\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      preserveAspectRatio=\\\"xMidYMid slice\\\"\\n      focusable=\\\"false\\\"\\n      role=\\\"img\\\"\\n    >\\n      <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007aff\\\"></rect>\\n    </svg>\\n    <strong className=\\\"me-auto\\\">Bootstrap React</strong>\\n    <small>7 min ago</small>\\n  </CToastHeader>\\n  <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n</CToast>\\n\")), mdx(\"h3\", {\n    \"id\": \"stacking\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Stacking\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#stacking\",\n    \"aria-label\": \"stacking permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"You can stack toasts by wrapping them in a toast container, which will vertically add some spacing.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CToaster, {\n    mdxType: \"CToaster\"\n  }, mdx(CToast, {\n    title: \"Bootstrap React\",\n    autohide: false,\n    visible: true,\n    mdxType: \"CToast\"\n  }, mdx(CToastHeader, {\n    close: true,\n    mdxType: \"CToastHeader\"\n  }, mdx(\"svg\", {\n    className: \"rounded me-2\",\n    width: \"20\",\n    height: \"20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid slice\",\n    focusable: \"false\",\n    role: \"img\"\n  }, mdx(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#007aff\"\n  })), mdx(\"strong\", {\n    className: \"me-auto\"\n  }, \"Bootstrap React\"), mdx(\"small\", null, \"7 min ago\")), mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\")), mdx(CToast, {\n    title: \"Bootstrap React\",\n    autohide: false,\n    visible: true,\n    mdxType: \"CToast\"\n  }, mdx(CToastHeader, {\n    close: true,\n    mdxType: \"CToastHeader\"\n  }, mdx(\"svg\", {\n    className: \"rounded me-2\",\n    width: \"20\",\n    height: \"20\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMidYMid slice\",\n    focusable: \"false\",\n    role: \"img\"\n  }, mdx(\"rect\", {\n    width: \"100%\",\n    height: \"100%\",\n    fill: \"#007aff\"\n  })), mdx(\"strong\", {\n    className: \"me-auto\"\n  }, \"Bootstrap React\"), mdx(\"small\", null, \"7 min ago\")), mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\")))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToaster>\\n  <CToast title=\\\"Bootstrap React\\\" autohide={false} visible={true}>\\n    <CToastHeader close>\\n      <svg\\n        className=\\\"rounded me-2\\\"\\n        width=\\\"20\\\"\\n        height=\\\"20\\\"\\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n        preserveAspectRatio=\\\"xMidYMid slice\\\"\\n        focusable=\\\"false\\\"\\n        role=\\\"img\\\"\\n      >\\n        <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007aff\\\"></rect>\\n      </svg>\\n      <strong className=\\\"me-auto\\\">Bootstrap React</strong>\\n      <small>7 min ago</small>\\n    </CToastHeader>\\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n  </CToast>\\n  <CToast title=\\\"Bootstrap React\\\" autohide={false} visible={true}>\\n    <CToastHeader close>\\n      <svg\\n        className=\\\"rounded me-2\\\"\\n        width=\\\"20\\\"\\n        height=\\\"20\\\"\\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n        preserveAspectRatio=\\\"xMidYMid slice\\\"\\n        focusable=\\\"false\\\"\\n        role=\\\"img\\\"\\n      >\\n        <rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"#007aff\\\"></rect>\\n      </svg>\\n      <strong className=\\\"me-auto\\\">Bootstrap React</strong>\\n      <small>7 min ago</small>\\n    </CToastHeader>\\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n  </CToast>\\n</CToaster>\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-content\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Custom content\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#custom-content\",\n    \"aria-label\": \"custom content permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Customize your toasts by removing sub-components, tweaking them with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/5.1/utilities/api\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"utilities\"), \", or by adding your own markup. Here we've created a simpler toast by removing the default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CToastHeader>\"), \", adding a custom hide icon from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://icons.coreui.io\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"CoreUI Icons\"), \", and using some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/5.1/utilities/flex\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"flexbox utilities\"), \" to adjust the layout.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CToast, {\n    autohide: false,\n    visible: true,\n    className: \"align-items-center\",\n    mdxType: \"CToast\"\n  }, mdx(\"div\", {\n    className: \"d-flex\"\n  }, mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\"), mdx(CToastClose, {\n    className: \"me-2 m-auto\",\n    mdxType: \"CToastClose\"\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToast autohide={false} visible={true} className=\\\"align-items-center\\\">\\n  <div className=\\\"d-flex\\\">\\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n    <CToastClose className=\\\"me-2 m-auto\\\" />\\n  </div>\\n</CToast>\\n\")), mdx(\"p\", null, \"Alternatively, you can also add additional controls and components to toasts.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CToast, {\n    autohide: false,\n    visible: true,\n    mdxType: \"CToast\"\n  }, mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\", mdx(\"div\", {\n    className: \"mt-2 pt-2 border-top\"\n  }, mdx(CButton, {\n    type: \"button\",\n    color: \"primary\",\n    size: \"sm\",\n    mdxType: \"CButton\"\n  }, \"Take action\"), mdx(CToastClose, {\n    component: CButton,\n    color: \"secondary\",\n    size: \"sm\",\n    className: \"ms-1\",\n    mdxType: \"CToastClose\"\n  }, \"Close\"))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToast autohide={false} visible={true}>\\n  <CToastBody>\\n    Hello, world! This is a toast message.\\n    <div className=\\\"mt-2 pt-2 border-top\\\">\\n      <CButton type=\\\"button\\\" color=\\\"primary\\\" size=\\\"sm\\\">\\n        Take action\\n      </CButton>\\n      <CToastClose component={CButton} color=\\\"secondary\\\" size=\\\"sm\\\" className=\\\"ms-1\\\">\\n        Close\\n      </CToastClose>\\n    </div>\\n  </CToastBody>\\n</CToast>\\n\")), mdx(\"h3\", {\n    \"id\": \"color-schemes\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Color schemes\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#color-schemes\",\n    \"aria-label\": \"color schemes permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Building on the above example, you can create different toast color schemes with our \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://getbootstrap.com/docs/5.1/utilities/colors\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"color\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://coreui.io/docs/4.0//utilities/background\",\n    \"target\": \"_blank\",\n    \"rel\": \"nofollow\"\n  }, \"background\"), \" utilities. Here we've set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color=\\\"primary\\\"\"), \" and added \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".text-white\"), \" class to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<Ctoast>\"), \", and then set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"white\"), \" property to our close button. For a crisp edge, we remove the default border with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".border-0\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CToast, {\n    autohide: false,\n    visible: true,\n    color: \"primary\",\n    className: \"text-white align-items-center\",\n    mdxType: \"CToast\"\n  }, mdx(\"div\", {\n    className: \"d-flex\"\n  }, mdx(CToastBody, {\n    mdxType: \"CToastBody\"\n  }, \"Hello, world! This is a toast message.\"), mdx(CToastClose, {\n    className: \"me-2 m-auto\",\n    white: true,\n    mdxType: \"CToastClose\"\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CToast autohide={false} visible={true} color=\\\"primary\\\" className=\\\"text-white align-items-center\\\">\\n  <div className=\\\"d-flex\\\">\\n    <CToastBody>Hello, world! This is a toast message.</CToastBody>\\n    <CToastClose className=\\\"me-2 m-auto\\\" white />\\n  </div>\\n</CToast>\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"ctoast\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CToast\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ctoast\",\n    \"aria-label\": \"ctoast permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CToast } from '@coreui/bootstrap-react'\\n// or\\nimport CToast from '@coreui/bootstrap-react/src/components/toast/CToast'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"animation\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Apply a CSS fade transition to the toast.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"autohide\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Auto hide the toast.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"color\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Sets the color context of the component to one of Bootstrap React\\u2019s themed colors.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'primary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'secondary'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'success'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'danger'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'warning'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'info'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'dark'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'light'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"delay\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Delay hiding the toast (ms).\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"5000\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onClose\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be closed.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"(index: number) => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onShow\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Callback fired when the component requests to be shown.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"(index: number) => void\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"visible\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the visibility of component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"false\"))))), mdx(\"h3\", {\n    \"id\": \"ctoastheader\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CToastHeader\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ctoastheader\",\n    \"aria-label\": \"ctoastheader permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CToastHeader } from '@coreui/bootstrap-react'\\n// or\\nimport CToastHeader from '@coreui/bootstrap-react/src/components/toast/CToastHeader'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"closeButton\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Automatically add a close button to the header.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"ctoastbody\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CToastBody\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ctoastbody\",\n    \"aria-label\": \"ctoastbody permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CToastBody } from '@coreui/bootstrap-react'\\n// or\\nimport CToastBody from '@coreui/bootstrap-react/src/components/toast/CToastBody'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"ctoastclose\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CToastClose\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ctoastclose\",\n    \"aria-label\": \"ctoastclose permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CToastClose } from '@coreui/bootstrap-react'\\n// or\\nimport CToastClose from '@coreui/bootstrap-react/src/components/toast/CToastClose'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"component\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Component used for the root node. Either a string to use a HTML element or a component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ComponentClass<any, any>\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"FunctionComponent<any>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the disabled state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"white\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Change the default color to white.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))), mdx(\"h3\", {\n    \"id\": \"ctoaster\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CToaster\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#ctoaster\",\n    \"aria-label\": \"ctoaster permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CToaster } from '@coreui/bootstrap-react'\\n// or\\nimport CToaster from '@coreui/bootstrap-react/src/components/toast/CToaster'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the base component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"placement\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Describes the placement of your component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'top-start'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'top'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'top-end'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'middle-start'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'middle'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'middle-end'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'bottom-start'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'bottom'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"'bottom-end'\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"push\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Adds new \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"CToast\"), \" to \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"CToaster\"), \".\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ReactElement\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Toast Component","name":"Bootstrap React Toast","description":"Push notifications to your visitors with a Bootstrap React Toast, a lightweight and easily customizable alert message.","route":"/components/toast"},"tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#examples","title":"Examples","items":[{"url":"#basic","title":"Basic"},{"url":"#translucent","title":"Translucent"},{"url":"#stacking","title":"Stacking"},{"url":"#custom-content","title":"Custom content"},{"url":"#color-schemes","title":"Color schemes"}]},{"url":"#api","title":"API","items":[{"url":"#ctoast","title":"CToast"},{"url":"#ctoastheader","title":"CToastHeader"},{"url":"#ctoastbody","title":"CToastBody"},{"url":"#ctoastclose","title":"CToastClose"},{"url":"#ctoaster","title":"CToaster"}]}]}}},"pageContext":{"id":"52ec256c-9e92-5b93-a133-8a5c3ff2eba1"}},
    "staticQueryHashes": ["4202924991"]}