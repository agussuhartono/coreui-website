{
    "componentChunkName": "component---src-templates-docs-tsx",
    "path": "/forms/range/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Bootstrap React"}},"mdx":{"id":"b93e25a8-a660-57d1-97af-da49f56845b8","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Range Component\",\n  \"name\": \"Bootstrap React Range\",\n  \"description\": \"Bootstrap React Range component. Use our custom range inputs for consistent cross-browser styling and built-in customization.\",\n  \"menu\": \"Forms\",\n  \"route\": \"/forms/range\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Example = makeShortcode(\"Example\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"overview\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Overview\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#overview\",\n    \"aria-label\": \"overview permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Create custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<input type=\\\"range\\\">\"), \" controls with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"<CFormRange>\"), \". The track (the background) and thumb (the value) are both styled to appear the same across browsers. As only Edge Legacy and Firefox supports \\\"filling\\\" their track from the left or right of the thumb as a means to visually indicate progress, we do not currently support it.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"customRange1\",\n    mdxType: \"CFormLabel\"\n  }, \"Example range\"), mdx(CFormRange, {\n    id: \"customRange1\",\n    mdxType: \"CFormRange\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel htmlFor=\\\"customRange1\\\">Example range</CFormLabel>\\n<CFormRange id=\\\"customRange1\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"disabled\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Disabled\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#disabled\",\n    \"aria-label\": \"disabled permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disabled\"), \" boolean attribute on an input to give it a grayed out appearance and remove pointer events.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"disabledRange\",\n    mdxType: \"CFormLabel\"\n  }, \"Disabled range\"), mdx(CFormRange, {\n    id: \"disabledRange\",\n    disabled: true,\n    mdxType: \"CFormRange\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel htmlFor=\\\"disabledRange\\\">Disabled range</CFormLabel>\\n<CFormRange id=\\\"disabledRange\\\" disabled/>\\n\")), mdx(\"h2\", {\n    \"id\": \"min-and-max\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Min and max\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#min-and-max\",\n    \"aria-label\": \"min and max permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"Range inputs have implicit values for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \"\\u2014\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"0\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"100\"), \", respectively. You may specify new values for those using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"min\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"max\"), \" attributes.\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"customRange2\",\n    mdxType: \"CFormLabel\"\n  }, \"Example range\"), mdx(CFormRange, {\n    min: \"0\",\n    max: \"5\",\n    defaultValue: \"3\",\n    id: \"customRange2\",\n    mdxType: \"CFormRange\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel htmlFor=\\\"customRange2\\\">Example range</CFormLabel>\\n<CFormRange min=\\\"0\\\" max=\\\"5\\\" defaultValue=\\\"3\\\" id=\\\"customRange2\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"steps\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"Steps\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#steps\",\n    \"aria-label\": \"steps permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"p\", null, \"By default, range inputs \\\"snap\\\" to integer values. To change this, you can specify a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step\"), \" value. In the example below, we double the number of steps by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"step=\\\"0.5\\\"\"), \".\"), mdx(Example, {\n    mdxType: \"Example\"\n  }, mdx(CFormLabel, {\n    htmlFor: \"customRange3\",\n    mdxType: \"CFormLabel\"\n  }, \"Example range\"), mdx(CFormRange, {\n    min: \"0\",\n    max: \"5\",\n    step: \"0.5\",\n    defaultValue: \"3\",\n    id: \"customRange3\",\n    mdxType: \"CFormRange\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<CFormLabel htmlFor=\\\"customRange3\\\">Example range</CFormLabel>\\n<CFormRange min=\\\"0\\\" max=\\\"5\\\" step=\\\"0.5\\\" defaultValue=\\\"3\\\" id=\\\"customRange3\\\"/>\\n\")), mdx(\"h2\", {\n    \"id\": \"api\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"API\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"#api\",\n    \"aria-label\": \"api permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"h3\", {\n    \"id\": \"cformrange\",\n    \"style\": {\n      \"position\": \"relative\"\n    }\n  }, \"CFormRange\", mdx(\"a\", {\n    parentName: \"h3\",\n    \"href\": \"#cformrange\",\n    \"aria-label\": \"cformrange permalink\",\n    \"className\": \"anchor-link after\"\n  }, mdx(\"span\", {\n    parentName: \"a\"\n  }, \"#\"))), mdx(\"div\", {\n    \"className\": \"markdown\"\n  }, mdx(\"pre\", {\n    parentName: \"div\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"import { CFormRange } from '@coreui/bootstrap-react'\\n// or\\nimport CFormRange from '@coreui/bootstrap-react/src/components/form/CFormRange'\\n\")), mdx(\"table\", {\n    parentName: \"div\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Property\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\"\n  }, \"Default\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"className\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"A string of all className you want applied to the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the disabled state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"max\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Specifies the maximum value for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"min\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Specifies the minimum value for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Method called immediately after the \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"value\"), \" prop changes.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"ChangeEventHandler<HTMLInputElement>\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"readOnly\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Toggle the readonly state for the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"steps\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"Specifies the interval between legal numbers in the component.\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"The \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"value\"), \" attribute of component.\", mdx(\"br\", {\n    parentName: \"td\"\n  }), \"@controllable onChange\"), mdx(\"td\", {\n    parentName: \"tr\"\n  }, mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"number\"), \" | \", mdx(\"code\", {\n    parentName: \"td\"\n  }, \"string[]\")), mdx(\"td\", {\n    parentName: \"tr\"\n  }, \"-\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Range Component","name":"Bootstrap React Range","description":"Bootstrap React Range component. Use our custom range inputs for consistent cross-browser styling and built-in customization.","route":"/forms/range"},"tableOfContents":{"items":[{"url":"#overview","title":"Overview"},{"url":"#disabled","title":"Disabled"},{"url":"#min-and-max","title":"Min and max"},{"url":"#steps","title":"Steps"},{"url":"#api","title":"API","items":[{"url":"#cformrange","title":"CFormRange"}]}]}}},"pageContext":{"id":"b93e25a8-a660-57d1-97af-da49f56845b8"}},
    "staticQueryHashes": ["4202924991"]}